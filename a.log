Project:               PushToGo_HC
File:                  file:/D:/GitHub/PushToGo_HC/target/bsp/source/BoardConfiguration.cpp
Language:              GNU C++
Index Version:         214.0
Build Configuration:   Debug
Context:               file:/D:/GitHub/PushToGo_HC/target/bsp/source/BoardConfiguration.cpp
   C++, {}
Versions in Index:     1
   C++: {}; 9 macros, 16 includes, 717 names;

Include Search Path (option -I):
   D:\GitHub\PushToGo_HC\generated\fonts\include
   D:\GitHub\PushToGo_HC\generated\gui_generated\include
   D:\GitHub\PushToGo_HC\generated\images\include
   D:\GitHub\PushToGo_HC\generated\texts\include
   D:\GitHub\PushToGo_HC\target\bsp\include
   D:\GitHub\PushToGo_HC\platform\os
   D:\GitHub\PushToGo_HC\target\os\FreeRTOS7.6.0\Source\include
   D:\GitHub\PushToGo_HC\target\gcc
   D:\GitHub\PushToGo_HC\touchgfx\framework\include
   D:\GitHub\PushToGo_HC\gui\include
   D:\GitHub\PushToGo_HC\target\bsp\include\platform\cortex-m
   D:\GitHub\PushToGo_HC\target\bsp\include\platform\cortex-m\CMSIS
   D:\GitHub\PushToGo_HC\target\bsp\include\platform\hal\mcu\stm32f4cube\CMSIS
   D:\GitHub\PushToGo_HC\target\bsp\include\platform\hal\mcu\stm32f4cube\STM32F4xx_HAL_Driver
   D:\GitHub\PushToGo_HC\target\bsp\include\platform\hal\mcu\stm32f4cube\STM32F4xx_HAL_Driver\Legacy
   D:\GitHub\PushToGo_HC\target\bsp\include\platform\hal\mcu\stm32f4cube
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\STM32469I-Discovery
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\ampire480272
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\ampire640480
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\Common
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\cs43l22
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\exc7200
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\ft6x06
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\ili9325
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\ili9341
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\l3gd20
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\lis3dsh
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\lis302dl
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\lsm303dlhc
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\mfxstm32l152
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\n25q128a
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\n25q256a
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\n25q512a
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\otm8009a
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\ov2640
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\s5k5cag
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\s25fl512s
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\st7735
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\stmpe811
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\stmpe1600
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\ts3510
   D:\GitHub\PushToGo_HC\target\bsp\include\vendor\Components\wm8994
   D:\GitHub\PushToGo_HC\target\os\FreeRTOS7.6.0\Source\portable\GCC\ARM_CM4F
   D:\GitHub\PushToGo_HC\target\bsp\include\bsp
   C:\Program Files\GNU MCU Eclipse\ARM Embedded GCC\8.2.1-1.7-20190524-0603\arm-none-eabi\include\c++\8.2.1
   C:\Program Files\GNU MCU Eclipse\ARM Embedded GCC\8.2.1-1.7-20190524-0603\arm-none-eabi\include\c++\8.2.1\arm-none-eabi\thumb\v7e-m+fp\softfp
   C:\Program Files\GNU MCU Eclipse\ARM Embedded GCC\8.2.1-1.7-20190524-0603\arm-none-eabi\include\c++\8.2.1\backward
   C:\Program Files\GNU MCU Eclipse\ARM Embedded GCC\8.2.1-1.7-20190524-0603\lib\gcc\arm-none-eabi\8.2.1\include
   C:\Program Files\GNU MCU Eclipse\ARM Embedded GCC\8.2.1-1.7-20190524-0603\lib\gcc\arm-none-eabi\8.2.1\include-fixed
   C:\Program Files\GNU MCU Eclipse\ARM Embedded GCC\8.2.1-1.7-20190524-0603\arm-none-eabi\include

Macro definitions (option -D):
   CORE_M4=
   DEBUG=
   ST=
   STM32F469xx=
   USE_BPP=24
   USE_FLOATING_POINT=
   USE_OS_SYSTICK=
   __ACCUM_EPSILON__=0x1P-15K
   __ACCUM_FBIT__=15
   __ACCUM_IBIT__=16
   __ACCUM_MAX__=0X7FFFFFFFP-15K
   __ACCUM_MIN__=(-0X1P15K-0X1P15K)
   __APCS_32__=1
   __ARMEL__=1
   __ARM_32BIT_STATE=1
   __ARM_ARCH=7
   __ARM_ARCH_7EM__=1
   __ARM_ARCH_EXT_IDIV__=1
   __ARM_ARCH_ISA_THUMB=2
   __ARM_ARCH_PROFILE=77
   __ARM_ASM_SYNTAX_UNIFIED__=1
   __ARM_EABI__=1
   __ARM_FEATURE_CLZ=1
   __ARM_FEATURE_COPROC=15
   __ARM_FEATURE_DSP=1
   __ARM_FEATURE_FMA=1
   __ARM_FEATURE_IDIV=1
   __ARM_FEATURE_LDREX=7
   __ARM_FEATURE_QBIT=1
   __ARM_FEATURE_SAT=1
   __ARM_FEATURE_SIMD32=1
   __ARM_FEATURE_UNALIGNED=1
   __ARM_FP=4
   __ARM_PCS=1
   __ARM_SIZEOF_MINIMAL_ENUM=1
   __ARM_SIZEOF_WCHAR_T=4
   __arm__=1
   __ATOMIC_ACQUIRE=2
   __ATOMIC_ACQ_REL=4
   __ATOMIC_CONSUME=1
   __ATOMIC_RELAXED=0
   __ATOMIC_RELEASE=3
   __ATOMIC_SEQ_CST=5
   __BIGGEST_ALIGNMENT__=8
   __BYTE_ORDER__=__ORDER_LITTLE_ENDIAN__
   __CHAR16_TYPE__=short unsigned int
   __CHAR32_TYPE__=long unsigned int
   __CHAR_BIT__=8
   __cplusplus=201402L
   __cpp_aggregate_nsdmi=201304
   __cpp_alias_templates=200704
   __cpp_attributes=200809
   __cpp_binary_literals=201304
   __cpp_constexpr=201304
   __cpp_decltype=200707
   __cpp_decltype_auto=201304
   __cpp_delegating_constructors=200604
   __cpp_digit_separators=201309
   __cpp_generic_lambdas=201304
   __cpp_hex_float=201603
   __cpp_inheriting_constructors=201511
   __cpp_initializer_lists=200806
   __cpp_init_captures=201304
   __cpp_lambdas=200907
   __cpp_nsdmi=200809
   __cpp_range_based_for=200907
   __cpp_raw_strings=200710
   __cpp_ref_qualifiers=200710
   __cpp_return_type_deduction=201304
   __cpp_runtime_arrays=198712
   __cpp_rvalue_reference=200610
   __cpp_rvalue_references=200610
   __cpp_sized_deallocation=201309
   __cpp_static_assert=200410
   __cpp_threadsafe_static_init=200806
   __cpp_unicode_characters=200704
   __cpp_unicode_literals=200710
   __cpp_user_defined_literals=200809
   __cpp_variable_templates=201304
   __cpp_variadic_templates=200704
   __DA_FBIT__=31
   __DA_IBIT__=32
   __DBL_DECIMAL_DIG__=17
   __DBL_DENORM_MIN__=double(4.9406564584124654e-324L)
   __DBL_DIG__=15
   __DBL_EPSILON__=double(2.2204460492503131e-16L)
   __DBL_HAS_DENORM__=1
   __DBL_HAS_INFINITY__=1
   __DBL_HAS_QUIET_NAN__=1
   __DBL_MANT_DIG__=53
   __DBL_MAX_10_EXP__=308
   __DBL_MAX_EXP__=1024
   __DBL_MAX__=double(1.7976931348623157e+308L)
   __DBL_MIN_10_EXP__=(-307)
   __DBL_MIN_EXP__=(-1021)
   __DBL_MIN__=double(2.2250738585072014e-308L)
   __DEC128_EPSILON__=1E-33DL
   __DEC128_MANT_DIG__=34
   __DEC128_MAX_EXP__=6145
   __DEC128_MAX__=9.999999999999999999999999999999999E6144DL
   __DEC128_MIN_EXP__=(-6142)
   __DEC128_MIN__=1E-6143DL
   __DEC128_SUBNORMAL_MIN__=0.000000000000000000000000000000001E-6143DL
   __DEC32_EPSILON__=1E-6DF
   __DEC32_MANT_DIG__=7
   __DEC32_MAX_EXP__=97
   __DEC32_MAX__=9.999999E96DF
   __DEC32_MIN_EXP__=(-94)
   __DEC32_MIN__=1E-95DF
   __DEC32_SUBNORMAL_MIN__=0.000001E-95DF
   __DEC64_EPSILON__=1E-15DD
   __DEC64_MANT_DIG__=16
   __DEC64_MAX_EXP__=385
   __DEC64_MAX__=9.999999999999999E384DD
   __DEC64_MIN_EXP__=(-382)
   __DEC64_MIN__=1E-383DD
   __DEC64_SUBNORMAL_MIN__=0.000000000000001E-383DD
   __DECIMAL_DIG__=17
   __DEC_EVAL_METHOD__=2
   __DEPRECATED=1
   __DQ_FBIT__=63
   __DQ_IBIT__=0
   __ELF__=1
   __FINITE_MATH_ONLY__=0
   __FLOAT_WORD_ORDER__=__ORDER_LITTLE_ENDIAN__
   __FLT32X_DECIMAL_DIG__=17
   __FLT32X_DENORM_MIN__=4.9406564584124654e-324F32x
   __FLT32X_DIG__=15
   __FLT32X_EPSILON__=2.2204460492503131e-16F32x
   __FLT32X_HAS_DENORM__=1
   __FLT32X_HAS_INFINITY__=1
   __FLT32X_HAS_QUIET_NAN__=1
   __FLT32X_MANT_DIG__=53
   __FLT32X_MAX_10_EXP__=308
   __FLT32X_MAX_EXP__=1024
   __FLT32X_MAX__=1.7976931348623157e+308F32x
   __FLT32X_MIN_10_EXP__=(-307)
   __FLT32X_MIN_EXP__=(-1021)
   __FLT32X_MIN__=2.2250738585072014e-308F32x
   __FLT32_DECIMAL_DIG__=9
   __FLT32_DENORM_MIN__=1.4012984643248171e-45F32
   __FLT32_DIG__=6
   __FLT32_EPSILON__=1.1920928955078125e-7F32
   __FLT32_HAS_DENORM__=1
   __FLT32_HAS_INFINITY__=1
   __FLT32_HAS_QUIET_NAN__=1
   __FLT32_MANT_DIG__=24
   __FLT32_MAX_10_EXP__=38
   __FLT32_MAX_EXP__=128
   __FLT32_MAX__=3.4028234663852886e+38F32
   __FLT32_MIN_10_EXP__=(-37)
   __FLT32_MIN_EXP__=(-125)
   __FLT32_MIN__=1.1754943508222875e-38F32
   __FLT64_DECIMAL_DIG__=17
   __FLT64_DENORM_MIN__=4.9406564584124654e-324F64
   __FLT64_DIG__=15
   __FLT64_EPSILON__=2.2204460492503131e-16F64
   __FLT64_HAS_DENORM__=1
   __FLT64_HAS_INFINITY__=1
   __FLT64_HAS_QUIET_NAN__=1
   __FLT64_MANT_DIG__=53
   __FLT64_MAX_10_EXP__=308
   __FLT64_MAX_EXP__=1024
   __FLT64_MAX__=1.7976931348623157e+308F64
   __FLT64_MIN_10_EXP__=(-307)
   __FLT64_MIN_EXP__=(-1021)
   __FLT64_MIN__=2.2250738585072014e-308F64
   __FLT_DECIMAL_DIG__=9
   __FLT_DENORM_MIN__=1.4012984643248171e-45F
   __FLT_DIG__=6
   __FLT_EPSILON__=1.1920928955078125e-7F
   __FLT_EVAL_METHOD_TS_18661_3__=0
   __FLT_EVAL_METHOD__=0
   __FLT_HAS_DENORM__=1
   __FLT_HAS_INFINITY__=1
   __FLT_HAS_QUIET_NAN__=1
   __FLT_MANT_DIG__=24
   __FLT_MAX_10_EXP__=38
   __FLT_MAX_EXP__=128
   __FLT_MAX__=3.4028234663852886e+38F
   __FLT_MIN_10_EXP__=(-37)
   __FLT_MIN_EXP__=(-125)
   __FLT_MIN__=1.1754943508222875e-38F
   __FLT_RADIX__=2
   __FP_FAST_FMAF=1
   __FP_FAST_FMAF32=1
   __FRACT_EPSILON__=0x1P-15R
   __FRACT_FBIT__=15
   __FRACT_IBIT__=0
   __FRACT_MAX__=0X7FFFP-15R
   __FRACT_MIN__=(-0.5R-0.5R)
   __GCC_ATOMIC_BOOL_LOCK_FREE=2
   __GCC_ATOMIC_CHAR16_T_LOCK_FREE=2
   __GCC_ATOMIC_CHAR32_T_LOCK_FREE=2
   __GCC_ATOMIC_CHAR_LOCK_FREE=2
   __GCC_ATOMIC_INT_LOCK_FREE=2
   __GCC_ATOMIC_LLONG_LOCK_FREE=1
   __GCC_ATOMIC_LONG_LOCK_FREE=2
   __GCC_ATOMIC_POINTER_LOCK_FREE=2
   __GCC_ATOMIC_SHORT_LOCK_FREE=2
   __GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1
   __GCC_ATOMIC_WCHAR_T_LOCK_FREE=2
   __GCC_HAVE_DWARF2_CFI_ASM=1
   __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1=1
   __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2=1
   __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4=1
   __GCC_IEC_559=0
   __GCC_IEC_559_COMPLEX=0
   __GNUC_MINOR__=2
   __GNUC_PATCHLEVEL__=1
   __GNUC_STDC_INLINE__=1
   __GNUC__=8
   __GNUG__=8
   __GXX_ABI_VERSION=1013
   __GXX_EXPERIMENTAL_CXX0X__=1
   __GXX_TYPEINFO_EQUALITY_INLINE=0
   __GXX_WEAK__=1
   __has_include(STR)=__has_include__(STR)
   __has_include_next(STR)=__has_include_next__(STR)
   __HA_FBIT__=7
   __HA_IBIT__=8
   __HQ_FBIT__=15
   __HQ_IBIT__=0
   __INT16_C(c)=c
   __INT16_MAX__=0x7fff
   __INT16_TYPE__=short int
   __INT32_C(c)=c ## L
   __INT32_MAX__=0x7fffffffL
   __INT32_TYPE__=long int
   __INT64_C(c)=c ## LL
   __INT64_MAX__=0x7fffffffffffffffLL
   __INT64_TYPE__=long long int
   __INT8_C(c)=c
   __INT8_MAX__=0x7f
   __INT8_TYPE__=signed char
   __INTMAX_C(c)=c ## LL
   __INTMAX_MAX__=0x7fffffffffffffffLL
   __INTMAX_TYPE__=long long int
   __INTMAX_WIDTH__=64
   __INTPTR_MAX__=0x7fffffff
   __INTPTR_TYPE__=int
   __INTPTR_WIDTH__=32
   __INT_FAST16_MAX__=0x7fffffff
   __INT_FAST16_TYPE__=int
   __INT_FAST16_WIDTH__=32
   __INT_FAST32_MAX__=0x7fffffff
   __INT_FAST32_TYPE__=int
   __INT_FAST32_WIDTH__=32
   __INT_FAST64_MAX__=0x7fffffffffffffffLL
   __INT_FAST64_TYPE__=long long int
   __INT_FAST64_WIDTH__=64
   __INT_FAST8_MAX__=0x7fffffff
   __INT_FAST8_TYPE__=int
   __INT_FAST8_WIDTH__=32
   __INT_LEAST16_MAX__=0x7fff
   __INT_LEAST16_TYPE__=short int
   __INT_LEAST16_WIDTH__=16
   __INT_LEAST32_MAX__=0x7fffffffL
   __INT_LEAST32_TYPE__=long int
   __INT_LEAST32_WIDTH__=32
   __INT_LEAST64_MAX__=0x7fffffffffffffffLL
   __INT_LEAST64_TYPE__=long long int
   __INT_LEAST64_WIDTH__=64
   __INT_LEAST8_MAX__=0x7f
   __INT_LEAST8_TYPE__=signed char
   __INT_LEAST8_WIDTH__=8
   __INT_MAX__=0x7fffffff
   __INT_WIDTH__=32
   __irq=""
   __LACCUM_EPSILON__=0x1P-31LK
   __LACCUM_FBIT__=31
   __LACCUM_IBIT__=32
   __LACCUM_MAX__=0X7FFFFFFFFFFFFFFFP-31LK
   __LACCUM_MIN__=(-0X1P31LK-0X1P31LK)
   __LDBL_DECIMAL_DIG__=17
   __LDBL_DENORM_MIN__=4.9406564584124654e-324L
   __LDBL_DIG__=15
   __LDBL_EPSILON__=2.2204460492503131e-16L
   __LDBL_HAS_DENORM__=1
   __LDBL_HAS_INFINITY__=1
   __LDBL_HAS_QUIET_NAN__=1
   __LDBL_MANT_DIG__=53
   __LDBL_MAX_10_EXP__=308
   __LDBL_MAX_EXP__=1024
   __LDBL_MAX__=1.7976931348623157e+308L
   __LDBL_MIN_10_EXP__=(-307)
   __LDBL_MIN_EXP__=(-1021)
   __LDBL_MIN__=2.2250738585072014e-308L
   __LFRACT_EPSILON__=0x1P-31LR
   __LFRACT_FBIT__=31
   __LFRACT_IBIT__=0
   __LFRACT_MAX__=0X7FFFFFFFP-31LR
   __LFRACT_MIN__=(-0.5LR-0.5LR)
   __LLACCUM_EPSILON__=0x1P-31LLK
   __LLACCUM_FBIT__=31
   __LLACCUM_IBIT__=32
   __LLACCUM_MAX__=0X7FFFFFFFFFFFFFFFP-31LLK
   __LLACCUM_MIN__=(-0X1P31LLK-0X1P31LLK)
   __LLFRACT_EPSILON__=0x1P-63LLR
   __LLFRACT_FBIT__=63
   __LLFRACT_IBIT__=0
   __LLFRACT_MAX__=0X7FFFFFFFFFFFFFFFP-63LLR
   __LLFRACT_MIN__=(-0.5LLR-0.5LLR)
   __LONG_LONG_MAX__=0x7fffffffffffffffLL
   __LONG_LONG_WIDTH__=64
   __LONG_MAX__=0x7fffffffL
   __LONG_WIDTH__=32
   __OPTIMIZE__=1
   __ORDER_BIG_ENDIAN__=4321
   __ORDER_LITTLE_ENDIAN__=1234
   __ORDER_PDP_ENDIAN__=3412
   __PRAGMA_REDEFINE_EXTNAME=1
   __PTRDIFF_MAX__=0x7fffffff
   __PTRDIFF_TYPE__=int
   __PTRDIFF_WIDTH__=32
   __QQ_FBIT__=7
   __QQ_IBIT__=0
   __REGISTER_PREFIX__=
   __SACCUM_EPSILON__=0x1P-7HK
   __SACCUM_FBIT__=7
   __SACCUM_IBIT__=8
   __SACCUM_MAX__=0X7FFFP-7HK
   __SACCUM_MIN__=(-0X1P7HK-0X1P7HK)
   __SA_FBIT__=15
   __SA_IBIT__=16
   __SCHAR_MAX__=0x7f
   __SCHAR_WIDTH__=8
   __SFRACT_EPSILON__=0x1P-7HR
   __SFRACT_FBIT__=7
   __SFRACT_IBIT__=0
   __SFRACT_MAX__=0X7FP-7HR
   __SFRACT_MIN__=(-0.5HR-0.5HR)
   __SHRT_MAX__=0x7fff
   __SHRT_WIDTH__=16
   __SIG_ATOMIC_MAX__=0x7fffffff
   __SIG_ATOMIC_MIN__=(-__SIG_ATOMIC_MAX__ - 1)
   __SIG_ATOMIC_TYPE__=int
   __SIG_ATOMIC_WIDTH__=32
   __SIZEOF_DOUBLE__=8
   __SIZEOF_FLOAT__=4
   __SIZEOF_INT__=4
   __SIZEOF_LONG_DOUBLE__=8
   __SIZEOF_LONG_LONG__=8
   __SIZEOF_LONG__=4
   __SIZEOF_POINTER__=4
   __SIZEOF_PTRDIFF_T__=4
   __SIZEOF_SHORT__=2
   __SIZEOF_SIZE_T__=4
   __SIZEOF_WCHAR_T__=4
   __SIZEOF_WINT_T__=4
   __SIZE_MAX__=0xffffffffU
   __SIZE_TYPE__=unsigned int
   __SIZE_WIDTH__=32
   __SQ_FBIT__=31
   __SQ_IBIT__=0
   __STDC_HOSTED__=1
   __STDC_UTF_16__=1
   __STDC_UTF_32__=1
   __STDC__=1
   __TA_FBIT__=63
   __TA_IBIT__=64
   __thumb2__=1
   __THUMBEL__=1
   __THUMB_INTERWORK__=1
   __thumb__=1
   __TQ_FBIT__=127
   __TQ_IBIT__=0
   __UACCUM_EPSILON__=0x1P-16UK
   __UACCUM_FBIT__=16
   __UACCUM_IBIT__=16
   __UACCUM_MAX__=0XFFFFFFFFP-16UK
   __UACCUM_MIN__=0.0UK
   __UDA_FBIT__=32
   __UDA_IBIT__=32
   __UDQ_FBIT__=64
   __UDQ_IBIT__=0
   __UFRACT_EPSILON__=0x1P-16UR
   __UFRACT_FBIT__=16
   __UFRACT_IBIT__=0
   __UFRACT_MAX__=0XFFFFP-16UR
   __UFRACT_MIN__=0.0UR
   __UHA_FBIT__=8
   __UHA_IBIT__=8
   __UHQ_FBIT__=16
   __UHQ_IBIT__=0
   __UINT16_C(c)=c
   __UINT16_MAX__=0xffff
   __UINT16_TYPE__=short unsigned int
   __UINT32_C(c)=c ## UL
   __UINT32_MAX__=0xffffffffUL
   __UINT32_TYPE__=long unsigned int
   __UINT64_C(c)=c ## ULL
   __UINT64_MAX__=0xffffffffffffffffULL
   __UINT64_TYPE__=long long unsigned int
   __UINT8_C(c)=c
   __UINT8_MAX__=0xff
   __UINT8_TYPE__=unsigned char
   __UINTMAX_C(c)=c ## ULL
   __UINTMAX_MAX__=0xffffffffffffffffULL
   __UINTMAX_TYPE__=long long unsigned int
   __UINTPTR_MAX__=0xffffffffU
   __UINTPTR_TYPE__=unsigned int
   __UINT_FAST16_MAX__=0xffffffffU
   __UINT_FAST16_TYPE__=unsigned int
   __UINT_FAST32_MAX__=0xffffffffU
   __UINT_FAST32_TYPE__=unsigned int
   __UINT_FAST64_MAX__=0xffffffffffffffffULL
   __UINT_FAST64_TYPE__=long long unsigned int
   __UINT_FAST8_MAX__=0xffffffffU
   __UINT_FAST8_TYPE__=unsigned int
   __UINT_LEAST16_MAX__=0xffff
   __UINT_LEAST16_TYPE__=short unsigned int
   __UINT_LEAST32_MAX__=0xffffffffUL
   __UINT_LEAST32_TYPE__=long unsigned int
   __UINT_LEAST64_MAX__=0xffffffffffffffffULL
   __UINT_LEAST64_TYPE__=long long unsigned int
   __UINT_LEAST8_MAX__=0xff
   __UINT_LEAST8_TYPE__=unsigned char
   __ULACCUM_EPSILON__=0x1P-32ULK
   __ULACCUM_FBIT__=32
   __ULACCUM_IBIT__=32
   __ULACCUM_MAX__=0XFFFFFFFFFFFFFFFFP-32ULK
   __ULACCUM_MIN__=0.0ULK
   __ULFRACT_EPSILON__=0x1P-32ULR
   __ULFRACT_FBIT__=32
   __ULFRACT_IBIT__=0
   __ULFRACT_MAX__=0XFFFFFFFFP-32ULR
   __ULFRACT_MIN__=0.0ULR
   __ULLACCUM_EPSILON__=0x1P-32ULLK
   __ULLACCUM_FBIT__=32
   __ULLACCUM_IBIT__=32
   __ULLACCUM_MAX__=0XFFFFFFFFFFFFFFFFP-32ULLK
   __ULLACCUM_MIN__=0.0ULLK
   __ULLFRACT_EPSILON__=0x1P-64ULLR
   __ULLFRACT_FBIT__=64
   __ULLFRACT_IBIT__=0
   __ULLFRACT_MAX__=0XFFFFFFFFFFFFFFFFP-64ULLR
   __ULLFRACT_MIN__=0.0ULLR
   __UQQ_FBIT__=8
   __UQQ_IBIT__=0
   __USACCUM_EPSILON__=0x1P-8UHK
   __USACCUM_FBIT__=8
   __USACCUM_IBIT__=8
   __USACCUM_MAX__=0XFFFFP-8UHK
   __USACCUM_MIN__=0.0UHK
   __USA_FBIT__=16
   __USA_IBIT__=16
   __USER_LABEL_PREFIX__=
   __USES_INITFINI__=1
   __USFRACT_EPSILON__=0x1P-8UHR
   __USFRACT_FBIT__=8
   __USFRACT_IBIT__=0
   __USFRACT_MAX__=0XFFP-8UHR
   __USFRACT_MIN__=0.0UHR
   __USQ_FBIT__=32
   __USQ_IBIT__=0
   __UTA_FBIT__=64
   __UTA_IBIT__=64
   __UTQ_FBIT__=128
   __UTQ_IBIT__=0
   __VERSION__="8.2.1 20181213 (release) [gcc-8-branch revision 267074]"
   __VFP_FP__=1
   __WCHAR_MAX__=0xffffffffU
   __WCHAR_MIN__=0U
   __WCHAR_TYPE__=unsigned int
   __WCHAR_UNSIGNED__=1
   __WCHAR_WIDTH__=32
   __WINT_MAX__=0xffffffffU
   __WINT_MIN__=0U
   __WINT_TYPE__=unsigned int
   __WINT_WIDTH__=32

Macro definitions (from language + headers in index):
   ABSTRACTBUTTON_HPP=
   ABSTRACTPARTITION_HPP=
   ACR_BYTE0_ADDRESS=((uint32_t)0x40023C00)
   ADC1=((ADC_TypeDef *) ADC1_BASE)
   ADC1_BASE=(APB2PERIPH_BASE + 0x2000)
   ADC2=((ADC_TypeDef *) ADC2_BASE)
   ADC2_BASE=(APB2PERIPH_BASE + 0x2100)
   ADC3=((ADC_TypeDef *) ADC3_BASE)
   ADC3_BASE=(APB2PERIPH_BASE + 0x2200)
   ADC=((ADC_Common_TypeDef *) ADC_BASE)
   ADC_BASE=(APB2PERIPH_BASE + 0x2300)
   ADC_CCR_ADCPRE=((uint32_t)0x00030000)
   ADC_CCR_ADCPRE_0=((uint32_t)0x00010000)
   ADC_CCR_ADCPRE_1=((uint32_t)0x00020000)
   ADC_CCR_DDS=((uint32_t)0x00002000)
   ADC_CCR_DELAY=((uint32_t)0x00000F00)
   ADC_CCR_DELAY_0=((uint32_t)0x00000100)
   ADC_CCR_DELAY_1=((uint32_t)0x00000200)
   ADC_CCR_DELAY_2=((uint32_t)0x00000400)
   ADC_CCR_DELAY_3=((uint32_t)0x00000800)
   ADC_CCR_DMA=((uint32_t)0x0000C000)
   ADC_CCR_DMA_0=((uint32_t)0x00004000)
   ADC_CCR_DMA_1=((uint32_t)0x00008000)
   ADC_CCR_MULTI=((uint32_t)0x0000001F)
   ADC_CCR_MULTI_0=((uint32_t)0x00000001)
   ADC_CCR_MULTI_1=((uint32_t)0x00000002)
   ADC_CCR_MULTI_2=((uint32_t)0x00000004)
   ADC_CCR_MULTI_3=((uint32_t)0x00000008)
   ADC_CCR_MULTI_4=((uint32_t)0x00000010)
   ADC_CCR_TSVREFE=((uint32_t)0x00800000)
   ADC_CCR_VBATE=((uint32_t)0x00400000)
   ADC_CDR_DATA1=((uint32_t)0x0000FFFF)
   ADC_CDR_DATA2=((uint32_t)0xFFFF0000)
   ADC_CLOCKPRESCALER_PCLK_DIV1=ADC_CLOCK_SYNC_PCLK_DIV1
   ADC_CLOCKPRESCALER_PCLK_DIV2=ADC_CLOCK_SYNC_PCLK_DIV2
   ADC_CLOCKPRESCALER_PCLK_DIV4=ADC_CLOCK_SYNC_PCLK_DIV4
   ADC_CLOCKPRESCALER_PCLK_DIV6=ADC_CLOCK_SYNC_PCLK_DIV6
   ADC_CLOCKPRESCALER_PCLK_DIV8=ADC_CLOCK_SYNC_PCLK_DIV8
   ADC_CLOCK_ASYNC=ADC_CLOCK_ASYNC_DIV1
   ADC_CR1_AWDCH=((uint32_t)0x0000001F)
   ADC_CR1_AWDCH_0=((uint32_t)0x00000001)
   ADC_CR1_AWDCH_1=((uint32_t)0x00000002)
   ADC_CR1_AWDCH_2=((uint32_t)0x00000004)
   ADC_CR1_AWDCH_3=((uint32_t)0x00000008)
   ADC_CR1_AWDCH_4=((uint32_t)0x00000010)
   ADC_CR1_AWDEN=((uint32_t)0x00800000)
   ADC_CR1_AWDIE=((uint32_t)0x00000040)
   ADC_CR1_AWDSGL=((uint32_t)0x00000200)
   ADC_CR1_DISCEN=((uint32_t)0x00000800)
   ADC_CR1_DISCNUM=((uint32_t)0x0000E000)
   ADC_CR1_DISCNUM_0=((uint32_t)0x00002000)
   ADC_CR1_DISCNUM_1=((uint32_t)0x00004000)
   ADC_CR1_DISCNUM_2=((uint32_t)0x00008000)
   ADC_CR1_EOCIE=((uint32_t)0x00000020)
   ADC_CR1_JAUTO=((uint32_t)0x00000400)
   ADC_CR1_JAWDEN=((uint32_t)0x00400000)
   ADC_CR1_JDISCEN=((uint32_t)0x00001000)
   ADC_CR1_JEOCIE=((uint32_t)0x00000080)
   ADC_CR1_OVRIE=((uint32_t)0x04000000)
   ADC_CR1_RES=((uint32_t)0x03000000)
   ADC_CR1_RES_0=((uint32_t)0x01000000)
   ADC_CR1_RES_1=((uint32_t)0x02000000)
   ADC_CR1_SCAN=((uint32_t)0x00000100)
   ADC_CR2_ADON=((uint32_t)0x00000001)
   ADC_CR2_ALIGN=((uint32_t)0x00000800)
   ADC_CR2_CONT=((uint32_t)0x00000002)
   ADC_CR2_DDS=((uint32_t)0x00000200)
   ADC_CR2_DMA=((uint32_t)0x00000100)
   ADC_CR2_EOCS=((uint32_t)0x00000400)
   ADC_CR2_EXTEN=((uint32_t)0x30000000)
   ADC_CR2_EXTEN_0=((uint32_t)0x10000000)
   ADC_CR2_EXTEN_1=((uint32_t)0x20000000)
   ADC_CR2_EXTSEL=((uint32_t)0x0F000000)
   ADC_CR2_EXTSEL_0=((uint32_t)0x01000000)
   ADC_CR2_EXTSEL_1=((uint32_t)0x02000000)
   ADC_CR2_EXTSEL_2=((uint32_t)0x04000000)
   ADC_CR2_EXTSEL_3=((uint32_t)0x08000000)
   ADC_CR2_JEXTEN=((uint32_t)0x00300000)
   ADC_CR2_JEXTEN_0=((uint32_t)0x00100000)
   ADC_CR2_JEXTEN_1=((uint32_t)0x00200000)
   ADC_CR2_JEXTSEL=((uint32_t)0x000F0000)
   ADC_CR2_JEXTSEL_0=((uint32_t)0x00010000)
   ADC_CR2_JEXTSEL_1=((uint32_t)0x00020000)
   ADC_CR2_JEXTSEL_2=((uint32_t)0x00040000)
   ADC_CR2_JEXTSEL_3=((uint32_t)0x00080000)
   ADC_CR2_JSWSTART=((uint32_t)0x00400000)
   ADC_CR2_SWSTART=((uint32_t)0x40000000)
   ADC_CSR_AWD1=((uint32_t)0x00000001)
   ADC_CSR_AWD2=((uint32_t)0x00000100)
   ADC_CSR_AWD3=((uint32_t)0x00010000)
   ADC_CSR_DOVR1=((uint32_t)0x00000020)
   ADC_CSR_DOVR2=((uint32_t)0x00002000)
   ADC_CSR_DOVR3=((uint32_t)0x00200000)
   ADC_CSR_EOC1=((uint32_t)0x00000002)
   ADC_CSR_EOC2=((uint32_t)0x00000200)
   ADC_CSR_EOC3=((uint32_t)0x00020000)
   ADC_CSR_JEOC1=((uint32_t)0x00000004)
   ADC_CSR_JEOC2=((uint32_t)0x00000400)
   ADC_CSR_JEOC3=((uint32_t)0x00040000)
   ADC_CSR_JSTRT1=((uint32_t)0x00000008)
   ADC_CSR_JSTRT2=((uint32_t)0x00000800)
   ADC_CSR_JSTRT3=((uint32_t)0x00080000)
   ADC_CSR_STRT1=((uint32_t)0x00000010)
   ADC_CSR_STRT2=((uint32_t)0x00001000)
   ADC_CSR_STRT3=((uint32_t)0x00100000)
   ADC_DR_ADC2DATA=((uint32_t)0xFFFF0000)
   ADC_DR_DATA=((uint32_t)0x0000FFFF)
   ADC_EXTERNALTRIG0_T6_TRGO=ADC_EXTERNALTRIGCONV_T6_TRGO
   ADC_EXTERNALTRIG1_T21_CC2=ADC_EXTERNALTRIGCONV_T21_CC2
   ADC_EXTERNALTRIG2_T2_TRGO=ADC_EXTERNALTRIGCONV_T2_TRGO
   ADC_EXTERNALTRIG3_T2_CC4=ADC_EXTERNALTRIGCONV_T2_CC4
   ADC_EXTERNALTRIG4_T22_TRGO=ADC_EXTERNALTRIGCONV_T22_TRGO
   ADC_EXTERNALTRIG7_EXT_IT11=ADC_EXTERNALTRIGCONV_EXT_IT11
   ADC_EXTERNALTRIG_EDGE_FALLING=ADC_EXTERNALTRIGCONVEDGE_FALLING
   ADC_EXTERNALTRIG_EDGE_NONE=ADC_EXTERNALTRIGCONVEDGE_NONE
   ADC_EXTERNALTRIG_EDGE_RISING=ADC_EXTERNALTRIGCONVEDGE_RISING
   ADC_EXTERNALTRIG_EDGE_RISINGFALLING=ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING
   ADC_HTR_HT=((uint32_t)0x0FFF)
   ADC_JDR1_JDATA=((uint32_t)0xFFFF)
   ADC_JDR2_JDATA=((uint32_t)0xFFFF)
   ADC_JDR3_JDATA=((uint32_t)0xFFFF)
   ADC_JDR4_JDATA=((uint32_t)0xFFFF)
   ADC_JOFR1_JOFFSET1=((uint32_t)0x0FFF)
   ADC_JOFR2_JOFFSET2=((uint32_t)0x0FFF)
   ADC_JOFR3_JOFFSET3=((uint32_t)0x0FFF)
   ADC_JOFR4_JOFFSET4=((uint32_t)0x0FFF)
   ADC_JSQR_JL=((uint32_t)0x00300000)
   ADC_JSQR_JL_0=((uint32_t)0x00100000)
   ADC_JSQR_JL_1=((uint32_t)0x00200000)
   ADC_JSQR_JSQ1=((uint32_t)0x0000001F)
   ADC_JSQR_JSQ1_0=((uint32_t)0x00000001)
   ADC_JSQR_JSQ1_1=((uint32_t)0x00000002)
   ADC_JSQR_JSQ1_2=((uint32_t)0x00000004)
   ADC_JSQR_JSQ1_3=((uint32_t)0x00000008)
   ADC_JSQR_JSQ1_4=((uint32_t)0x00000010)
   ADC_JSQR_JSQ2=((uint32_t)0x000003E0)
   ADC_JSQR_JSQ2_0=((uint32_t)0x00000020)
   ADC_JSQR_JSQ2_1=((uint32_t)0x00000040)
   ADC_JSQR_JSQ2_2=((uint32_t)0x00000080)
   ADC_JSQR_JSQ2_3=((uint32_t)0x00000100)
   ADC_JSQR_JSQ2_4=((uint32_t)0x00000200)
   ADC_JSQR_JSQ3=((uint32_t)0x00007C00)
   ADC_JSQR_JSQ3_0=((uint32_t)0x00000400)
   ADC_JSQR_JSQ3_1=((uint32_t)0x00000800)
   ADC_JSQR_JSQ3_2=((uint32_t)0x00001000)
   ADC_JSQR_JSQ3_3=((uint32_t)0x00002000)
   ADC_JSQR_JSQ3_4=((uint32_t)0x00004000)
   ADC_JSQR_JSQ4=((uint32_t)0x000F8000)
   ADC_JSQR_JSQ4_0=((uint32_t)0x00008000)
   ADC_JSQR_JSQ4_1=((uint32_t)0x00010000)
   ADC_JSQR_JSQ4_2=((uint32_t)0x00020000)
   ADC_JSQR_JSQ4_3=((uint32_t)0x00040000)
   ADC_JSQR_JSQ4_4=((uint32_t)0x00080000)
   ADC_LTR_LT=((uint32_t)0x0FFF)
   ADC_RESOLUTION10b=ADC_RESOLUTION_10B
   ADC_RESOLUTION12b=ADC_RESOLUTION_12B
   ADC_RESOLUTION6b=ADC_RESOLUTION_6B
   ADC_RESOLUTION8b=ADC_RESOLUTION_8B
   ADC_SMPR1_SMP10=((uint32_t)0x00000007)
   ADC_SMPR1_SMP10_0=((uint32_t)0x00000001)
   ADC_SMPR1_SMP10_1=((uint32_t)0x00000002)
   ADC_SMPR1_SMP10_2=((uint32_t)0x00000004)
   ADC_SMPR1_SMP11=((uint32_t)0x00000038)
   ADC_SMPR1_SMP11_0=((uint32_t)0x00000008)
   ADC_SMPR1_SMP11_1=((uint32_t)0x00000010)
   ADC_SMPR1_SMP11_2=((uint32_t)0x00000020)
   ADC_SMPR1_SMP12=((uint32_t)0x000001C0)
   ADC_SMPR1_SMP12_0=((uint32_t)0x00000040)
   ADC_SMPR1_SMP12_1=((uint32_t)0x00000080)
   ADC_SMPR1_SMP12_2=((uint32_t)0x00000100)
   ADC_SMPR1_SMP13=((uint32_t)0x00000E00)
   ADC_SMPR1_SMP13_0=((uint32_t)0x00000200)
   ADC_SMPR1_SMP13_1=((uint32_t)0x00000400)
   ADC_SMPR1_SMP13_2=((uint32_t)0x00000800)
   ADC_SMPR1_SMP14=((uint32_t)0x00007000)
   ADC_SMPR1_SMP14_0=((uint32_t)0x00001000)
   ADC_SMPR1_SMP14_1=((uint32_t)0x00002000)
   ADC_SMPR1_SMP14_2=((uint32_t)0x00004000)
   ADC_SMPR1_SMP15=((uint32_t)0x00038000)
   ADC_SMPR1_SMP15_0=((uint32_t)0x00008000)
   ADC_SMPR1_SMP15_1=((uint32_t)0x00010000)
   ADC_SMPR1_SMP15_2=((uint32_t)0x00020000)
   ADC_SMPR1_SMP16=((uint32_t)0x001C0000)
   ADC_SMPR1_SMP16_0=((uint32_t)0x00040000)
   ADC_SMPR1_SMP16_1=((uint32_t)0x00080000)
   ADC_SMPR1_SMP16_2=((uint32_t)0x00100000)
   ADC_SMPR1_SMP17=((uint32_t)0x00E00000)
   ADC_SMPR1_SMP17_0=((uint32_t)0x00200000)
   ADC_SMPR1_SMP17_1=((uint32_t)0x00400000)
   ADC_SMPR1_SMP17_2=((uint32_t)0x00800000)
   ADC_SMPR1_SMP18=((uint32_t)0x07000000)
   ADC_SMPR1_SMP18_0=((uint32_t)0x01000000)
   ADC_SMPR1_SMP18_1=((uint32_t)0x02000000)
   ADC_SMPR1_SMP18_2=((uint32_t)0x04000000)
   ADC_SMPR2_SMP0=((uint32_t)0x00000007)
   ADC_SMPR2_SMP0_0=((uint32_t)0x00000001)
   ADC_SMPR2_SMP0_1=((uint32_t)0x00000002)
   ADC_SMPR2_SMP0_2=((uint32_t)0x00000004)
   ADC_SMPR2_SMP1=((uint32_t)0x00000038)
   ADC_SMPR2_SMP1_0=((uint32_t)0x00000008)
   ADC_SMPR2_SMP1_1=((uint32_t)0x00000010)
   ADC_SMPR2_SMP1_2=((uint32_t)0x00000020)
   ADC_SMPR2_SMP2=((uint32_t)0x000001C0)
   ADC_SMPR2_SMP2_0=((uint32_t)0x00000040)
   ADC_SMPR2_SMP2_1=((uint32_t)0x00000080)
   ADC_SMPR2_SMP2_2=((uint32_t)0x00000100)
   ADC_SMPR2_SMP3=((uint32_t)0x00000E00)
   ADC_SMPR2_SMP3_0=((uint32_t)0x00000200)
   ADC_SMPR2_SMP3_1=((uint32_t)0x00000400)
   ADC_SMPR2_SMP3_2=((uint32_t)0x00000800)
   ADC_SMPR2_SMP4=((uint32_t)0x00007000)
   ADC_SMPR2_SMP4_0=((uint32_t)0x00001000)
   ADC_SMPR2_SMP4_1=((uint32_t)0x00002000)
   ADC_SMPR2_SMP4_2=((uint32_t)0x00004000)
   ADC_SMPR2_SMP5=((uint32_t)0x00038000)
   ADC_SMPR2_SMP5_0=((uint32_t)0x00008000)
   ADC_SMPR2_SMP5_1=((uint32_t)0x00010000)
   ADC_SMPR2_SMP5_2=((uint32_t)0x00020000)
   ADC_SMPR2_SMP6=((uint32_t)0x001C0000)
   ADC_SMPR2_SMP6_0=((uint32_t)0x00040000)
   ADC_SMPR2_SMP6_1=((uint32_t)0x00080000)
   ADC_SMPR2_SMP6_2=((uint32_t)0x00100000)
   ADC_SMPR2_SMP7=((uint32_t)0x00E00000)
   ADC_SMPR2_SMP7_0=((uint32_t)0x00200000)
   ADC_SMPR2_SMP7_1=((uint32_t)0x00400000)
   ADC_SMPR2_SMP7_2=((uint32_t)0x00800000)
   ADC_SMPR2_SMP8=((uint32_t)0x07000000)
   ADC_SMPR2_SMP8_0=((uint32_t)0x01000000)
   ADC_SMPR2_SMP8_1=((uint32_t)0x02000000)
   ADC_SMPR2_SMP8_2=((uint32_t)0x04000000)
   ADC_SMPR2_SMP9=((uint32_t)0x38000000)
   ADC_SMPR2_SMP9_0=((uint32_t)0x08000000)
   ADC_SMPR2_SMP9_1=((uint32_t)0x10000000)
   ADC_SMPR2_SMP9_2=((uint32_t)0x20000000)
   ADC_SQR1_L=((uint32_t)0x00F00000)
   ADC_SQR1_L_0=((uint32_t)0x00100000)
   ADC_SQR1_L_1=((uint32_t)0x00200000)
   ADC_SQR1_L_2=((uint32_t)0x00400000)
   ADC_SQR1_L_3=((uint32_t)0x00800000)
   ADC_SQR1_SQ13=((uint32_t)0x0000001F)
   ADC_SQR1_SQ13_0=((uint32_t)0x00000001)
   ADC_SQR1_SQ13_1=((uint32_t)0x00000002)
   ADC_SQR1_SQ13_2=((uint32_t)0x00000004)
   ADC_SQR1_SQ13_3=((uint32_t)0x00000008)
   ADC_SQR1_SQ13_4=((uint32_t)0x00000010)
   ADC_SQR1_SQ14=((uint32_t)0x000003E0)
   ADC_SQR1_SQ14_0=((uint32_t)0x00000020)
   ADC_SQR1_SQ14_1=((uint32_t)0x00000040)
   ADC_SQR1_SQ14_2=((uint32_t)0x00000080)
   ADC_SQR1_SQ14_3=((uint32_t)0x00000100)
   ADC_SQR1_SQ14_4=((uint32_t)0x00000200)
   ADC_SQR1_SQ15=((uint32_t)0x00007C00)
   ADC_SQR1_SQ15_0=((uint32_t)0x00000400)
   ADC_SQR1_SQ15_1=((uint32_t)0x00000800)
   ADC_SQR1_SQ15_2=((uint32_t)0x00001000)
   ADC_SQR1_SQ15_3=((uint32_t)0x00002000)
   ADC_SQR1_SQ15_4=((uint32_t)0x00004000)
   ADC_SQR1_SQ16=((uint32_t)0x000F8000)
   ADC_SQR1_SQ16_0=((uint32_t)0x00008000)
   ADC_SQR1_SQ16_1=((uint32_t)0x00010000)
   ADC_SQR1_SQ16_2=((uint32_t)0x00020000)
   ADC_SQR1_SQ16_3=((uint32_t)0x00040000)
   ADC_SQR1_SQ16_4=((uint32_t)0x00080000)
   ADC_SQR2_SQ10=((uint32_t)0x000F8000)
   ADC_SQR2_SQ10_0=((uint32_t)0x00008000)
   ADC_SQR2_SQ10_1=((uint32_t)0x00010000)
   ADC_SQR2_SQ10_2=((uint32_t)0x00020000)
   ADC_SQR2_SQ10_3=((uint32_t)0x00040000)
   ADC_SQR2_SQ10_4=((uint32_t)0x00080000)
   ADC_SQR2_SQ11=((uint32_t)0x01F00000)
   ADC_SQR2_SQ11_0=((uint32_t)0x00100000)
   ADC_SQR2_SQ11_1=((uint32_t)0x00200000)
   ADC_SQR2_SQ11_2=((uint32_t)0x00400000)
   ADC_SQR2_SQ11_3=((uint32_t)0x00800000)
   ADC_SQR2_SQ11_4=((uint32_t)0x01000000)
   ADC_SQR2_SQ12=((uint32_t)0x3E000000)
   ADC_SQR2_SQ12_0=((uint32_t)0x02000000)
   ADC_SQR2_SQ12_1=((uint32_t)0x04000000)
   ADC_SQR2_SQ12_2=((uint32_t)0x08000000)
   ADC_SQR2_SQ12_3=((uint32_t)0x10000000)
   ADC_SQR2_SQ12_4=((uint32_t)0x20000000)
   ADC_SQR2_SQ7=((uint32_t)0x0000001F)
   ADC_SQR2_SQ7_0=((uint32_t)0x00000001)
   ADC_SQR2_SQ7_1=((uint32_t)0x00000002)
   ADC_SQR2_SQ7_2=((uint32_t)0x00000004)
   ADC_SQR2_SQ7_3=((uint32_t)0x00000008)
   ADC_SQR2_SQ7_4=((uint32_t)0x00000010)
   ADC_SQR2_SQ8=((uint32_t)0x000003E0)
   ADC_SQR2_SQ8_0=((uint32_t)0x00000020)
   ADC_SQR2_SQ8_1=((uint32_t)0x00000040)
   ADC_SQR2_SQ8_2=((uint32_t)0x00000080)
   ADC_SQR2_SQ8_3=((uint32_t)0x00000100)
   ADC_SQR2_SQ8_4=((uint32_t)0x00000200)
   ADC_SQR2_SQ9=((uint32_t)0x00007C00)
   ADC_SQR2_SQ9_0=((uint32_t)0x00000400)
   ADC_SQR2_SQ9_1=((uint32_t)0x00000800)
   ADC_SQR2_SQ9_2=((uint32_t)0x00001000)
   ADC_SQR2_SQ9_3=((uint32_t)0x00002000)
   ADC_SQR2_SQ9_4=((uint32_t)0x00004000)
   ADC_SQR3_SQ1=((uint32_t)0x0000001F)
   ADC_SQR3_SQ1_0=((uint32_t)0x00000001)
   ADC_SQR3_SQ1_1=((uint32_t)0x00000002)
   ADC_SQR3_SQ1_2=((uint32_t)0x00000004)
   ADC_SQR3_SQ1_3=((uint32_t)0x00000008)
   ADC_SQR3_SQ1_4=((uint32_t)0x00000010)
   ADC_SQR3_SQ2=((uint32_t)0x000003E0)
   ADC_SQR3_SQ2_0=((uint32_t)0x00000020)
   ADC_SQR3_SQ2_1=((uint32_t)0x00000040)
   ADC_SQR3_SQ2_2=((uint32_t)0x00000080)
   ADC_SQR3_SQ2_3=((uint32_t)0x00000100)
   ADC_SQR3_SQ2_4=((uint32_t)0x00000200)
   ADC_SQR3_SQ3=((uint32_t)0x00007C00)
   ADC_SQR3_SQ3_0=((uint32_t)0x00000400)
   ADC_SQR3_SQ3_1=((uint32_t)0x00000800)
   ADC_SQR3_SQ3_2=((uint32_t)0x00001000)
   ADC_SQR3_SQ3_3=((uint32_t)0x00002000)
   ADC_SQR3_SQ3_4=((uint32_t)0x00004000)
   ADC_SQR3_SQ4=((uint32_t)0x000F8000)
   ADC_SQR3_SQ4_0=((uint32_t)0x00008000)
   ADC_SQR3_SQ4_1=((uint32_t)0x00010000)
   ADC_SQR3_SQ4_2=((uint32_t)0x00020000)
   ADC_SQR3_SQ4_3=((uint32_t)0x00040000)
   ADC_SQR3_SQ4_4=((uint32_t)0x00080000)
   ADC_SQR3_SQ5=((uint32_t)0x01F00000)
   ADC_SQR3_SQ5_0=((uint32_t)0x00100000)
   ADC_SQR3_SQ5_1=((uint32_t)0x00200000)
   ADC_SQR3_SQ5_2=((uint32_t)0x00400000)
   ADC_SQR3_SQ5_3=((uint32_t)0x00800000)
   ADC_SQR3_SQ5_4=((uint32_t)0x01000000)
   ADC_SQR3_SQ6=((uint32_t)0x3E000000)
   ADC_SQR3_SQ6_0=((uint32_t)0x02000000)
   ADC_SQR3_SQ6_1=((uint32_t)0x04000000)
   ADC_SQR3_SQ6_2=((uint32_t)0x08000000)
   ADC_SQR3_SQ6_3=((uint32_t)0x10000000)
   ADC_SQR3_SQ6_4=((uint32_t)0x20000000)
   ADC_SR_AWD=((uint32_t)0x00000001)
   ADC_SR_EOC=((uint32_t)0x00000002)
   ADC_SR_JEOC=((uint32_t)0x00000004)
   ADC_SR_JSTRT=((uint32_t)0x00000008)
   ADC_SR_OVR=((uint32_t)0x00000020)
   ADC_SR_STRT=((uint32_t)0x00000010)
   AES_CLEARFLAG_CCF=CRYP_CLEARFLAG_CCF
   AES_CLEARFLAG_RDERR=CRYP_CLEARFLAG_RDERR
   AES_CLEARFLAG_WRERR=CRYP_CLEARFLAG_WRERR
   AES_FLAG_CCF=CRYP_FLAG_CCF
   AES_FLAG_RDERR=CRYP_FLAG_RDERR
   AES_FLAG_WRERR=CRYP_FLAG_WRERR
   AES_IT_CC=CRYP_IT_CC
   AES_IT_ERR=CRYP_IT_ERR
   AHB1PERIPH_BASE=(PERIPH_BASE + 0x00020000)
   AHB2PERIPH_BASE=(PERIPH_BASE + 0x10000000)
   ALIGNSCREEN_PRESENTER_HPP=
   ALIGNSCREEN_VIEW_BASE_HPP=
   ALIGNSCREEN_VIEW_HPP=
   alloca(size)=__builtin_alloca(size)
   ALL_CHANNELS=ADC_ALL_CHANNELS
   APB1PERIPH_BASE=PERIPH_BASE
   APB2PERIPH_BASE=(PERIPH_BASE + 0x00010000)
   APPLICATIONFONTPROVIDER_HPP=
   APPLICATION_HPP=
   APSR_C_Msk=(1UL << APSR_C_Pos)
   APSR_C_Pos=29
   APSR_GE_Msk=(0xFUL << APSR_GE_Pos)
   APSR_GE_Pos=16
   APSR_N_Msk=(1UL << APSR_N_Pos)
   APSR_N_Pos=31
   APSR_Q_Msk=(1UL << APSR_Q_Pos)
   APSR_Q_Pos=27
   APSR_V_Msk=(1UL << APSR_V_Pos)
   APSR_V_Pos=28
   APSR_Z_Msk=(1UL << APSR_Z_Pos)
   APSR_Z_Pos=30
   assert(__e)=((__e) ? (void)0 : __assert_func (__FILE__, __LINE__, __ASSERT_FUNC, #__e))
   assert_param(expr)=((void)0)
   ATOMIC_HPP=
   AUDIO_I2C_ADDRESS=((uint16_t)0x94)
   AUDIO_INT_PIN=GPIO_PIN_7
   AUDIO_INT_PORT=GPIOB
   AUDIO_INT_PORT_CLK_ENABLE()=__HAL_RCC_GPIOB_CLK_ENABLE()
   AWD1_EVENT=ADC_AWD1_EVENT
   AWD2_EVENT=ADC_AWD2_EVENT
   AWD3_EVENT=ADC_AWD3_EVENT
   AWD_EVENT=ADC_AWD_EVENT
   BASESCREEN_PRESENTER_HPP=
   BASESCREEN_VIEW_BASE_HPP=
   BASESCREEN_VIEW_HPP=
   BDCR_BDRST_BB=RCC_BDCR_BDRST_BB
   BDCR_BYTE0_ADDRESS=RCC_BDCR_BYTE0_ADDRESS
   BDCR_RTCEN_BB=RCC_BDCR_RTCEN_BB
   BDRST_BitNumber=RCC_BDRST_BIT_NUMBER
   BIG_ENDIAN=_BIG_ENDIAN
   BITMAPDATABASE_HPP=
   BITMAP_HPP=
   BKPSRAM_BASE=((uint32_t)0x40024000)
   BKPSRAM_BB_BASE=((uint32_t)0x42480000)
   BLITOP_HPP=
   BOARDCONFIGURATION_HPP=
   BOX_HPP=
   BRE_BitNumber=BRE_BIT_NUMBER
   BRE_BIT_NUMBER=POSITION_VAL(PWR_CSR_BRE)
   BUFSIZ=1024
   BULK_ERASE_CMD=0xC7
   BUTTONCONTROLLER_HPP=
   BUTTONn=((uint8_t)1)
   BUTTONWITHICON_HPP=
   BUTTONWITHLABEL_HPP=
   BUTTON_GPIO_CLK_ENABLE()=__HAL_RCC_GPIOA_CLK_ENABLE()
   BUTTON_HPP=
   BUTTON_USER=BUTTON_WAKEUP
   BYTE_ORDER=_BYTE_ORDER
   CALLBACK_HPP=
   CAN1=((CAN_TypeDef *) CAN1_BASE)
   CAN1_BASE=(APB1PERIPH_BASE + 0x6400)
   CAN2=((CAN_TypeDef *) CAN2_BASE)
   CAN2_BASE=(APB1PERIPH_BASE + 0x6800)
   CAN_BTR_BRP=((uint32_t)0x000003FF)
   CAN_BTR_LBKM=((uint32_t)0x40000000)
   CAN_BTR_SILM=((uint32_t)0x80000000)
   CAN_BTR_SJW=((uint32_t)0x03000000)
   CAN_BTR_SJW_0=((uint32_t)0x01000000)
   CAN_BTR_SJW_1=((uint32_t)0x02000000)
   CAN_BTR_TS1=((uint32_t)0x000F0000)
   CAN_BTR_TS1_0=((uint32_t)0x00010000)
   CAN_BTR_TS1_1=((uint32_t)0x00020000)
   CAN_BTR_TS1_2=((uint32_t)0x00040000)
   CAN_BTR_TS1_3=((uint32_t)0x00080000)
   CAN_BTR_TS2=((uint32_t)0x00700000)
   CAN_BTR_TS2_0=((uint32_t)0x00100000)
   CAN_BTR_TS2_1=((uint32_t)0x00200000)
   CAN_BTR_TS2_2=((uint32_t)0x00400000)
   CAN_ESR_BOFF=((uint32_t)0x00000004)
   CAN_ESR_EPVF=((uint32_t)0x00000002)
   CAN_ESR_EWGF=((uint32_t)0x00000001)
   CAN_ESR_LEC=((uint32_t)0x00000070)
   CAN_ESR_LEC_0=((uint32_t)0x00000010)
   CAN_ESR_LEC_1=((uint32_t)0x00000020)
   CAN_ESR_LEC_2=((uint32_t)0x00000040)
   CAN_ESR_REC=((uint32_t)0xFF000000)
   CAN_ESR_TEC=((uint32_t)0x00FF0000)
   CAN_F0R1_FB0=((uint32_t)0x00000001)
   CAN_F0R1_FB10=((uint32_t)0x00000400)
   CAN_F0R1_FB11=((uint32_t)0x00000800)
   CAN_F0R1_FB12=((uint32_t)0x00001000)
   CAN_F0R1_FB13=((uint32_t)0x00002000)
   CAN_F0R1_FB14=((uint32_t)0x00004000)
   CAN_F0R1_FB15=((uint32_t)0x00008000)
   CAN_F0R1_FB16=((uint32_t)0x00010000)
   CAN_F0R1_FB17=((uint32_t)0x00020000)
   CAN_F0R1_FB18=((uint32_t)0x00040000)
   CAN_F0R1_FB19=((uint32_t)0x00080000)
   CAN_F0R1_FB1=((uint32_t)0x00000002)
   CAN_F0R1_FB20=((uint32_t)0x00100000)
   CAN_F0R1_FB21=((uint32_t)0x00200000)
   CAN_F0R1_FB22=((uint32_t)0x00400000)
   CAN_F0R1_FB23=((uint32_t)0x00800000)
   CAN_F0R1_FB24=((uint32_t)0x01000000)
   CAN_F0R1_FB25=((uint32_t)0x02000000)
   CAN_F0R1_FB26=((uint32_t)0x04000000)
   CAN_F0R1_FB27=((uint32_t)0x08000000)
   CAN_F0R1_FB28=((uint32_t)0x10000000)
   CAN_F0R1_FB29=((uint32_t)0x20000000)
   CAN_F0R1_FB2=((uint32_t)0x00000004)
   CAN_F0R1_FB30=((uint32_t)0x40000000)
   CAN_F0R1_FB31=((uint32_t)0x80000000)
   CAN_F0R1_FB3=((uint32_t)0x00000008)
   CAN_F0R1_FB4=((uint32_t)0x00000010)
   CAN_F0R1_FB5=((uint32_t)0x00000020)
   CAN_F0R1_FB6=((uint32_t)0x00000040)
   CAN_F0R1_FB7=((uint32_t)0x00000080)
   CAN_F0R1_FB8=((uint32_t)0x00000100)
   CAN_F0R1_FB9=((uint32_t)0x00000200)
   CAN_F0R2_FB0=((uint32_t)0x00000001)
   CAN_F0R2_FB10=((uint32_t)0x00000400)
   CAN_F0R2_FB11=((uint32_t)0x00000800)
   CAN_F0R2_FB12=((uint32_t)0x00001000)
   CAN_F0R2_FB13=((uint32_t)0x00002000)
   CAN_F0R2_FB14=((uint32_t)0x00004000)
   CAN_F0R2_FB15=((uint32_t)0x00008000)
   CAN_F0R2_FB16=((uint32_t)0x00010000)
   CAN_F0R2_FB17=((uint32_t)0x00020000)
   CAN_F0R2_FB18=((uint32_t)0x00040000)
   CAN_F0R2_FB19=((uint32_t)0x00080000)
   CAN_F0R2_FB1=((uint32_t)0x00000002)
   CAN_F0R2_FB20=((uint32_t)0x00100000)
   CAN_F0R2_FB21=((uint32_t)0x00200000)
   CAN_F0R2_FB22=((uint32_t)0x00400000)
   CAN_F0R2_FB23=((uint32_t)0x00800000)
   CAN_F0R2_FB24=((uint32_t)0x01000000)
   CAN_F0R2_FB25=((uint32_t)0x02000000)
   CAN_F0R2_FB26=((uint32_t)0x04000000)
   CAN_F0R2_FB27=((uint32_t)0x08000000)
   CAN_F0R2_FB28=((uint32_t)0x10000000)
   CAN_F0R2_FB29=((uint32_t)0x20000000)
   CAN_F0R2_FB2=((uint32_t)0x00000004)
   CAN_F0R2_FB30=((uint32_t)0x40000000)
   CAN_F0R2_FB31=((uint32_t)0x80000000)
   CAN_F0R2_FB3=((uint32_t)0x00000008)
   CAN_F0R2_FB4=((uint32_t)0x00000010)
   CAN_F0R2_FB5=((uint32_t)0x00000020)
   CAN_F0R2_FB6=((uint32_t)0x00000040)
   CAN_F0R2_FB7=((uint32_t)0x00000080)
   CAN_F0R2_FB8=((uint32_t)0x00000100)
   CAN_F0R2_FB9=((uint32_t)0x00000200)
   CAN_F10R1_FB0=((uint32_t)0x00000001)
   CAN_F10R1_FB10=((uint32_t)0x00000400)
   CAN_F10R1_FB11=((uint32_t)0x00000800)
   CAN_F10R1_FB12=((uint32_t)0x00001000)
   CAN_F10R1_FB13=((uint32_t)0x00002000)
   CAN_F10R1_FB14=((uint32_t)0x00004000)
   CAN_F10R1_FB15=((uint32_t)0x00008000)
   CAN_F10R1_FB16=((uint32_t)0x00010000)
   CAN_F10R1_FB17=((uint32_t)0x00020000)
   CAN_F10R1_FB18=((uint32_t)0x00040000)
   CAN_F10R1_FB19=((uint32_t)0x00080000)
   CAN_F10R1_FB1=((uint32_t)0x00000002)
   CAN_F10R1_FB20=((uint32_t)0x00100000)
   CAN_F10R1_FB21=((uint32_t)0x00200000)
   CAN_F10R1_FB22=((uint32_t)0x00400000)
   CAN_F10R1_FB23=((uint32_t)0x00800000)
   CAN_F10R1_FB24=((uint32_t)0x01000000)
   CAN_F10R1_FB25=((uint32_t)0x02000000)
   CAN_F10R1_FB26=((uint32_t)0x04000000)
   CAN_F10R1_FB27=((uint32_t)0x08000000)
   CAN_F10R1_FB28=((uint32_t)0x10000000)
   CAN_F10R1_FB29=((uint32_t)0x20000000)
   CAN_F10R1_FB2=((uint32_t)0x00000004)
   CAN_F10R1_FB30=((uint32_t)0x40000000)
   CAN_F10R1_FB31=((uint32_t)0x80000000)
   CAN_F10R1_FB3=((uint32_t)0x00000008)
   CAN_F10R1_FB4=((uint32_t)0x00000010)
   CAN_F10R1_FB5=((uint32_t)0x00000020)
   CAN_F10R1_FB6=((uint32_t)0x00000040)
   CAN_F10R1_FB7=((uint32_t)0x00000080)
   CAN_F10R1_FB8=((uint32_t)0x00000100)
   CAN_F10R1_FB9=((uint32_t)0x00000200)
   CAN_F10R2_FB0=((uint32_t)0x00000001)
   CAN_F10R2_FB10=((uint32_t)0x00000400)
   CAN_F10R2_FB11=((uint32_t)0x00000800)
   CAN_F10R2_FB12=((uint32_t)0x00001000)
   CAN_F10R2_FB13=((uint32_t)0x00002000)
   CAN_F10R2_FB14=((uint32_t)0x00004000)
   CAN_F10R2_FB15=((uint32_t)0x00008000)
   CAN_F10R2_FB16=((uint32_t)0x00010000)
   CAN_F10R2_FB17=((uint32_t)0x00020000)
   CAN_F10R2_FB18=((uint32_t)0x00040000)
   CAN_F10R2_FB19=((uint32_t)0x00080000)
   CAN_F10R2_FB1=((uint32_t)0x00000002)
   CAN_F10R2_FB20=((uint32_t)0x00100000)
   CAN_F10R2_FB21=((uint32_t)0x00200000)
   CAN_F10R2_FB22=((uint32_t)0x00400000)
   CAN_F10R2_FB23=((uint32_t)0x00800000)
   CAN_F10R2_FB24=((uint32_t)0x01000000)
   CAN_F10R2_FB25=((uint32_t)0x02000000)
   CAN_F10R2_FB26=((uint32_t)0x04000000)
   CAN_F10R2_FB27=((uint32_t)0x08000000)
   CAN_F10R2_FB28=((uint32_t)0x10000000)
   CAN_F10R2_FB29=((uint32_t)0x20000000)
   CAN_F10R2_FB2=((uint32_t)0x00000004)
   CAN_F10R2_FB30=((uint32_t)0x40000000)
   CAN_F10R2_FB31=((uint32_t)0x80000000)
   CAN_F10R2_FB3=((uint32_t)0x00000008)
   CAN_F10R2_FB4=((uint32_t)0x00000010)
   CAN_F10R2_FB5=((uint32_t)0x00000020)
   CAN_F10R2_FB6=((uint32_t)0x00000040)
   CAN_F10R2_FB7=((uint32_t)0x00000080)
   CAN_F10R2_FB8=((uint32_t)0x00000100)
   CAN_F10R2_FB9=((uint32_t)0x00000200)
   CAN_F11R1_FB0=((uint32_t)0x00000001)
   CAN_F11R1_FB10=((uint32_t)0x00000400)
   CAN_F11R1_FB11=((uint32_t)0x00000800)
   CAN_F11R1_FB12=((uint32_t)0x00001000)
   CAN_F11R1_FB13=((uint32_t)0x00002000)
   CAN_F11R1_FB14=((uint32_t)0x00004000)
   CAN_F11R1_FB15=((uint32_t)0x00008000)
   CAN_F11R1_FB16=((uint32_t)0x00010000)
   CAN_F11R1_FB17=((uint32_t)0x00020000)
   CAN_F11R1_FB18=((uint32_t)0x00040000)
   CAN_F11R1_FB19=((uint32_t)0x00080000)
   CAN_F11R1_FB1=((uint32_t)0x00000002)
   CAN_F11R1_FB20=((uint32_t)0x00100000)
   CAN_F11R1_FB21=((uint32_t)0x00200000)
   CAN_F11R1_FB22=((uint32_t)0x00400000)
   CAN_F11R1_FB23=((uint32_t)0x00800000)
   CAN_F11R1_FB24=((uint32_t)0x01000000)
   CAN_F11R1_FB25=((uint32_t)0x02000000)
   CAN_F11R1_FB26=((uint32_t)0x04000000)
   CAN_F11R1_FB27=((uint32_t)0x08000000)
   CAN_F11R1_FB28=((uint32_t)0x10000000)
   CAN_F11R1_FB29=((uint32_t)0x20000000)
   CAN_F11R1_FB2=((uint32_t)0x00000004)
   CAN_F11R1_FB30=((uint32_t)0x40000000)
   CAN_F11R1_FB31=((uint32_t)0x80000000)
   CAN_F11R1_FB3=((uint32_t)0x00000008)
   CAN_F11R1_FB4=((uint32_t)0x00000010)
   CAN_F11R1_FB5=((uint32_t)0x00000020)
   CAN_F11R1_FB6=((uint32_t)0x00000040)
   CAN_F11R1_FB7=((uint32_t)0x00000080)
   CAN_F11R1_FB8=((uint32_t)0x00000100)
   CAN_F11R1_FB9=((uint32_t)0x00000200)
   CAN_F11R2_FB0=((uint32_t)0x00000001)
   CAN_F11R2_FB10=((uint32_t)0x00000400)
   CAN_F11R2_FB11=((uint32_t)0x00000800)
   CAN_F11R2_FB12=((uint32_t)0x00001000)
   CAN_F11R2_FB13=((uint32_t)0x00002000)
   CAN_F11R2_FB14=((uint32_t)0x00004000)
   CAN_F11R2_FB15=((uint32_t)0x00008000)
   CAN_F11R2_FB16=((uint32_t)0x00010000)
   CAN_F11R2_FB17=((uint32_t)0x00020000)
   CAN_F11R2_FB18=((uint32_t)0x00040000)
   CAN_F11R2_FB19=((uint32_t)0x00080000)
   CAN_F11R2_FB1=((uint32_t)0x00000002)
   CAN_F11R2_FB20=((uint32_t)0x00100000)
   CAN_F11R2_FB21=((uint32_t)0x00200000)
   CAN_F11R2_FB22=((uint32_t)0x00400000)
   CAN_F11R2_FB23=((uint32_t)0x00800000)
   CAN_F11R2_FB24=((uint32_t)0x01000000)
   CAN_F11R2_FB25=((uint32_t)0x02000000)
   CAN_F11R2_FB26=((uint32_t)0x04000000)
   CAN_F11R2_FB27=((uint32_t)0x08000000)
   CAN_F11R2_FB28=((uint32_t)0x10000000)
   CAN_F11R2_FB29=((uint32_t)0x20000000)
   CAN_F11R2_FB2=((uint32_t)0x00000004)
   CAN_F11R2_FB30=((uint32_t)0x40000000)
   CAN_F11R2_FB31=((uint32_t)0x80000000)
   CAN_F11R2_FB3=((uint32_t)0x00000008)
   CAN_F11R2_FB4=((uint32_t)0x00000010)
   CAN_F11R2_FB5=((uint32_t)0x00000020)
   CAN_F11R2_FB6=((uint32_t)0x00000040)
   CAN_F11R2_FB7=((uint32_t)0x00000080)
   CAN_F11R2_FB8=((uint32_t)0x00000100)
   CAN_F11R2_FB9=((uint32_t)0x00000200)
   CAN_F12R1_FB0=((uint32_t)0x00000001)
   CAN_F12R1_FB10=((uint32_t)0x00000400)
   CAN_F12R1_FB11=((uint32_t)0x00000800)
   CAN_F12R1_FB12=((uint32_t)0x00001000)
   CAN_F12R1_FB13=((uint32_t)0x00002000)
   CAN_F12R1_FB14=((uint32_t)0x00004000)
   CAN_F12R1_FB15=((uint32_t)0x00008000)
   CAN_F12R1_FB16=((uint32_t)0x00010000)
   CAN_F12R1_FB17=((uint32_t)0x00020000)
   CAN_F12R1_FB18=((uint32_t)0x00040000)
   CAN_F12R1_FB19=((uint32_t)0x00080000)
   CAN_F12R1_FB1=((uint32_t)0x00000002)
   CAN_F12R1_FB20=((uint32_t)0x00100000)
   CAN_F12R1_FB21=((uint32_t)0x00200000)
   CAN_F12R1_FB22=((uint32_t)0x00400000)
   CAN_F12R1_FB23=((uint32_t)0x00800000)
   CAN_F12R1_FB24=((uint32_t)0x01000000)
   CAN_F12R1_FB25=((uint32_t)0x02000000)
   CAN_F12R1_FB26=((uint32_t)0x04000000)
   CAN_F12R1_FB27=((uint32_t)0x08000000)
   CAN_F12R1_FB28=((uint32_t)0x10000000)
   CAN_F12R1_FB29=((uint32_t)0x20000000)
   CAN_F12R1_FB2=((uint32_t)0x00000004)
   CAN_F12R1_FB30=((uint32_t)0x40000000)
   CAN_F12R1_FB31=((uint32_t)0x80000000)
   CAN_F12R1_FB3=((uint32_t)0x00000008)
   CAN_F12R1_FB4=((uint32_t)0x00000010)
   CAN_F12R1_FB5=((uint32_t)0x00000020)
   CAN_F12R1_FB6=((uint32_t)0x00000040)
   CAN_F12R1_FB7=((uint32_t)0x00000080)
   CAN_F12R1_FB8=((uint32_t)0x00000100)
   CAN_F12R1_FB9=((uint32_t)0x00000200)
   CAN_F12R2_FB0=((uint32_t)0x00000001)
   CAN_F12R2_FB10=((uint32_t)0x00000400)
   CAN_F12R2_FB11=((uint32_t)0x00000800)
   CAN_F12R2_FB12=((uint32_t)0x00001000)
   CAN_F12R2_FB13=((uint32_t)0x00002000)
   CAN_F12R2_FB14=((uint32_t)0x00004000)
   CAN_F12R2_FB15=((uint32_t)0x00008000)
   CAN_F12R2_FB16=((uint32_t)0x00010000)
   CAN_F12R2_FB17=((uint32_t)0x00020000)
   CAN_F12R2_FB18=((uint32_t)0x00040000)
   CAN_F12R2_FB19=((uint32_t)0x00080000)
   CAN_F12R2_FB1=((uint32_t)0x00000002)
   CAN_F12R2_FB20=((uint32_t)0x00100000)
   CAN_F12R2_FB21=((uint32_t)0x00200000)
   CAN_F12R2_FB22=((uint32_t)0x00400000)
   CAN_F12R2_FB23=((uint32_t)0x00800000)
   CAN_F12R2_FB24=((uint32_t)0x01000000)
   CAN_F12R2_FB25=((uint32_t)0x02000000)
   CAN_F12R2_FB26=((uint32_t)0x04000000)
   CAN_F12R2_FB27=((uint32_t)0x08000000)
   CAN_F12R2_FB28=((uint32_t)0x10000000)
   CAN_F12R2_FB29=((uint32_t)0x20000000)
   CAN_F12R2_FB2=((uint32_t)0x00000004)
   CAN_F12R2_FB30=((uint32_t)0x40000000)
   CAN_F12R2_FB31=((uint32_t)0x80000000)
   CAN_F12R2_FB3=((uint32_t)0x00000008)
   CAN_F12R2_FB4=((uint32_t)0x00000010)
   CAN_F12R2_FB5=((uint32_t)0x00000020)
   CAN_F12R2_FB6=((uint32_t)0x00000040)
   CAN_F12R2_FB7=((uint32_t)0x00000080)
   CAN_F12R2_FB8=((uint32_t)0x00000100)
   CAN_F12R2_FB9=((uint32_t)0x00000200)
   CAN_F13R1_FB0=((uint32_t)0x00000001)
   CAN_F13R1_FB10=((uint32_t)0x00000400)
   CAN_F13R1_FB11=((uint32_t)0x00000800)
   CAN_F13R1_FB12=((uint32_t)0x00001000)
   CAN_F13R1_FB13=((uint32_t)0x00002000)
   CAN_F13R1_FB14=((uint32_t)0x00004000)
   CAN_F13R1_FB15=((uint32_t)0x00008000)
   CAN_F13R1_FB16=((uint32_t)0x00010000)
   CAN_F13R1_FB17=((uint32_t)0x00020000)
   CAN_F13R1_FB18=((uint32_t)0x00040000)
   CAN_F13R1_FB19=((uint32_t)0x00080000)
   CAN_F13R1_FB1=((uint32_t)0x00000002)
   CAN_F13R1_FB20=((uint32_t)0x00100000)
   CAN_F13R1_FB21=((uint32_t)0x00200000)
   CAN_F13R1_FB22=((uint32_t)0x00400000)
   CAN_F13R1_FB23=((uint32_t)0x00800000)
   CAN_F13R1_FB24=((uint32_t)0x01000000)
   CAN_F13R1_FB25=((uint32_t)0x02000000)
   CAN_F13R1_FB26=((uint32_t)0x04000000)
   CAN_F13R1_FB27=((uint32_t)0x08000000)
   CAN_F13R1_FB28=((uint32_t)0x10000000)
   CAN_F13R1_FB29=((uint32_t)0x20000000)
   CAN_F13R1_FB2=((uint32_t)0x00000004)
   CAN_F13R1_FB30=((uint32_t)0x40000000)
   CAN_F13R1_FB31=((uint32_t)0x80000000)
   CAN_F13R1_FB3=((uint32_t)0x00000008)
   CAN_F13R1_FB4=((uint32_t)0x00000010)
   CAN_F13R1_FB5=((uint32_t)0x00000020)
   CAN_F13R1_FB6=((uint32_t)0x00000040)
   CAN_F13R1_FB7=((uint32_t)0x00000080)
   CAN_F13R1_FB8=((uint32_t)0x00000100)
   CAN_F13R1_FB9=((uint32_t)0x00000200)
   CAN_F13R2_FB0=((uint32_t)0x00000001)
   CAN_F13R2_FB10=((uint32_t)0x00000400)
   CAN_F13R2_FB11=((uint32_t)0x00000800)
   CAN_F13R2_FB12=((uint32_t)0x00001000)
   CAN_F13R2_FB13=((uint32_t)0x00002000)
   CAN_F13R2_FB14=((uint32_t)0x00004000)
   CAN_F13R2_FB15=((uint32_t)0x00008000)
   CAN_F13R2_FB16=((uint32_t)0x00010000)
   CAN_F13R2_FB17=((uint32_t)0x00020000)
   CAN_F13R2_FB18=((uint32_t)0x00040000)
   CAN_F13R2_FB19=((uint32_t)0x00080000)
   CAN_F13R2_FB1=((uint32_t)0x00000002)
   CAN_F13R2_FB20=((uint32_t)0x00100000)
   CAN_F13R2_FB21=((uint32_t)0x00200000)
   CAN_F13R2_FB22=((uint32_t)0x00400000)
   CAN_F13R2_FB23=((uint32_t)0x00800000)
   CAN_F13R2_FB24=((uint32_t)0x01000000)
   CAN_F13R2_FB25=((uint32_t)0x02000000)
   CAN_F13R2_FB26=((uint32_t)0x04000000)
   CAN_F13R2_FB27=((uint32_t)0x08000000)
   CAN_F13R2_FB28=((uint32_t)0x10000000)
   CAN_F13R2_FB29=((uint32_t)0x20000000)
   CAN_F13R2_FB2=((uint32_t)0x00000004)
   CAN_F13R2_FB30=((uint32_t)0x40000000)
   CAN_F13R2_FB31=((uint32_t)0x80000000)
   CAN_F13R2_FB3=((uint32_t)0x00000008)
   CAN_F13R2_FB4=((uint32_t)0x00000010)
   CAN_F13R2_FB5=((uint32_t)0x00000020)
   CAN_F13R2_FB6=((uint32_t)0x00000040)
   CAN_F13R2_FB7=((uint32_t)0x00000080)
   CAN_F13R2_FB8=((uint32_t)0x00000100)
   CAN_F13R2_FB9=((uint32_t)0x00000200)
   CAN_F1R1_FB0=((uint32_t)0x00000001)
   CAN_F1R1_FB10=((uint32_t)0x00000400)
   CAN_F1R1_FB11=((uint32_t)0x00000800)
   CAN_F1R1_FB12=((uint32_t)0x00001000)
   CAN_F1R1_FB13=((uint32_t)0x00002000)
   CAN_F1R1_FB14=((uint32_t)0x00004000)
   CAN_F1R1_FB15=((uint32_t)0x00008000)
   CAN_F1R1_FB16=((uint32_t)0x00010000)
   CAN_F1R1_FB17=((uint32_t)0x00020000)
   CAN_F1R1_FB18=((uint32_t)0x00040000)
   CAN_F1R1_FB19=((uint32_t)0x00080000)
   CAN_F1R1_FB1=((uint32_t)0x00000002)
   CAN_F1R1_FB20=((uint32_t)0x00100000)
   CAN_F1R1_FB21=((uint32_t)0x00200000)
   CAN_F1R1_FB22=((uint32_t)0x00400000)
   CAN_F1R1_FB23=((uint32_t)0x00800000)
   CAN_F1R1_FB24=((uint32_t)0x01000000)
   CAN_F1R1_FB25=((uint32_t)0x02000000)
   CAN_F1R1_FB26=((uint32_t)0x04000000)
   CAN_F1R1_FB27=((uint32_t)0x08000000)
   CAN_F1R1_FB28=((uint32_t)0x10000000)
   CAN_F1R1_FB29=((uint32_t)0x20000000)
   CAN_F1R1_FB2=((uint32_t)0x00000004)
   CAN_F1R1_FB30=((uint32_t)0x40000000)
   CAN_F1R1_FB31=((uint32_t)0x80000000)
   CAN_F1R1_FB3=((uint32_t)0x00000008)
   CAN_F1R1_FB4=((uint32_t)0x00000010)
   CAN_F1R1_FB5=((uint32_t)0x00000020)
   CAN_F1R1_FB6=((uint32_t)0x00000040)
   CAN_F1R1_FB7=((uint32_t)0x00000080)
   CAN_F1R1_FB8=((uint32_t)0x00000100)
   CAN_F1R1_FB9=((uint32_t)0x00000200)
   CAN_F1R2_FB0=((uint32_t)0x00000001)
   CAN_F1R2_FB10=((uint32_t)0x00000400)
   CAN_F1R2_FB11=((uint32_t)0x00000800)
   CAN_F1R2_FB12=((uint32_t)0x00001000)
   CAN_F1R2_FB13=((uint32_t)0x00002000)
   CAN_F1R2_FB14=((uint32_t)0x00004000)
   CAN_F1R2_FB15=((uint32_t)0x00008000)
   CAN_F1R2_FB16=((uint32_t)0x00010000)
   CAN_F1R2_FB17=((uint32_t)0x00020000)
   CAN_F1R2_FB18=((uint32_t)0x00040000)
   CAN_F1R2_FB19=((uint32_t)0x00080000)
   CAN_F1R2_FB1=((uint32_t)0x00000002)
   CAN_F1R2_FB20=((uint32_t)0x00100000)
   CAN_F1R2_FB21=((uint32_t)0x00200000)
   CAN_F1R2_FB22=((uint32_t)0x00400000)
   CAN_F1R2_FB23=((uint32_t)0x00800000)
   CAN_F1R2_FB24=((uint32_t)0x01000000)
   CAN_F1R2_FB25=((uint32_t)0x02000000)
   CAN_F1R2_FB26=((uint32_t)0x04000000)
   CAN_F1R2_FB27=((uint32_t)0x08000000)
   CAN_F1R2_FB28=((uint32_t)0x10000000)
   CAN_F1R2_FB29=((uint32_t)0x20000000)
   CAN_F1R2_FB2=((uint32_t)0x00000004)
   CAN_F1R2_FB30=((uint32_t)0x40000000)
   CAN_F1R2_FB31=((uint32_t)0x80000000)
   CAN_F1R2_FB3=((uint32_t)0x00000008)
   CAN_F1R2_FB4=((uint32_t)0x00000010)
   CAN_F1R2_FB5=((uint32_t)0x00000020)
   CAN_F1R2_FB6=((uint32_t)0x00000040)
   CAN_F1R2_FB7=((uint32_t)0x00000080)
   CAN_F1R2_FB8=((uint32_t)0x00000100)
   CAN_F1R2_FB9=((uint32_t)0x00000200)
   CAN_F2R1_FB0=((uint32_t)0x00000001)
   CAN_F2R1_FB10=((uint32_t)0x00000400)
   CAN_F2R1_FB11=((uint32_t)0x00000800)
   CAN_F2R1_FB12=((uint32_t)0x00001000)
   CAN_F2R1_FB13=((uint32_t)0x00002000)
   CAN_F2R1_FB14=((uint32_t)0x00004000)
   CAN_F2R1_FB15=((uint32_t)0x00008000)
   CAN_F2R1_FB16=((uint32_t)0x00010000)
   CAN_F2R1_FB17=((uint32_t)0x00020000)
   CAN_F2R1_FB18=((uint32_t)0x00040000)
   CAN_F2R1_FB19=((uint32_t)0x00080000)
   CAN_F2R1_FB1=((uint32_t)0x00000002)
   CAN_F2R1_FB20=((uint32_t)0x00100000)
   CAN_F2R1_FB21=((uint32_t)0x00200000)
   CAN_F2R1_FB22=((uint32_t)0x00400000)
   CAN_F2R1_FB23=((uint32_t)0x00800000)
   CAN_F2R1_FB24=((uint32_t)0x01000000)
   CAN_F2R1_FB25=((uint32_t)0x02000000)
   CAN_F2R1_FB26=((uint32_t)0x04000000)
   CAN_F2R1_FB27=((uint32_t)0x08000000)
   CAN_F2R1_FB28=((uint32_t)0x10000000)
   CAN_F2R1_FB29=((uint32_t)0x20000000)
   CAN_F2R1_FB2=((uint32_t)0x00000004)
   CAN_F2R1_FB30=((uint32_t)0x40000000)
   CAN_F2R1_FB31=((uint32_t)0x80000000)
   CAN_F2R1_FB3=((uint32_t)0x00000008)
   CAN_F2R1_FB4=((uint32_t)0x00000010)
   CAN_F2R1_FB5=((uint32_t)0x00000020)
   CAN_F2R1_FB6=((uint32_t)0x00000040)
   CAN_F2R1_FB7=((uint32_t)0x00000080)
   CAN_F2R1_FB8=((uint32_t)0x00000100)
   CAN_F2R1_FB9=((uint32_t)0x00000200)
   CAN_F2R2_FB0=((uint32_t)0x00000001)
   CAN_F2R2_FB10=((uint32_t)0x00000400)
   CAN_F2R2_FB11=((uint32_t)0x00000800)
   CAN_F2R2_FB12=((uint32_t)0x00001000)
   CAN_F2R2_FB13=((uint32_t)0x00002000)
   CAN_F2R2_FB14=((uint32_t)0x00004000)
   CAN_F2R2_FB15=((uint32_t)0x00008000)
   CAN_F2R2_FB16=((uint32_t)0x00010000)
   CAN_F2R2_FB17=((uint32_t)0x00020000)
   CAN_F2R2_FB18=((uint32_t)0x00040000)
   CAN_F2R2_FB19=((uint32_t)0x00080000)
   CAN_F2R2_FB1=((uint32_t)0x00000002)
   CAN_F2R2_FB20=((uint32_t)0x00100000)
   CAN_F2R2_FB21=((uint32_t)0x00200000)
   CAN_F2R2_FB22=((uint32_t)0x00400000)
   CAN_F2R2_FB23=((uint32_t)0x00800000)
   CAN_F2R2_FB24=((uint32_t)0x01000000)
   CAN_F2R2_FB25=((uint32_t)0x02000000)
   CAN_F2R2_FB26=((uint32_t)0x04000000)
   CAN_F2R2_FB27=((uint32_t)0x08000000)
   CAN_F2R2_FB28=((uint32_t)0x10000000)
   CAN_F2R2_FB29=((uint32_t)0x20000000)
   CAN_F2R2_FB2=((uint32_t)0x00000004)
   CAN_F2R2_FB30=((uint32_t)0x40000000)
   CAN_F2R2_FB31=((uint32_t)0x80000000)
   CAN_F2R2_FB3=((uint32_t)0x00000008)
   CAN_F2R2_FB4=((uint32_t)0x00000010)
   CAN_F2R2_FB5=((uint32_t)0x00000020)
   CAN_F2R2_FB6=((uint32_t)0x00000040)
   CAN_F2R2_FB7=((uint32_t)0x00000080)
   CAN_F2R2_FB8=((uint32_t)0x00000100)
   CAN_F2R2_FB9=((uint32_t)0x00000200)
   CAN_F3R1_FB0=((uint32_t)0x00000001)
   CAN_F3R1_FB10=((uint32_t)0x00000400)
   CAN_F3R1_FB11=((uint32_t)0x00000800)
   CAN_F3R1_FB12=((uint32_t)0x00001000)
   CAN_F3R1_FB13=((uint32_t)0x00002000)
   CAN_F3R1_FB14=((uint32_t)0x00004000)
   CAN_F3R1_FB15=((uint32_t)0x00008000)
   CAN_F3R1_FB16=((uint32_t)0x00010000)
   CAN_F3R1_FB17=((uint32_t)0x00020000)
   CAN_F3R1_FB18=((uint32_t)0x00040000)
   CAN_F3R1_FB19=((uint32_t)0x00080000)
   CAN_F3R1_FB1=((uint32_t)0x00000002)
   CAN_F3R1_FB20=((uint32_t)0x00100000)
   CAN_F3R1_FB21=((uint32_t)0x00200000)
   CAN_F3R1_FB22=((uint32_t)0x00400000)
   CAN_F3R1_FB23=((uint32_t)0x00800000)
   CAN_F3R1_FB24=((uint32_t)0x01000000)
   CAN_F3R1_FB25=((uint32_t)0x02000000)
   CAN_F3R1_FB26=((uint32_t)0x04000000)
   CAN_F3R1_FB27=((uint32_t)0x08000000)
   CAN_F3R1_FB28=((uint32_t)0x10000000)
   CAN_F3R1_FB29=((uint32_t)0x20000000)
   CAN_F3R1_FB2=((uint32_t)0x00000004)
   CAN_F3R1_FB30=((uint32_t)0x40000000)
   CAN_F3R1_FB31=((uint32_t)0x80000000)
   CAN_F3R1_FB3=((uint32_t)0x00000008)
   CAN_F3R1_FB4=((uint32_t)0x00000010)
   CAN_F3R1_FB5=((uint32_t)0x00000020)
   CAN_F3R1_FB6=((uint32_t)0x00000040)
   CAN_F3R1_FB7=((uint32_t)0x00000080)
   CAN_F3R1_FB8=((uint32_t)0x00000100)
   CAN_F3R1_FB9=((uint32_t)0x00000200)
   CAN_F3R2_FB0=((uint32_t)0x00000001)
   CAN_F3R2_FB10=((uint32_t)0x00000400)
   CAN_F3R2_FB11=((uint32_t)0x00000800)
   CAN_F3R2_FB12=((uint32_t)0x00001000)
   CAN_F3R2_FB13=((uint32_t)0x00002000)
   CAN_F3R2_FB14=((uint32_t)0x00004000)
   CAN_F3R2_FB15=((uint32_t)0x00008000)
   CAN_F3R2_FB16=((uint32_t)0x00010000)
   CAN_F3R2_FB17=((uint32_t)0x00020000)
   CAN_F3R2_FB18=((uint32_t)0x00040000)
   CAN_F3R2_FB19=((uint32_t)0x00080000)
   CAN_F3R2_FB1=((uint32_t)0x00000002)
   CAN_F3R2_FB20=((uint32_t)0x00100000)
   CAN_F3R2_FB21=((uint32_t)0x00200000)
   CAN_F3R2_FB22=((uint32_t)0x00400000)
   CAN_F3R2_FB23=((uint32_t)0x00800000)
   CAN_F3R2_FB24=((uint32_t)0x01000000)
   CAN_F3R2_FB25=((uint32_t)0x02000000)
   CAN_F3R2_FB26=((uint32_t)0x04000000)
   CAN_F3R2_FB27=((uint32_t)0x08000000)
   CAN_F3R2_FB28=((uint32_t)0x10000000)
   CAN_F3R2_FB29=((uint32_t)0x20000000)
   CAN_F3R2_FB2=((uint32_t)0x00000004)
   CAN_F3R2_FB30=((uint32_t)0x40000000)
   CAN_F3R2_FB31=((uint32_t)0x80000000)
   CAN_F3R2_FB3=((uint32_t)0x00000008)
   CAN_F3R2_FB4=((uint32_t)0x00000010)
   CAN_F3R2_FB5=((uint32_t)0x00000020)
   CAN_F3R2_FB6=((uint32_t)0x00000040)
   CAN_F3R2_FB7=((uint32_t)0x00000080)
   CAN_F3R2_FB8=((uint32_t)0x00000100)
   CAN_F3R2_FB9=((uint32_t)0x00000200)
   CAN_F4R1_FB0=((uint32_t)0x00000001)
   CAN_F4R1_FB10=((uint32_t)0x00000400)
   CAN_F4R1_FB11=((uint32_t)0x00000800)
   CAN_F4R1_FB12=((uint32_t)0x00001000)
   CAN_F4R1_FB13=((uint32_t)0x00002000)
   CAN_F4R1_FB14=((uint32_t)0x00004000)
   CAN_F4R1_FB15=((uint32_t)0x00008000)
   CAN_F4R1_FB16=((uint32_t)0x00010000)
   CAN_F4R1_FB17=((uint32_t)0x00020000)
   CAN_F4R1_FB18=((uint32_t)0x00040000)
   CAN_F4R1_FB19=((uint32_t)0x00080000)
   CAN_F4R1_FB1=((uint32_t)0x00000002)
   CAN_F4R1_FB20=((uint32_t)0x00100000)
   CAN_F4R1_FB21=((uint32_t)0x00200000)
   CAN_F4R1_FB22=((uint32_t)0x00400000)
   CAN_F4R1_FB23=((uint32_t)0x00800000)
   CAN_F4R1_FB24=((uint32_t)0x01000000)
   CAN_F4R1_FB25=((uint32_t)0x02000000)
   CAN_F4R1_FB26=((uint32_t)0x04000000)
   CAN_F4R1_FB27=((uint32_t)0x08000000)
   CAN_F4R1_FB28=((uint32_t)0x10000000)
   CAN_F4R1_FB29=((uint32_t)0x20000000)
   CAN_F4R1_FB2=((uint32_t)0x00000004)
   CAN_F4R1_FB30=((uint32_t)0x40000000)
   CAN_F4R1_FB31=((uint32_t)0x80000000)
   CAN_F4R1_FB3=((uint32_t)0x00000008)
   CAN_F4R1_FB4=((uint32_t)0x00000010)
   CAN_F4R1_FB5=((uint32_t)0x00000020)
   CAN_F4R1_FB6=((uint32_t)0x00000040)
   CAN_F4R1_FB7=((uint32_t)0x00000080)
   CAN_F4R1_FB8=((uint32_t)0x00000100)
   CAN_F4R1_FB9=((uint32_t)0x00000200)
   CAN_F4R2_FB0=((uint32_t)0x00000001)
   CAN_F4R2_FB10=((uint32_t)0x00000400)
   CAN_F4R2_FB11=((uint32_t)0x00000800)
   CAN_F4R2_FB12=((uint32_t)0x00001000)
   CAN_F4R2_FB13=((uint32_t)0x00002000)
   CAN_F4R2_FB14=((uint32_t)0x00004000)
   CAN_F4R2_FB15=((uint32_t)0x00008000)
   CAN_F4R2_FB16=((uint32_t)0x00010000)
   CAN_F4R2_FB17=((uint32_t)0x00020000)
   CAN_F4R2_FB18=((uint32_t)0x00040000)
   CAN_F4R2_FB19=((uint32_t)0x00080000)
   CAN_F4R2_FB1=((uint32_t)0x00000002)
   CAN_F4R2_FB20=((uint32_t)0x00100000)
   CAN_F4R2_FB21=((uint32_t)0x00200000)
   CAN_F4R2_FB22=((uint32_t)0x00400000)
   CAN_F4R2_FB23=((uint32_t)0x00800000)
   CAN_F4R2_FB24=((uint32_t)0x01000000)
   CAN_F4R2_FB25=((uint32_t)0x02000000)
   CAN_F4R2_FB26=((uint32_t)0x04000000)
   CAN_F4R2_FB27=((uint32_t)0x08000000)
   CAN_F4R2_FB28=((uint32_t)0x10000000)
   CAN_F4R2_FB29=((uint32_t)0x20000000)
   CAN_F4R2_FB2=((uint32_t)0x00000004)
   CAN_F4R2_FB30=((uint32_t)0x40000000)
   CAN_F4R2_FB31=((uint32_t)0x80000000)
   CAN_F4R2_FB3=((uint32_t)0x00000008)
   CAN_F4R2_FB4=((uint32_t)0x00000010)
   CAN_F4R2_FB5=((uint32_t)0x00000020)
   CAN_F4R2_FB6=((uint32_t)0x00000040)
   CAN_F4R2_FB7=((uint32_t)0x00000080)
   CAN_F4R2_FB8=((uint32_t)0x00000100)
   CAN_F4R2_FB9=((uint32_t)0x00000200)
   CAN_F5R1_FB0=((uint32_t)0x00000001)
   CAN_F5R1_FB10=((uint32_t)0x00000400)
   CAN_F5R1_FB11=((uint32_t)0x00000800)
   CAN_F5R1_FB12=((uint32_t)0x00001000)
   CAN_F5R1_FB13=((uint32_t)0x00002000)
   CAN_F5R1_FB14=((uint32_t)0x00004000)
   CAN_F5R1_FB15=((uint32_t)0x00008000)
   CAN_F5R1_FB16=((uint32_t)0x00010000)
   CAN_F5R1_FB17=((uint32_t)0x00020000)
   CAN_F5R1_FB18=((uint32_t)0x00040000)
   CAN_F5R1_FB19=((uint32_t)0x00080000)
   CAN_F5R1_FB1=((uint32_t)0x00000002)
   CAN_F5R1_FB20=((uint32_t)0x00100000)
   CAN_F5R1_FB21=((uint32_t)0x00200000)
   CAN_F5R1_FB22=((uint32_t)0x00400000)
   CAN_F5R1_FB23=((uint32_t)0x00800000)
   CAN_F5R1_FB24=((uint32_t)0x01000000)
   CAN_F5R1_FB25=((uint32_t)0x02000000)
   CAN_F5R1_FB26=((uint32_t)0x04000000)
   CAN_F5R1_FB27=((uint32_t)0x08000000)
   CAN_F5R1_FB28=((uint32_t)0x10000000)
   CAN_F5R1_FB29=((uint32_t)0x20000000)
   CAN_F5R1_FB2=((uint32_t)0x00000004)
   CAN_F5R1_FB30=((uint32_t)0x40000000)
   CAN_F5R1_FB31=((uint32_t)0x80000000)
   CAN_F5R1_FB3=((uint32_t)0x00000008)
   CAN_F5R1_FB4=((uint32_t)0x00000010)
   CAN_F5R1_FB5=((uint32_t)0x00000020)
   CAN_F5R1_FB6=((uint32_t)0x00000040)
   CAN_F5R1_FB7=((uint32_t)0x00000080)
   CAN_F5R1_FB8=((uint32_t)0x00000100)
   CAN_F5R1_FB9=((uint32_t)0x00000200)
   CAN_F5R2_FB0=((uint32_t)0x00000001)
   CAN_F5R2_FB10=((uint32_t)0x00000400)
   CAN_F5R2_FB11=((uint32_t)0x00000800)
   CAN_F5R2_FB12=((uint32_t)0x00001000)
   CAN_F5R2_FB13=((uint32_t)0x00002000)
   CAN_F5R2_FB14=((uint32_t)0x00004000)
   CAN_F5R2_FB15=((uint32_t)0x00008000)
   CAN_F5R2_FB16=((uint32_t)0x00010000)
   CAN_F5R2_FB17=((uint32_t)0x00020000)
   CAN_F5R2_FB18=((uint32_t)0x00040000)
   CAN_F5R2_FB19=((uint32_t)0x00080000)
   CAN_F5R2_FB1=((uint32_t)0x00000002)
   CAN_F5R2_FB20=((uint32_t)0x00100000)
   CAN_F5R2_FB21=((uint32_t)0x00200000)
   CAN_F5R2_FB22=((uint32_t)0x00400000)
   CAN_F5R2_FB23=((uint32_t)0x00800000)
   CAN_F5R2_FB24=((uint32_t)0x01000000)
   CAN_F5R2_FB25=((uint32_t)0x02000000)
   CAN_F5R2_FB26=((uint32_t)0x04000000)
   CAN_F5R2_FB27=((uint32_t)0x08000000)
   CAN_F5R2_FB28=((uint32_t)0x10000000)
   CAN_F5R2_FB29=((uint32_t)0x20000000)
   CAN_F5R2_FB2=((uint32_t)0x00000004)
   CAN_F5R2_FB30=((uint32_t)0x40000000)
   CAN_F5R2_FB31=((uint32_t)0x80000000)
   CAN_F5R2_FB3=((uint32_t)0x00000008)
   CAN_F5R2_FB4=((uint32_t)0x00000010)
   CAN_F5R2_FB5=((uint32_t)0x00000020)
   CAN_F5R2_FB6=((uint32_t)0x00000040)
   CAN_F5R2_FB7=((uint32_t)0x00000080)
   CAN_F5R2_FB8=((uint32_t)0x00000100)
   CAN_F5R2_FB9=((uint32_t)0x00000200)
   CAN_F6R1_FB0=((uint32_t)0x00000001)
   CAN_F6R1_FB10=((uint32_t)0x00000400)
   CAN_F6R1_FB11=((uint32_t)0x00000800)
   CAN_F6R1_FB12=((uint32_t)0x00001000)
   CAN_F6R1_FB13=((uint32_t)0x00002000)
   CAN_F6R1_FB14=((uint32_t)0x00004000)
   CAN_F6R1_FB15=((uint32_t)0x00008000)
   CAN_F6R1_FB16=((uint32_t)0x00010000)
   CAN_F6R1_FB17=((uint32_t)0x00020000)
   CAN_F6R1_FB18=((uint32_t)0x00040000)
   CAN_F6R1_FB19=((uint32_t)0x00080000)
   CAN_F6R1_FB1=((uint32_t)0x00000002)
   CAN_F6R1_FB20=((uint32_t)0x00100000)
   CAN_F6R1_FB21=((uint32_t)0x00200000)
   CAN_F6R1_FB22=((uint32_t)0x00400000)
   CAN_F6R1_FB23=((uint32_t)0x00800000)
   CAN_F6R1_FB24=((uint32_t)0x01000000)
   CAN_F6R1_FB25=((uint32_t)0x02000000)
   CAN_F6R1_FB26=((uint32_t)0x04000000)
   CAN_F6R1_FB27=((uint32_t)0x08000000)
   CAN_F6R1_FB28=((uint32_t)0x10000000)
   CAN_F6R1_FB29=((uint32_t)0x20000000)
   CAN_F6R1_FB2=((uint32_t)0x00000004)
   CAN_F6R1_FB30=((uint32_t)0x40000000)
   CAN_F6R1_FB31=((uint32_t)0x80000000)
   CAN_F6R1_FB3=((uint32_t)0x00000008)
   CAN_F6R1_FB4=((uint32_t)0x00000010)
   CAN_F6R1_FB5=((uint32_t)0x00000020)
   CAN_F6R1_FB6=((uint32_t)0x00000040)
   CAN_F6R1_FB7=((uint32_t)0x00000080)
   CAN_F6R1_FB8=((uint32_t)0x00000100)
   CAN_F6R1_FB9=((uint32_t)0x00000200)
   CAN_F6R2_FB0=((uint32_t)0x00000001)
   CAN_F6R2_FB10=((uint32_t)0x00000400)
   CAN_F6R2_FB11=((uint32_t)0x00000800)
   CAN_F6R2_FB12=((uint32_t)0x00001000)
   CAN_F6R2_FB13=((uint32_t)0x00002000)
   CAN_F6R2_FB14=((uint32_t)0x00004000)
   CAN_F6R2_FB15=((uint32_t)0x00008000)
   CAN_F6R2_FB16=((uint32_t)0x00010000)
   CAN_F6R2_FB17=((uint32_t)0x00020000)
   CAN_F6R2_FB18=((uint32_t)0x00040000)
   CAN_F6R2_FB19=((uint32_t)0x00080000)
   CAN_F6R2_FB1=((uint32_t)0x00000002)
   CAN_F6R2_FB20=((uint32_t)0x00100000)
   CAN_F6R2_FB21=((uint32_t)0x00200000)
   CAN_F6R2_FB22=((uint32_t)0x00400000)
   CAN_F6R2_FB23=((uint32_t)0x00800000)
   CAN_F6R2_FB24=((uint32_t)0x01000000)
   CAN_F6R2_FB25=((uint32_t)0x02000000)
   CAN_F6R2_FB26=((uint32_t)0x04000000)
   CAN_F6R2_FB27=((uint32_t)0x08000000)
   CAN_F6R2_FB28=((uint32_t)0x10000000)
   CAN_F6R2_FB29=((uint32_t)0x20000000)
   CAN_F6R2_FB2=((uint32_t)0x00000004)
   CAN_F6R2_FB30=((uint32_t)0x40000000)
   CAN_F6R2_FB31=((uint32_t)0x80000000)
   CAN_F6R2_FB3=((uint32_t)0x00000008)
   CAN_F6R2_FB4=((uint32_t)0x00000010)
   CAN_F6R2_FB5=((uint32_t)0x00000020)
   CAN_F6R2_FB6=((uint32_t)0x00000040)
   CAN_F6R2_FB7=((uint32_t)0x00000080)
   CAN_F6R2_FB8=((uint32_t)0x00000100)
   CAN_F6R2_FB9=((uint32_t)0x00000200)
   CAN_F7R1_FB0=((uint32_t)0x00000001)
   CAN_F7R1_FB10=((uint32_t)0x00000400)
   CAN_F7R1_FB11=((uint32_t)0x00000800)
   CAN_F7R1_FB12=((uint32_t)0x00001000)
   CAN_F7R1_FB13=((uint32_t)0x00002000)
   CAN_F7R1_FB14=((uint32_t)0x00004000)
   CAN_F7R1_FB15=((uint32_t)0x00008000)
   CAN_F7R1_FB16=((uint32_t)0x00010000)
   CAN_F7R1_FB17=((uint32_t)0x00020000)
   CAN_F7R1_FB18=((uint32_t)0x00040000)
   CAN_F7R1_FB19=((uint32_t)0x00080000)
   CAN_F7R1_FB1=((uint32_t)0x00000002)
   CAN_F7R1_FB20=((uint32_t)0x00100000)
   CAN_F7R1_FB21=((uint32_t)0x00200000)
   CAN_F7R1_FB22=((uint32_t)0x00400000)
   CAN_F7R1_FB23=((uint32_t)0x00800000)
   CAN_F7R1_FB24=((uint32_t)0x01000000)
   CAN_F7R1_FB25=((uint32_t)0x02000000)
   CAN_F7R1_FB26=((uint32_t)0x04000000)
   CAN_F7R1_FB27=((uint32_t)0x08000000)
   CAN_F7R1_FB28=((uint32_t)0x10000000)
   CAN_F7R1_FB29=((uint32_t)0x20000000)
   CAN_F7R1_FB2=((uint32_t)0x00000004)
   CAN_F7R1_FB30=((uint32_t)0x40000000)
   CAN_F7R1_FB31=((uint32_t)0x80000000)
   CAN_F7R1_FB3=((uint32_t)0x00000008)
   CAN_F7R1_FB4=((uint32_t)0x00000010)
   CAN_F7R1_FB5=((uint32_t)0x00000020)
   CAN_F7R1_FB6=((uint32_t)0x00000040)
   CAN_F7R1_FB7=((uint32_t)0x00000080)
   CAN_F7R1_FB8=((uint32_t)0x00000100)
   CAN_F7R1_FB9=((uint32_t)0x00000200)
   CAN_F7R2_FB0=((uint32_t)0x00000001)
   CAN_F7R2_FB10=((uint32_t)0x00000400)
   CAN_F7R2_FB11=((uint32_t)0x00000800)
   CAN_F7R2_FB12=((uint32_t)0x00001000)
   CAN_F7R2_FB13=((uint32_t)0x00002000)
   CAN_F7R2_FB14=((uint32_t)0x00004000)
   CAN_F7R2_FB15=((uint32_t)0x00008000)
   CAN_F7R2_FB16=((uint32_t)0x00010000)
   CAN_F7R2_FB17=((uint32_t)0x00020000)
   CAN_F7R2_FB18=((uint32_t)0x00040000)
   CAN_F7R2_FB19=((uint32_t)0x00080000)
   CAN_F7R2_FB1=((uint32_t)0x00000002)
   CAN_F7R2_FB20=((uint32_t)0x00100000)
   CAN_F7R2_FB21=((uint32_t)0x00200000)
   CAN_F7R2_FB22=((uint32_t)0x00400000)
   CAN_F7R2_FB23=((uint32_t)0x00800000)
   CAN_F7R2_FB24=((uint32_t)0x01000000)
   CAN_F7R2_FB25=((uint32_t)0x02000000)
   CAN_F7R2_FB26=((uint32_t)0x04000000)
   CAN_F7R2_FB27=((uint32_t)0x08000000)
   CAN_F7R2_FB28=((uint32_t)0x10000000)
   CAN_F7R2_FB29=((uint32_t)0x20000000)
   CAN_F7R2_FB2=((uint32_t)0x00000004)
   CAN_F7R2_FB30=((uint32_t)0x40000000)
   CAN_F7R2_FB31=((uint32_t)0x80000000)
   CAN_F7R2_FB3=((uint32_t)0x00000008)
   CAN_F7R2_FB4=((uint32_t)0x00000010)
   CAN_F7R2_FB5=((uint32_t)0x00000020)
   CAN_F7R2_FB6=((uint32_t)0x00000040)
   CAN_F7R2_FB7=((uint32_t)0x00000080)
   CAN_F7R2_FB8=((uint32_t)0x00000100)
   CAN_F7R2_FB9=((uint32_t)0x00000200)
   CAN_F8R1_FB0=((uint32_t)0x00000001)
   CAN_F8R1_FB10=((uint32_t)0x00000400)
   CAN_F8R1_FB11=((uint32_t)0x00000800)
   CAN_F8R1_FB12=((uint32_t)0x00001000)
   CAN_F8R1_FB13=((uint32_t)0x00002000)
   CAN_F8R1_FB14=((uint32_t)0x00004000)
   CAN_F8R1_FB15=((uint32_t)0x00008000)
   CAN_F8R1_FB16=((uint32_t)0x00010000)
   CAN_F8R1_FB17=((uint32_t)0x00020000)
   CAN_F8R1_FB18=((uint32_t)0x00040000)
   CAN_F8R1_FB19=((uint32_t)0x00080000)
   CAN_F8R1_FB1=((uint32_t)0x00000002)
   CAN_F8R1_FB20=((uint32_t)0x00100000)
   CAN_F8R1_FB21=((uint32_t)0x00200000)
   CAN_F8R1_FB22=((uint32_t)0x00400000)
   CAN_F8R1_FB23=((uint32_t)0x00800000)
   CAN_F8R1_FB24=((uint32_t)0x01000000)
   CAN_F8R1_FB25=((uint32_t)0x02000000)
   CAN_F8R1_FB26=((uint32_t)0x04000000)
   CAN_F8R1_FB27=((uint32_t)0x08000000)
   CAN_F8R1_FB28=((uint32_t)0x10000000)
   CAN_F8R1_FB29=((uint32_t)0x20000000)
   CAN_F8R1_FB2=((uint32_t)0x00000004)
   CAN_F8R1_FB30=((uint32_t)0x40000000)
   CAN_F8R1_FB31=((uint32_t)0x80000000)
   CAN_F8R1_FB3=((uint32_t)0x00000008)
   CAN_F8R1_FB4=((uint32_t)0x00000010)
   CAN_F8R1_FB5=((uint32_t)0x00000020)
   CAN_F8R1_FB6=((uint32_t)0x00000040)
   CAN_F8R1_FB7=((uint32_t)0x00000080)
   CAN_F8R1_FB8=((uint32_t)0x00000100)
   CAN_F8R1_FB9=((uint32_t)0x00000200)
   CAN_F8R2_FB0=((uint32_t)0x00000001)
   CAN_F8R2_FB10=((uint32_t)0x00000400)
   CAN_F8R2_FB11=((uint32_t)0x00000800)
   CAN_F8R2_FB12=((uint32_t)0x00001000)
   CAN_F8R2_FB13=((uint32_t)0x00002000)
   CAN_F8R2_FB14=((uint32_t)0x00004000)
   CAN_F8R2_FB15=((uint32_t)0x00008000)
   CAN_F8R2_FB16=((uint32_t)0x00010000)
   CAN_F8R2_FB17=((uint32_t)0x00020000)
   CAN_F8R2_FB18=((uint32_t)0x00040000)
   CAN_F8R2_FB19=((uint32_t)0x00080000)
   CAN_F8R2_FB1=((uint32_t)0x00000002)
   CAN_F8R2_FB20=((uint32_t)0x00100000)
   CAN_F8R2_FB21=((uint32_t)0x00200000)
   CAN_F8R2_FB22=((uint32_t)0x00400000)
   CAN_F8R2_FB23=((uint32_t)0x00800000)
   CAN_F8R2_FB24=((uint32_t)0x01000000)
   CAN_F8R2_FB25=((uint32_t)0x02000000)
   CAN_F8R2_FB26=((uint32_t)0x04000000)
   CAN_F8R2_FB27=((uint32_t)0x08000000)
   CAN_F8R2_FB28=((uint32_t)0x10000000)
   CAN_F8R2_FB29=((uint32_t)0x20000000)
   CAN_F8R2_FB2=((uint32_t)0x00000004)
   CAN_F8R2_FB30=((uint32_t)0x40000000)
   CAN_F8R2_FB31=((uint32_t)0x80000000)
   CAN_F8R2_FB3=((uint32_t)0x00000008)
   CAN_F8R2_FB4=((uint32_t)0x00000010)
   CAN_F8R2_FB5=((uint32_t)0x00000020)
   CAN_F8R2_FB6=((uint32_t)0x00000040)
   CAN_F8R2_FB7=((uint32_t)0x00000080)
   CAN_F8R2_FB8=((uint32_t)0x00000100)
   CAN_F8R2_FB9=((uint32_t)0x00000200)
   CAN_F9R1_FB0=((uint32_t)0x00000001)
   CAN_F9R1_FB10=((uint32_t)0x00000400)
   CAN_F9R1_FB11=((uint32_t)0x00000800)
   CAN_F9R1_FB12=((uint32_t)0x00001000)
   CAN_F9R1_FB13=((uint32_t)0x00002000)
   CAN_F9R1_FB14=((uint32_t)0x00004000)
   CAN_F9R1_FB15=((uint32_t)0x00008000)
   CAN_F9R1_FB16=((uint32_t)0x00010000)
   CAN_F9R1_FB17=((uint32_t)0x00020000)
   CAN_F9R1_FB18=((uint32_t)0x00040000)
   CAN_F9R1_FB19=((uint32_t)0x00080000)
   CAN_F9R1_FB1=((uint32_t)0x00000002)
   CAN_F9R1_FB20=((uint32_t)0x00100000)
   CAN_F9R1_FB21=((uint32_t)0x00200000)
   CAN_F9R1_FB22=((uint32_t)0x00400000)
   CAN_F9R1_FB23=((uint32_t)0x00800000)
   CAN_F9R1_FB24=((uint32_t)0x01000000)
   CAN_F9R1_FB25=((uint32_t)0x02000000)
   CAN_F9R1_FB26=((uint32_t)0x04000000)
   CAN_F9R1_FB27=((uint32_t)0x08000000)
   CAN_F9R1_FB28=((uint32_t)0x10000000)
   CAN_F9R1_FB29=((uint32_t)0x20000000)
   CAN_F9R1_FB2=((uint32_t)0x00000004)
   CAN_F9R1_FB30=((uint32_t)0x40000000)
   CAN_F9R1_FB31=((uint32_t)0x80000000)
   CAN_F9R1_FB3=((uint32_t)0x00000008)
   CAN_F9R1_FB4=((uint32_t)0x00000010)
   CAN_F9R1_FB5=((uint32_t)0x00000020)
   CAN_F9R1_FB6=((uint32_t)0x00000040)
   CAN_F9R1_FB7=((uint32_t)0x00000080)
   CAN_F9R1_FB8=((uint32_t)0x00000100)
   CAN_F9R1_FB9=((uint32_t)0x00000200)
   CAN_F9R2_FB0=((uint32_t)0x00000001)
   CAN_F9R2_FB10=((uint32_t)0x00000400)
   CAN_F9R2_FB11=((uint32_t)0x00000800)
   CAN_F9R2_FB12=((uint32_t)0x00001000)
   CAN_F9R2_FB13=((uint32_t)0x00002000)
   CAN_F9R2_FB14=((uint32_t)0x00004000)
   CAN_F9R2_FB15=((uint32_t)0x00008000)
   CAN_F9R2_FB16=((uint32_t)0x00010000)
   CAN_F9R2_FB17=((uint32_t)0x00020000)
   CAN_F9R2_FB18=((uint32_t)0x00040000)
   CAN_F9R2_FB19=((uint32_t)0x00080000)
   CAN_F9R2_FB1=((uint32_t)0x00000002)
   CAN_F9R2_FB20=((uint32_t)0x00100000)
   CAN_F9R2_FB21=((uint32_t)0x00200000)
   CAN_F9R2_FB22=((uint32_t)0x00400000)
   CAN_F9R2_FB23=((uint32_t)0x00800000)
   CAN_F9R2_FB24=((uint32_t)0x01000000)
   CAN_F9R2_FB25=((uint32_t)0x02000000)
   CAN_F9R2_FB26=((uint32_t)0x04000000)
   CAN_F9R2_FB27=((uint32_t)0x08000000)
   CAN_F9R2_FB28=((uint32_t)0x10000000)
   CAN_F9R2_FB29=((uint32_t)0x20000000)
   CAN_F9R2_FB2=((uint32_t)0x00000004)
   CAN_F9R2_FB30=((uint32_t)0x40000000)
   CAN_F9R2_FB31=((uint32_t)0x80000000)
   CAN_F9R2_FB3=((uint32_t)0x00000008)
   CAN_F9R2_FB4=((uint32_t)0x00000010)
   CAN_F9R2_FB5=((uint32_t)0x00000020)
   CAN_F9R2_FB6=((uint32_t)0x00000040)
   CAN_F9R2_FB7=((uint32_t)0x00000080)
   CAN_F9R2_FB8=((uint32_t)0x00000100)
   CAN_F9R2_FB9=((uint32_t)0x00000200)
   CAN_FA1R_FACT0=((uint32_t)0x00000001)
   CAN_FA1R_FACT10=((uint32_t)0x00000400)
   CAN_FA1R_FACT11=((uint32_t)0x00000800)
   CAN_FA1R_FACT12=((uint32_t)0x00001000)
   CAN_FA1R_FACT13=((uint32_t)0x00002000)
   CAN_FA1R_FACT14=((uint32_t)0x00004000)
   CAN_FA1R_FACT15=((uint32_t)0x00008000)
   CAN_FA1R_FACT16=((uint32_t)0x00010000)
   CAN_FA1R_FACT17=((uint32_t)0x00020000)
   CAN_FA1R_FACT18=((uint32_t)0x00040000)
   CAN_FA1R_FACT19=((uint32_t)0x00080000)
   CAN_FA1R_FACT1=((uint32_t)0x00000002)
   CAN_FA1R_FACT20=((uint32_t)0x00100000)
   CAN_FA1R_FACT21=((uint32_t)0x00200000)
   CAN_FA1R_FACT22=((uint32_t)0x00400000)
   CAN_FA1R_FACT23=((uint32_t)0x00800000)
   CAN_FA1R_FACT24=((uint32_t)0x01000000)
   CAN_FA1R_FACT25=((uint32_t)0x02000000)
   CAN_FA1R_FACT26=((uint32_t)0x04000000)
   CAN_FA1R_FACT27=((uint32_t)0x08000000)
   CAN_FA1R_FACT2=((uint32_t)0x00000004)
   CAN_FA1R_FACT3=((uint32_t)0x00000008)
   CAN_FA1R_FACT4=((uint32_t)0x00000010)
   CAN_FA1R_FACT5=((uint32_t)0x00000020)
   CAN_FA1R_FACT6=((uint32_t)0x00000040)
   CAN_FA1R_FACT7=((uint32_t)0x00000080)
   CAN_FA1R_FACT8=((uint32_t)0x00000100)
   CAN_FA1R_FACT9=((uint32_t)0x00000200)
   CAN_FA1R_FACT=((uint32_t)0x0FFFFFFF)
   CAN_FFA1R_FFA0=((uint32_t)0x00000001)
   CAN_FFA1R_FFA10=((uint32_t)0x00000400)
   CAN_FFA1R_FFA11=((uint32_t)0x00000800)
   CAN_FFA1R_FFA12=((uint32_t)0x00001000)
   CAN_FFA1R_FFA13=((uint32_t)0x00002000)
   CAN_FFA1R_FFA14=((uint32_t)0x00004000)
   CAN_FFA1R_FFA15=((uint32_t)0x00008000)
   CAN_FFA1R_FFA16=((uint32_t)0x00010000)
   CAN_FFA1R_FFA17=((uint32_t)0x00020000)
   CAN_FFA1R_FFA18=((uint32_t)0x00040000)
   CAN_FFA1R_FFA19=((uint32_t)0x00080000)
   CAN_FFA1R_FFA1=((uint32_t)0x00000002)
   CAN_FFA1R_FFA20=((uint32_t)0x00100000)
   CAN_FFA1R_FFA21=((uint32_t)0x00200000)
   CAN_FFA1R_FFA22=((uint32_t)0x00400000)
   CAN_FFA1R_FFA23=((uint32_t)0x00800000)
   CAN_FFA1R_FFA24=((uint32_t)0x01000000)
   CAN_FFA1R_FFA25=((uint32_t)0x02000000)
   CAN_FFA1R_FFA26=((uint32_t)0x04000000)
   CAN_FFA1R_FFA27=((uint32_t)0x08000000)
   CAN_FFA1R_FFA2=((uint32_t)0x00000004)
   CAN_FFA1R_FFA3=((uint32_t)0x00000008)
   CAN_FFA1R_FFA4=((uint32_t)0x00000010)
   CAN_FFA1R_FFA5=((uint32_t)0x00000020)
   CAN_FFA1R_FFA6=((uint32_t)0x00000040)
   CAN_FFA1R_FFA7=((uint32_t)0x00000080)
   CAN_FFA1R_FFA8=((uint32_t)0x00000100)
   CAN_FFA1R_FFA9=((uint32_t)0x00000200)
   CAN_FFA1R_FFA=((uint32_t)0x0FFFFFFF)
   CAN_FilterFIFO0=CAN_FILTER_FIFO0
   CAN_FilterFIFO1=CAN_FILTER_FIFO1
   CAN_FM1R_FBM0=((uint32_t)0x00000001)
   CAN_FM1R_FBM10=((uint32_t)0x00000400)
   CAN_FM1R_FBM11=((uint32_t)0x00000800)
   CAN_FM1R_FBM12=((uint32_t)0x00001000)
   CAN_FM1R_FBM13=((uint32_t)0x00002000)
   CAN_FM1R_FBM14=((uint32_t)0x00004000)
   CAN_FM1R_FBM15=((uint32_t)0x00008000)
   CAN_FM1R_FBM16=((uint32_t)0x00010000)
   CAN_FM1R_FBM17=((uint32_t)0x00020000)
   CAN_FM1R_FBM18=((uint32_t)0x00040000)
   CAN_FM1R_FBM19=((uint32_t)0x00080000)
   CAN_FM1R_FBM1=((uint32_t)0x00000002)
   CAN_FM1R_FBM20=((uint32_t)0x00100000)
   CAN_FM1R_FBM21=((uint32_t)0x00200000)
   CAN_FM1R_FBM22=((uint32_t)0x00400000)
   CAN_FM1R_FBM23=((uint32_t)0x00800000)
   CAN_FM1R_FBM24=((uint32_t)0x01000000)
   CAN_FM1R_FBM25=((uint32_t)0x02000000)
   CAN_FM1R_FBM26=((uint32_t)0x04000000)
   CAN_FM1R_FBM27=((uint32_t)0x08000000)
   CAN_FM1R_FBM2=((uint32_t)0x00000004)
   CAN_FM1R_FBM3=((uint32_t)0x00000008)
   CAN_FM1R_FBM4=((uint32_t)0x00000010)
   CAN_FM1R_FBM5=((uint32_t)0x00000020)
   CAN_FM1R_FBM6=((uint32_t)0x00000040)
   CAN_FM1R_FBM7=((uint32_t)0x00000080)
   CAN_FM1R_FBM8=((uint32_t)0x00000100)
   CAN_FM1R_FBM9=((uint32_t)0x00000200)
   CAN_FM1R_FBM=((uint32_t)0x0FFFFFFF)
   CAN_FMR_CAN2SB=((uint32_t)0x00003F00)
   CAN_FMR_FINIT=((uint32_t)0x01)
   CAN_FS1R_FSC0=((uint32_t)0x00000001)
   CAN_FS1R_FSC10=((uint32_t)0x00000400)
   CAN_FS1R_FSC11=((uint32_t)0x00000800)
   CAN_FS1R_FSC12=((uint32_t)0x00001000)
   CAN_FS1R_FSC13=((uint32_t)0x00002000)
   CAN_FS1R_FSC14=((uint32_t)0x00004000)
   CAN_FS1R_FSC15=((uint32_t)0x00008000)
   CAN_FS1R_FSC16=((uint32_t)0x00010000)
   CAN_FS1R_FSC17=((uint32_t)0x00020000)
   CAN_FS1R_FSC18=((uint32_t)0x00040000)
   CAN_FS1R_FSC19=((uint32_t)0x00080000)
   CAN_FS1R_FSC1=((uint32_t)0x00000002)
   CAN_FS1R_FSC20=((uint32_t)0x00100000)
   CAN_FS1R_FSC21=((uint32_t)0x00200000)
   CAN_FS1R_FSC22=((uint32_t)0x00400000)
   CAN_FS1R_FSC23=((uint32_t)0x00800000)
   CAN_FS1R_FSC24=((uint32_t)0x01000000)
   CAN_FS1R_FSC25=((uint32_t)0x02000000)
   CAN_FS1R_FSC26=((uint32_t)0x04000000)
   CAN_FS1R_FSC27=((uint32_t)0x08000000)
   CAN_FS1R_FSC2=((uint32_t)0x00000004)
   CAN_FS1R_FSC3=((uint32_t)0x00000008)
   CAN_FS1R_FSC4=((uint32_t)0x00000010)
   CAN_FS1R_FSC5=((uint32_t)0x00000020)
   CAN_FS1R_FSC6=((uint32_t)0x00000040)
   CAN_FS1R_FSC7=((uint32_t)0x00000080)
   CAN_FS1R_FSC8=((uint32_t)0x00000100)
   CAN_FS1R_FSC9=((uint32_t)0x00000200)
   CAN_FS1R_FSC=((uint32_t)0x0FFFFFFF)
   CAN_IER_BOFIE=((uint32_t)0x00000400)
   CAN_IER_EPVIE=((uint32_t)0x00000200)
   CAN_IER_ERRIE=((uint32_t)0x00008000)
   CAN_IER_EWGIE=((uint32_t)0x00000100)
   CAN_IER_FFIE0=((uint32_t)0x00000004)
   CAN_IER_FFIE1=((uint32_t)0x00000020)
   CAN_IER_FMPIE0=((uint32_t)0x00000002)
   CAN_IER_FMPIE1=((uint32_t)0x00000010)
   CAN_IER_FOVIE0=((uint32_t)0x00000008)
   CAN_IER_FOVIE1=((uint32_t)0x00000040)
   CAN_IER_LECIE=((uint32_t)0x00000800)
   CAN_IER_SLKIE=((uint32_t)0x00020000)
   CAN_IER_TMEIE=((uint32_t)0x00000001)
   CAN_IER_WKUIE=((uint32_t)0x00010000)
   CAN_IT_RQCP0=CAN_IT_TME
   CAN_IT_RQCP1=CAN_IT_TME
   CAN_IT_RQCP2=CAN_IT_TME
   CAN_MCR_ABOM=((uint32_t)0x00000040)
   CAN_MCR_AWUM=((uint32_t)0x00000020)
   CAN_MCR_DBF=((uint32_t)0x00010000)
   CAN_MCR_INRQ=((uint32_t)0x00000001)
   CAN_MCR_NART=((uint32_t)0x00000010)
   CAN_MCR_RESET=((uint32_t)0x00008000)
   CAN_MCR_RFLM=((uint32_t)0x00000008)
   CAN_MCR_SLEEP=((uint32_t)0x00000002)
   CAN_MCR_TTCM=((uint32_t)0x00000080)
   CAN_MCR_TXFP=((uint32_t)0x00000004)
   CAN_MSR_ERRI=((uint32_t)0x0004)
   CAN_MSR_INAK=((uint32_t)0x0001)
   CAN_MSR_RX=((uint32_t)0x0800)
   CAN_MSR_RXM=((uint32_t)0x0200)
   CAN_MSR_SAMP=((uint32_t)0x0400)
   CAN_MSR_SLAK=((uint32_t)0x0002)
   CAN_MSR_SLAKI=((uint32_t)0x0010)
   CAN_MSR_TXM=((uint32_t)0x0100)
   CAN_MSR_WKUI=((uint32_t)0x0008)
   CAN_RDH0R_DATA4=((uint32_t)0x000000FF)
   CAN_RDH0R_DATA5=((uint32_t)0x0000FF00)
   CAN_RDH0R_DATA6=((uint32_t)0x00FF0000)
   CAN_RDH0R_DATA7=((uint32_t)0xFF000000)
   CAN_RDH1R_DATA4=((uint32_t)0x000000FF)
   CAN_RDH1R_DATA5=((uint32_t)0x0000FF00)
   CAN_RDH1R_DATA6=((uint32_t)0x00FF0000)
   CAN_RDH1R_DATA7=((uint32_t)0xFF000000)
   CAN_RDL0R_DATA0=((uint32_t)0x000000FF)
   CAN_RDL0R_DATA1=((uint32_t)0x0000FF00)
   CAN_RDL0R_DATA2=((uint32_t)0x00FF0000)
   CAN_RDL0R_DATA3=((uint32_t)0xFF000000)
   CAN_RDL1R_DATA0=((uint32_t)0x000000FF)
   CAN_RDL1R_DATA1=((uint32_t)0x0000FF00)
   CAN_RDL1R_DATA2=((uint32_t)0x00FF0000)
   CAN_RDL1R_DATA3=((uint32_t)0xFF000000)
   CAN_RDT0R_DLC=((uint32_t)0x0000000F)
   CAN_RDT0R_FMI=((uint32_t)0x0000FF00)
   CAN_RDT0R_TIME=((uint32_t)0xFFFF0000)
   CAN_RDT1R_DLC=((uint32_t)0x0000000F)
   CAN_RDT1R_FMI=((uint32_t)0x0000FF00)
   CAN_RDT1R_TIME=((uint32_t)0xFFFF0000)
   CAN_RF0R_FMP0=((uint32_t)0x03)
   CAN_RF0R_FOVR0=((uint32_t)0x10)
   CAN_RF0R_FULL0=((uint32_t)0x08)
   CAN_RF0R_RFOM0=((uint32_t)0x20)
   CAN_RF1R_FMP1=((uint32_t)0x03)
   CAN_RF1R_FOVR1=((uint32_t)0x10)
   CAN_RF1R_FULL1=((uint32_t)0x08)
   CAN_RF1R_RFOM1=((uint32_t)0x20)
   CAN_RI0R_EXID=((uint32_t)0x001FFFF8)
   CAN_RI0R_IDE=((uint32_t)0x00000004)
   CAN_RI0R_RTR=((uint32_t)0x00000002)
   CAN_RI0R_STID=((uint32_t)0xFFE00000)
   CAN_RI1R_EXID=((uint32_t)0x001FFFF8)
   CAN_RI1R_IDE=((uint32_t)0x00000004)
   CAN_RI1R_RTR=((uint32_t)0x00000002)
   CAN_RI1R_STID=((uint32_t)0xFFE00000)
   CAN_TDH0R_DATA4=((uint32_t)0x000000FF)
   CAN_TDH0R_DATA5=((uint32_t)0x0000FF00)
   CAN_TDH0R_DATA6=((uint32_t)0x00FF0000)
   CAN_TDH0R_DATA7=((uint32_t)0xFF000000)
   CAN_TDH1R_DATA4=((uint32_t)0x000000FF)
   CAN_TDH1R_DATA5=((uint32_t)0x0000FF00)
   CAN_TDH1R_DATA6=((uint32_t)0x00FF0000)
   CAN_TDH1R_DATA7=((uint32_t)0xFF000000)
   CAN_TDH2R_DATA4=((uint32_t)0x000000FF)
   CAN_TDH2R_DATA5=((uint32_t)0x0000FF00)
   CAN_TDH2R_DATA6=((uint32_t)0x00FF0000)
   CAN_TDH2R_DATA7=((uint32_t)0xFF000000)
   CAN_TDL0R_DATA0=((uint32_t)0x000000FF)
   CAN_TDL0R_DATA1=((uint32_t)0x0000FF00)
   CAN_TDL0R_DATA2=((uint32_t)0x00FF0000)
   CAN_TDL0R_DATA3=((uint32_t)0xFF000000)
   CAN_TDL1R_DATA0=((uint32_t)0x000000FF)
   CAN_TDL1R_DATA1=((uint32_t)0x0000FF00)
   CAN_TDL1R_DATA2=((uint32_t)0x00FF0000)
   CAN_TDL1R_DATA3=((uint32_t)0xFF000000)
   CAN_TDL2R_DATA0=((uint32_t)0x000000FF)
   CAN_TDL2R_DATA1=((uint32_t)0x0000FF00)
   CAN_TDL2R_DATA2=((uint32_t)0x00FF0000)
   CAN_TDL2R_DATA3=((uint32_t)0xFF000000)
   CAN_TDT0R_DLC=((uint32_t)0x0000000F)
   CAN_TDT0R_TGT=((uint32_t)0x00000100)
   CAN_TDT0R_TIME=((uint32_t)0xFFFF0000)
   CAN_TDT1R_DLC=((uint32_t)0x0000000F)
   CAN_TDT1R_TGT=((uint32_t)0x00000100)
   CAN_TDT1R_TIME=((uint32_t)0xFFFF0000)
   CAN_TDT2R_DLC=((uint32_t)0x0000000F)
   CAN_TDT2R_TGT=((uint32_t)0x00000100)
   CAN_TDT2R_TIME=((uint32_t)0xFFFF0000)
   CAN_TI0R_EXID=((uint32_t)0x001FFFF8)
   CAN_TI0R_IDE=((uint32_t)0x00000004)
   CAN_TI0R_RTR=((uint32_t)0x00000002)
   CAN_TI0R_STID=((uint32_t)0xFFE00000)
   CAN_TI0R_TXRQ=((uint32_t)0x00000001)
   CAN_TI1R_EXID=((uint32_t)0x001FFFF8)
   CAN_TI1R_IDE=((uint32_t)0x00000004)
   CAN_TI1R_RTR=((uint32_t)0x00000002)
   CAN_TI1R_STID=((uint32_t)0xFFE00000)
   CAN_TI1R_TXRQ=((uint32_t)0x00000001)
   CAN_TI2R_EXID=((uint32_t)0x001FFFF8)
   CAN_TI2R_IDE=((uint32_t)0x00000004)
   CAN_TI2R_RTR=((uint32_t)0x00000002)
   CAN_TI2R_STID=((uint32_t)0xFFE00000)
   CAN_TI2R_TXRQ=((uint32_t)0x00000001)
   CAN_TSR_ABRQ0=((uint32_t)0x00000080)
   CAN_TSR_ABRQ1=((uint32_t)0x00008000)
   CAN_TSR_ABRQ2=((uint32_t)0x00800000)
   CAN_TSR_ALST0=((uint32_t)0x00000004)
   CAN_TSR_ALST1=((uint32_t)0x00000400)
   CAN_TSR_ALST2=((uint32_t)0x00040000)
   CAN_TSR_CODE=((uint32_t)0x03000000)
   CAN_TSR_LOW0=((uint32_t)0x20000000)
   CAN_TSR_LOW1=((uint32_t)0x40000000)
   CAN_TSR_LOW2=((uint32_t)0x80000000)
   CAN_TSR_LOW=((uint32_t)0xE0000000)
   CAN_TSR_RQCP0=((uint32_t)0x00000001)
   CAN_TSR_RQCP1=((uint32_t)0x00000100)
   CAN_TSR_RQCP2=((uint32_t)0x00010000)
   CAN_TSR_TERR0=((uint32_t)0x00000008)
   CAN_TSR_TERR1=((uint32_t)0x00000800)
   CAN_TSR_TERR2=((uint32_t)0x00080000)
   CAN_TSR_TME0=((uint32_t)0x04000000)
   CAN_TSR_TME1=((uint32_t)0x08000000)
   CAN_TSR_TME2=((uint32_t)0x10000000)
   CAN_TSR_TME=((uint32_t)0x1C000000)
   CAN_TSR_TXOK0=((uint32_t)0x00000002)
   CAN_TSR_TXOK1=((uint32_t)0x00000200)
   CAN_TSR_TXOK2=((uint32_t)0x00020000)
   CAN_TXSTATUS_FAILED=((uint8_t)0x00)
   CAN_TXSTATUS_OK=((uint8_t)0x01)
   CAN_TXSTATUS_PENDING=((uint8_t)0x02)
   CCER_CCxE_MASK=TIM_CCER_CCxE_MASK
   CCER_CCxNE_MASK=TIM_CCER_CCxNE_MASK
   CCMDATARAM_BASE=((uint32_t)0x10000000)
   CCMDATARAM_END=((uint32_t)0x1000FFFF)
   CFGR_I2SSRC_BB=RCC_CFGR_I2SSRC_BB
   CFR_BASE=WWDG_CFR_BASE
   CF_CARD_HEAD=ATA_CARD_HEAD
   CF_COMMON_DATA_AREA=ATA_COMMON_DATA_AREA
   CF_CYLINDER_HIGH=ATA_CYLINDER_HIGH
   CF_CYLINDER_LOW=ATA_CYLINDER_LOW
   CF_DATA=ATA_DATA
   CF_ERASE_SECTOR_CMD=ATA_ERASE_SECTOR_CMD
   CF_IDENTIFY_CMD=ATA_IDENTIFY_CMD
   CF_READ_SECTOR_CMD=ATA_READ_SECTOR_CMD
   CF_SECTOR_COUNT=ATA_SECTOR_COUNT
   CF_SECTOR_NUMBER=ATA_SECTOR_NUMBER
   CF_STATUS_CMD=ATA_STATUS_CMD
   CF_STATUS_CMD_ALTERNATE=ATA_STATUS_CMD_ALTERNATE
   CF_WRITE_SECTOR_CMD=ATA_WRITE_SECTOR_CMD
   char=+0
   CIR_BYTE1_ADDRESS=RCC_CIR_BYTE1_ADDRESS
   CIR_BYTE2_ADDRESS=RCC_CIR_BYTE2_ADDRESS
   CLEAR_BIT(REG,BIT)=((REG) &= ~(BIT))
   CLEAR_FLAG_STATUS_REG_CMD=0x50
   CLEAR_REG(REG)=((REG) = (0x0))
   CLICKEVENT_HPP=
   CLICKLISTENER_HPP=
   CLK_TCK=CLOCKS_PER_SEC
   CLOCKS_PER_SEC=_CLOCKS_PER_SEC_
   CLOCK_ALLOWED=1
   CLOCK_DISABLED=0
   CLOCK_DISALLOWED=0
   CLOCK_ENABLED=1
   CLOCK_REALTIME=((clockid_t) 1)
   CMP_PD_BitNumber=CMP_PD_BIT_NUMBER
   CM_A4=((uint32_t)0x0000000A)
   CM_A8=((uint32_t)0x00000009)
   CM_AL44=((uint32_t)0x00000006)
   CM_AL88=((uint32_t)0x00000007)
   CM_ARGB1555=((uint32_t)0x00000003)
   CM_ARGB4444=((uint32_t)0x00000004)
   CM_ARGB8888=((uint32_t)0x00000000)
   CM_L4=((uint32_t)0x00000008)
   CM_L8=((uint32_t)0x00000005)
   CM_RGB565=((uint32_t)0x00000002)
   CM_RGB888=((uint32_t)0x00000001)
   COLOR_VALUE=((uint32_t)0x000000FF)
   COMP_EXTI_LINE_COMP1_EVENT=COMP_EXTI_LINE_COMP1
   COMP_EXTI_LINE_COMP2_EVENT=COMP_EXTI_LINE_COMP2
   COMP_WINDOWMODE_DISABLED=COMP_WINDOWMODE_DISABLE
   COMP_WINDOWMODE_ENABLED=COMP_WINDOWMODE_ENABLE
   CONFIGPOPUP_BASE_HPP=
   CONFIGPOPUP_HPP=
   CONFIG_HPP=
   CONTAINER_HPP=
   CONTROL_FPCA_Msk=(1UL << CONTROL_FPCA_Pos)
   CONTROL_FPCA_Pos=2
   CONTROL_nPRIV_Msk=(1UL )
   CONTROL_nPRIV_Pos=0
   CONTROL_SPSEL_Msk=(1UL << CONTROL_SPSEL_Pos)
   CONTROL_SPSEL_Pos=1
   CoreDebug=((CoreDebug_Type *) CoreDebug_BASE)
   CoreDebug_BASE=(0xE000EDF0UL)
   CoreDebug_DCRSR_REGSEL_Msk=(0x1FUL )
   CoreDebug_DCRSR_REGSEL_Pos=0
   CoreDebug_DCRSR_REGWnR_Msk=(1UL << CoreDebug_DCRSR_REGWnR_Pos)
   CoreDebug_DCRSR_REGWnR_Pos=16
   CoreDebug_DEMCR_MON_EN_Msk=(1UL << CoreDebug_DEMCR_MON_EN_Pos)
   CoreDebug_DEMCR_MON_EN_Pos=16
   CoreDebug_DEMCR_MON_PEND_Msk=(1UL << CoreDebug_DEMCR_MON_PEND_Pos)
   CoreDebug_DEMCR_MON_PEND_Pos=17
   CoreDebug_DEMCR_MON_REQ_Msk=(1UL << CoreDebug_DEMCR_MON_REQ_Pos)
   CoreDebug_DEMCR_MON_REQ_Pos=19
   CoreDebug_DEMCR_MON_STEP_Msk=(1UL << CoreDebug_DEMCR_MON_STEP_Pos)
   CoreDebug_DEMCR_MON_STEP_Pos=18
   CoreDebug_DEMCR_TRCENA_Msk=(1UL << CoreDebug_DEMCR_TRCENA_Pos)
   CoreDebug_DEMCR_TRCENA_Pos=24
   CoreDebug_DEMCR_VC_BUSERR_Msk=(1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)
   CoreDebug_DEMCR_VC_BUSERR_Pos=8
   CoreDebug_DEMCR_VC_CHKERR_Msk=(1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)
   CoreDebug_DEMCR_VC_CHKERR_Pos=6
   CoreDebug_DEMCR_VC_CORERESET_Msk=(1UL )
   CoreDebug_DEMCR_VC_CORERESET_Pos=0
   CoreDebug_DEMCR_VC_HARDERR_Msk=(1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)
   CoreDebug_DEMCR_VC_HARDERR_Pos=10
   CoreDebug_DEMCR_VC_INTERR_Msk=(1UL << CoreDebug_DEMCR_VC_INTERR_Pos)
   CoreDebug_DEMCR_VC_INTERR_Pos=9
   CoreDebug_DEMCR_VC_MMERR_Msk=(1UL << CoreDebug_DEMCR_VC_MMERR_Pos)
   CoreDebug_DEMCR_VC_MMERR_Pos=4
   CoreDebug_DEMCR_VC_NOCPERR_Msk=(1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)
   CoreDebug_DEMCR_VC_NOCPERR_Pos=5
   CoreDebug_DEMCR_VC_STATERR_Msk=(1UL << CoreDebug_DEMCR_VC_STATERR_Pos)
   CoreDebug_DEMCR_VC_STATERR_Pos=7
   CoreDebug_DHCSR_C_DEBUGEN_Msk=(1UL )
   CoreDebug_DHCSR_C_DEBUGEN_Pos=0
   CoreDebug_DHCSR_C_HALT_Msk=(1UL << CoreDebug_DHCSR_C_HALT_Pos)
   CoreDebug_DHCSR_C_HALT_Pos=1
   CoreDebug_DHCSR_C_MASKINTS_Msk=(1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)
   CoreDebug_DHCSR_C_MASKINTS_Pos=3
   CoreDebug_DHCSR_C_SNAPSTALL_Msk=(1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)
   CoreDebug_DHCSR_C_SNAPSTALL_Pos=5
   CoreDebug_DHCSR_C_STEP_Msk=(1UL << CoreDebug_DHCSR_C_STEP_Pos)
   CoreDebug_DHCSR_C_STEP_Pos=2
   CoreDebug_DHCSR_DBGKEY_Msk=(0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)
   CoreDebug_DHCSR_DBGKEY_Pos=16
   CoreDebug_DHCSR_S_HALT_Msk=(1UL << CoreDebug_DHCSR_S_HALT_Pos)
   CoreDebug_DHCSR_S_HALT_Pos=17
   CoreDebug_DHCSR_S_LOCKUP_Msk=(1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)
   CoreDebug_DHCSR_S_LOCKUP_Pos=19
   CoreDebug_DHCSR_S_REGRDY_Msk=(1UL << CoreDebug_DHCSR_S_REGRDY_Pos)
   CoreDebug_DHCSR_S_REGRDY_Pos=16
   CoreDebug_DHCSR_S_RESET_ST_Msk=(1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)
   CoreDebug_DHCSR_S_RESET_ST_Pos=25
   CoreDebug_DHCSR_S_RETIRE_ST_Msk=(1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)
   CoreDebug_DHCSR_S_RETIRE_ST_Pos=24
   CoreDebug_DHCSR_S_SLEEP_Msk=(1UL << CoreDebug_DHCSR_S_SLEEP_Pos)
   CoreDebug_DHCSR_S_SLEEP_Pos=18
   CORTEXMMCUINSTRUMENTATION_HPP=
   CRC=((CRC_TypeDef *) CRC_BASE)
   CRC_BASE=(AHB1PERIPH_BASE + 0x3000)
   CRC_CR_RESET=((uint32_t)0x01)
   CRC_DR_DR=((uint32_t)0xFFFFFFFF)
   CRC_IDR_IDR=((uint32_t)0xFF)
   CRC_OUTPUTDATA_INVERSION_DISABLED=CRC_OUTPUTDATA_INVERSION_DISABLE
   CRC_OUTPUTDATA_INVERSION_ENABLED=CRC_OUTPUTDATA_INVERSION_ENABLE
   CR_BYTE2_ADDRESS=RCC_CR_BYTE2_ADDRESS
   CR_CSSON_BB=RCC_CR_CSSON_BB
   CR_DBP_BB=(uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32) + (DBP_BIT_NUMBER * 4))
   CR_FPDS_BB=(uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32) + (FPDS_BIT_NUMBER * 4))
   CR_HSEON_BB=RCC_CR_HSEON_BB
   CR_HSION_BB=RCC_CR_HSION_BB
   CR_LPLVDS_BB=(uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32) + (LPLVDS_BIT_NUMBER * 4))
   CR_MRLVDS_BB=(uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32) + (MRLVDS_BIT_NUMBER * 4))
   CR_MSION_BB=RCC_CR_MSION_BB
   CR_ODEN_BB=(uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32) + (ODEN_BIT_NUMBER * 4))
   CR_ODSWEN_BB=(uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32) + (ODSWEN_BIT_NUMBER * 4))
   CR_OFFSET_BB=PWR_CR_OFFSET_BB
   CR_PLLI2SON_BB=RCC_CR_PLLI2SON_BB
   CR_PLLON_BB=RCC_CR_PLLON_BB
   CR_PLLSAION_BB=RCC_CR_PLLSAION_BB
   CR_PMODE_BB=(uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32) + (PMODE_BIT_NUMBER * 4))
   CR_PSIZE_MASK=((uint32_t)0xFFFFFCFF)
   CR_PVDE_BB=(uint32_t)(PERIPH_BB_BASE + (PWR_CR_OFFSET_BB * 32) + (PVDE_BIT_NUMBER * 4))
   CSR_BRE_BB=(uint32_t)(PERIPH_BB_BASE + (PWR_CSR_OFFSET_BB * 32) + (BRE_BIT_NUMBER * 4))
   CSR_EWUP_BB=(PERIPH_BB_BASE + (PWR_CSR_OFFSET_BB * 32) + (EWUP_BIT_NUMBER * 4))
   CSR_LSEBYP_BB=RCC_CSR_LSEBYP_BB
   CSR_LSEON_BB=RCC_CSR_LSEON_BB
   CSR_LSION_BB=RCC_CSR_LSION_BB
   CSR_OFFSET_BB=PWR_CSR_OFFSET_BB
   CSR_RMVF_BB=RCC_CSR_RMVF_BB
   CSR_RTCEN_BB=RCC_CSR_RTCEN_BB
   CSR_RTCRST_BB=RCC_CSR_RTCRST_BB
   CSR_WUPP_BB=(PERIPH_BB_BASE + (PWR_CSR_OFFSET_BB * 32) + (WUPP_BIT_NUMBER * 4))
   CSSON_BitNumber=RCC_CSSON_BIT_NUMBER
   DAC1_CHANNEL_1=DAC_CHANNEL_1
   DAC1_CHANNEL_2=DAC_CHANNEL_2
   DAC2_CHANNEL_1=DAC_CHANNEL_1
   DAC=((DAC_TypeDef *) DAC_BASE)
   DAC_BASE=(APB1PERIPH_BASE + 0x7400)
   DAC_CR_BOFF1=((uint32_t)0x00000002)
   DAC_CR_BOFF2=((uint32_t)0x00020000)
   DAC_CR_DMAEN1=((uint32_t)0x00001000)
   DAC_CR_DMAEN2=((uint32_t)0x10000000)
   DAC_CR_EN1=((uint32_t)0x00000001)
   DAC_CR_EN2=((uint32_t)0x00010000)
   DAC_CR_MAMP1=((uint32_t)0x00000F00)
   DAC_CR_MAMP1_0=((uint32_t)0x00000100)
   DAC_CR_MAMP1_1=((uint32_t)0x00000200)
   DAC_CR_MAMP1_2=((uint32_t)0x00000400)
   DAC_CR_MAMP1_3=((uint32_t)0x00000800)
   DAC_CR_MAMP2=((uint32_t)0x0F000000)
   DAC_CR_MAMP2_0=((uint32_t)0x01000000)
   DAC_CR_MAMP2_1=((uint32_t)0x02000000)
   DAC_CR_MAMP2_2=((uint32_t)0x04000000)
   DAC_CR_MAMP2_3=((uint32_t)0x08000000)
   DAC_CR_TEN1=((uint32_t)0x00000004)
   DAC_CR_TEN2=((uint32_t)0x00040000)
   DAC_CR_TSEL1=((uint32_t)0x00000038)
   DAC_CR_TSEL1_0=((uint32_t)0x00000008)
   DAC_CR_TSEL1_1=((uint32_t)0x00000010)
   DAC_CR_TSEL1_2=((uint32_t)0x00000020)
   DAC_CR_TSEL2=((uint32_t)0x00380000)
   DAC_CR_TSEL2_0=((uint32_t)0x00080000)
   DAC_CR_TSEL2_1=((uint32_t)0x00100000)
   DAC_CR_TSEL2_2=((uint32_t)0x00200000)
   DAC_CR_WAVE1=((uint32_t)0x000000C0)
   DAC_CR_WAVE1_0=((uint32_t)0x00000040)
   DAC_CR_WAVE1_1=((uint32_t)0x00000080)
   DAC_CR_WAVE2=((uint32_t)0x00C00000)
   DAC_CR_WAVE2_0=((uint32_t)0x00400000)
   DAC_CR_WAVE2_1=((uint32_t)0x00800000)
   DAC_DHR12L1_DACC1DHR=((uint32_t)0xFFF0)
   DAC_DHR12L2_DACC2DHR=((uint32_t)0xFFF0)
   DAC_DHR12LD_DACC1DHR=((uint32_t)0x0000FFF0)
   DAC_DHR12LD_DACC2DHR=((uint32_t)0xFFF00000)
   DAC_DHR12R1_DACC1DHR=((uint32_t)0x0FFF)
   DAC_DHR12R2_DACC2DHR=((uint32_t)0x0FFF)
   DAC_DHR12RD_DACC1DHR=((uint32_t)0x00000FFF)
   DAC_DHR12RD_DACC2DHR=((uint32_t)0x0FFF0000)
   DAC_DHR8R1_DACC1DHR=((uint32_t)0xFF)
   DAC_DHR8R2_DACC2DHR=((uint32_t)0xFF)
   DAC_DHR8RD_DACC1DHR=((uint32_t)0x00FF)
   DAC_DHR8RD_DACC2DHR=((uint32_t)0xFF00)
   DAC_DOR1_DACC1DOR=((uint32_t)0x0FFF)
   DAC_DOR2_DACC2DOR=((uint32_t)0x0FFF)
   DAC_SR_DMAUDR1=((uint32_t)0x00002000)
   DAC_SR_DMAUDR2=((uint32_t)0x20000000)
   DAC_SWTRIGR_SWTRIG1=((uint32_t)0x01)
   DAC_SWTRIGR_SWTRIG2=((uint32_t)0x02)
   DAC_WAVEGENERATION_NOISE=DAC_WAVE_NOISE
   DAC_WAVEGENERATION_NONE=DAC_WAVE_NONE
   DAC_WAVEGENERATION_TRIANGLE=DAC_WAVE_TRIANGLE
   DAC_WAVE_NOISE=((uint32_t)DAC_CR_WAVE1_0)
   DAC_WAVE_NONE=((uint32_t)0x00000000)
   DAC_WAVE_TRIANGLE=((uint32_t)DAC_CR_WAVE1_1)
   DATA_CACHE_ENABLE=1
   DBGMCU=((DBGMCU_TypeDef *) DBGMCU_BASE)
   DBGMCU_APB1_FZ_DBG_CAN1_STOP=((uint32_t)0x02000000)
   DBGMCU_APB1_FZ_DBG_CAN2_STOP=((uint32_t)0x04000000)
   DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT=((uint32_t)0x00200000)
   DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT=((uint32_t)0x00400000)
   DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT=((uint32_t)0x00800000)
   DBGMCU_APB1_FZ_DBG_IWDEG_STOP=DBGMCU_APB1_FZ_DBG_IWDG_STOP
   DBGMCU_APB1_FZ_DBG_IWDG_STOP=((uint32_t)0x00001000)
   DBGMCU_APB1_FZ_DBG_RTC_STOP=((uint32_t)0x00000400)
   DBGMCU_APB1_FZ_DBG_TIM12_STOP=((uint32_t)0x00000040)
   DBGMCU_APB1_FZ_DBG_TIM13_STOP=((uint32_t)0x00000080)
   DBGMCU_APB1_FZ_DBG_TIM14_STOP=((uint32_t)0x00000100)
   DBGMCU_APB1_FZ_DBG_TIM2_STOP=((uint32_t)0x00000001)
   DBGMCU_APB1_FZ_DBG_TIM3_STOP=((uint32_t)0x00000002)
   DBGMCU_APB1_FZ_DBG_TIM4_STOP=((uint32_t)0x00000004)
   DBGMCU_APB1_FZ_DBG_TIM5_STOP=((uint32_t)0x00000008)
   DBGMCU_APB1_FZ_DBG_TIM6_STOP=((uint32_t)0x00000010)
   DBGMCU_APB1_FZ_DBG_TIM7_STOP=((uint32_t)0x00000020)
   DBGMCU_APB1_FZ_DBG_WWDG_STOP=((uint32_t)0x00000800)
   DBGMCU_APB2_FZ_DBG_TIM10_STOP=((uint32_t)0x00020000)
   DBGMCU_APB2_FZ_DBG_TIM11_STOP=((uint32_t)0x00040000)
   DBGMCU_APB2_FZ_DBG_TIM1_STOP=((uint32_t)0x00000001)
   DBGMCU_APB2_FZ_DBG_TIM8_STOP=((uint32_t)0x00000002)
   DBGMCU_APB2_FZ_DBG_TIM9_STOP=((uint32_t)0x00010000)
   DBGMCU_BASE=((uint32_t )0xE0042000)
   DBGMCU_CR_DBG_SLEEP=((uint32_t)0x00000001)
   DBGMCU_CR_DBG_STANDBY=((uint32_t)0x00000004)
   DBGMCU_CR_DBG_STOP=((uint32_t)0x00000002)
   DBGMCU_CR_TRACE_IOEN=((uint32_t)0x00000020)
   DBGMCU_CR_TRACE_MODE=((uint32_t)0x000000C0)
   DBGMCU_CR_TRACE_MODE_0=((uint32_t)0x00000040)
   DBGMCU_CR_TRACE_MODE_1=((uint32_t)0x00000080)
   DBGMCU_IDCODE_DEV_ID=((uint32_t)0x00000FFF)
   DBGMCU_IDCODE_REV_ID=((uint32_t)0xFFFF0000)
   DBP_BitNumber=DBP_BIT_NUMBER
   DBP_BIT_NUMBER=POSITION_VAL(PWR_CR_DBP)
   DBP_TIMEOUT_VALUE=RCC_DBP_TIMEOUT_VALUE
   DCKCFGR_TIMPRE_BB=RCC_DCKCFGR_TIMPRE_BB
   DCMI=((DCMI_TypeDef *) DCMI_BASE)
   DCMI_BASE=(AHB2PERIPH_BASE + 0x50000)
   DCMI_CR_BSM_0=((uint32_t)0x00010000)
   DCMI_CR_BSM_1=((uint32_t)0x00020000)
   DCMI_CR_CAPTURE=((uint32_t)0x00000001)
   DCMI_CR_CM=((uint32_t)0x00000002)
   DCMI_CR_CROP=((uint32_t)0x00000004)
   DCMI_CR_EDM_0=((uint32_t)0x00000400)
   DCMI_CR_EDM_1=((uint32_t)0x00000800)
   DCMI_CR_ENABLE=((uint32_t)0x00004000)
   DCMI_CR_ESS=((uint32_t)0x00000010)
   DCMI_CR_FCRC_0=((uint32_t)0x00000100)
   DCMI_CR_FCRC_1=((uint32_t)0x00000200)
   DCMI_CR_HSPOL=((uint32_t)0x00000040)
   DCMI_CR_JPEG=((uint32_t)0x00000008)
   DCMI_CR_LSM=((uint32_t)0x00080000)
   DCMI_CR_OEBS=((uint32_t)0x00040000)
   DCMI_CR_OELS=((uint32_t)0x00100000)
   DCMI_CR_OUTEN=((uint32_t)0x00002000)
   DCMI_CR_PCKPOL=((uint32_t)0x00000020)
   DCMI_CR_VSPOL=((uint32_t)0x00000080)
   DCMI_ICR_ERR_ISC=((uint32_t)0x00000004)
   DCMI_ICR_FRAME_ISC=((uint32_t)0x00000001)
   DCMI_ICR_LINE_ISC=((uint32_t)0x00000010)
   DCMI_ICR_OVF_ISC=((uint32_t)0x00000002)
   DCMI_ICR_VSYNC_ISC=((uint32_t)0x00000008)
   DCMI_IER_ERR_IE=((uint32_t)0x00000004)
   DCMI_IER_FRAME_IE=((uint32_t)0x00000001)
   DCMI_IER_LINE_IE=((uint32_t)0x00000010)
   DCMI_IER_OVF_IE=((uint32_t)0x00000002)
   DCMI_IER_VSYNC_IE=((uint32_t)0x00000008)
   DCMI_MISR_ERR_MIS=((uint32_t)0x00000004)
   DCMI_MISR_FRAME_MIS=((uint32_t)0x00000001)
   DCMI_MISR_LINE_MIS=((uint32_t)0x00000010)
   DCMI_MISR_OVF_MIS=((uint32_t)0x00000002)
   DCMI_MISR_VSYNC_MIS=((uint32_t)0x00000008)
   DCMI_RISR_ERR_RIS=((uint32_t)0x00000004)
   DCMI_RISR_FRAME_RIS=((uint32_t)0x00000001)
   DCMI_RISR_LINE_RIS=((uint32_t)0x00000010)
   DCMI_RISR_OVF_RIS=((uint32_t)0x00000002)
   DCMI_RISR_VSYNC_RIS=((uint32_t)0x00000008)
   DCMI_SR_FNE=((uint32_t)0x00000004)
   DCMI_SR_HSYNC=((uint32_t)0x00000001)
   DCMI_SR_VSYNC=((uint32_t)0x00000002)
   DISCO_DMAx_CLK_ENABLE()=__HAL_RCC_DMA1_CLK_ENABLE()
   DISCO_I2C1=I2C1
   DISCO_I2C1_CLK_ENABLE()=__HAL_RCC_I2C1_CLK_ENABLE()
   DISCO_I2C1_ER_IRQn=I2C1_ER_IRQn
   DISCO_I2C1_EV_IRQn=I2C1_EV_IRQn
   DISCO_I2C1_FORCE_RESET()=__HAL_RCC_I2C1_FORCE_RESET()
   DISCO_I2C1_RELEASE_RESET()=__HAL_RCC_I2C1_RELEASE_RESET()
   DISCO_I2C1_SCL_PIN=GPIO_PIN_8
   DISCO_I2C1_SCL_SDA_AF=GPIO_AF4_I2C1
   DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE()=__HAL_RCC_GPIOB_CLK_ENABLE()
   DISCO_I2C1_SCL_SDA_GPIO_PORT=GPIOB
   DISCO_I2C1_SDA_PIN=GPIO_PIN_9
   DISCO_I2C2=I2C2
   DISCO_I2C2_CLK_ENABLE()=__HAL_RCC_I2C2_CLK_ENABLE()
   DISCO_I2C2_ER_IRQn=I2C2_ER_IRQn
   DISCO_I2C2_EV_IRQn=I2C2_EV_IRQn
   DISCO_I2C2_FORCE_RESET()=__HAL_RCC_I2C2_FORCE_RESET()
   DISCO_I2C2_RELEASE_RESET()=__HAL_RCC_I2C2_RELEASE_RESET()
   DISCO_I2C2_SCL_PIN=GPIO_PIN_4
   DISCO_I2C2_SCL_SDA_AF=GPIO_AF4_I2C2
   DISCO_I2C2_SCL_SDA_GPIO_CLK_ENABLE()=__HAL_RCC_GPIOH_CLK_ENABLE()
   DISCO_I2C2_SCL_SDA_GPIO_PORT=GPIOH
   DISCO_I2C2_SDA_PIN=GPIO_PIN_5
   DMA1=((DMA_TypeDef *) DMA1_BASE)
   DMA1_BASE=(AHB1PERIPH_BASE + 0x6000)
   DMA1_Stream0=((DMA_Stream_TypeDef *) DMA1_Stream0_BASE)
   DMA1_Stream0_BASE=(DMA1_BASE + 0x010)
   DMA1_Stream1=((DMA_Stream_TypeDef *) DMA1_Stream1_BASE)
   DMA1_Stream1_BASE=(DMA1_BASE + 0x028)
   DMA1_Stream2=((DMA_Stream_TypeDef *) DMA1_Stream2_BASE)
   DMA1_Stream2_BASE=(DMA1_BASE + 0x040)
   DMA1_Stream3=((DMA_Stream_TypeDef *) DMA1_Stream3_BASE)
   DMA1_Stream3_BASE=(DMA1_BASE + 0x058)
   DMA1_Stream4=((DMA_Stream_TypeDef *) DMA1_Stream4_BASE)
   DMA1_Stream4_BASE=(DMA1_BASE + 0x070)
   DMA1_Stream5=((DMA_Stream_TypeDef *) DMA1_Stream5_BASE)
   DMA1_Stream5_BASE=(DMA1_BASE + 0x088)
   DMA1_Stream6=((DMA_Stream_TypeDef *) DMA1_Stream6_BASE)
   DMA1_Stream6_BASE=(DMA1_BASE + 0x0A0)
   DMA1_Stream7=((DMA_Stream_TypeDef *) DMA1_Stream7_BASE)
   DMA1_Stream7_BASE=(DMA1_BASE + 0x0B8)
   DMA2=((DMA_TypeDef *) DMA2_BASE)
   DMA2D=((DMA2D_TypeDef *)DMA2D_BASE)
   DMA2D_AMTCR_DT=((uint32_t)0x0000FF00)
   DMA2D_AMTCR_EN=((uint32_t)0x00000001)
   DMA2D_ARGB1555=((uint32_t)0x00000003)
   DMA2D_ARGB4444=((uint32_t)0x00000004)
   DMA2D_ARGB8888=((uint32_t)0x00000000)
   DMA2D_BASE=(AHB1PERIPH_BASE + 0xB000)
   DMA2D_BGCMAR_MA=((uint32_t)0xFFFFFFFF)
   DMA2D_BGCOLR_BLUE=((uint32_t)0x000000FF)
   DMA2D_BGCOLR_GREEN=((uint32_t)0x0000FF00)
   DMA2D_BGCOLR_RED=((uint32_t)0x00FF0000)
   DMA2D_BGMAR_MA=((uint32_t)0xFFFFFFFF)
   DMA2D_BGOR_LO=((uint32_t)0x00003FFF)
   DMA2D_BGPFCCR_ALPHA=((uint32_t)0xFF000000)
   DMA2D_BGPFCCR_AM=((uint32_t)0x00030000)
   DMA2D_BGPFCCR_CCM=((uint32_t)0x00000010)
   DMA2D_BGPFCCR_CM=((uint32_t)0x0000000F)
   DMA2D_BGPFCCR_CS=((uint32_t)0x0000FF00)
   DMA2D_BGPFCCR_START=((uint32_t)0x00000020)
   DMA2D_CCM_ARGB8888=((uint32_t)0x00000000)
   DMA2D_CCM_RGB888=((uint32_t)0x00000001)
   DMA2D_CLUT_SIZE=(DMA2D_FGPFCCR_CS >> 8)
   DMA2D_COMBINE_ALPHA=((uint32_t)0x00000002)
   DMA2D_CR_ABORT=((uint32_t)0x00000004)
   DMA2D_CR_CAEIE=((uint32_t)0x00000800)
   DMA2D_CR_CEIE=((uint32_t)0x00002000)
   DMA2D_CR_CTCIE=((uint32_t)0x00001000)
   DMA2D_CR_MODE=((uint32_t)0x00030000)
   DMA2D_CR_START=((uint32_t)0x00000001)
   DMA2D_CR_SUSP=((uint32_t)0x00000002)
   DMA2D_CR_TCIE=((uint32_t)0x00000200)
   DMA2D_CR_TEIE=((uint32_t)0x00000100)
   DMA2D_CR_TWIE=((uint32_t)0x00000400)
   DMA2D_FGCMAR_MA=((uint32_t)0xFFFFFFFF)
   DMA2D_FGCOLR_BLUE=((uint32_t)0x000000FF)
   DMA2D_FGCOLR_GREEN=((uint32_t)0x0000FF00)
   DMA2D_FGCOLR_RED=((uint32_t)0x00FF0000)
   DMA2D_FGMAR_MA=((uint32_t)0xFFFFFFFF)
   DMA2D_FGOR_LO=((uint32_t)0x00003FFF)
   DMA2D_FGPFCCR_ALPHA=((uint32_t)0xFF000000)
   DMA2D_FGPFCCR_AM=((uint32_t)0x00030000)
   DMA2D_FGPFCCR_CCM=((uint32_t)0x00000010)
   DMA2D_FGPFCCR_CM=((uint32_t)0x0000000F)
   DMA2D_FGPFCCR_CS=((uint32_t)0x0000FF00)
   DMA2D_FGPFCCR_START=((uint32_t)0x00000020)
   DMA2D_FLAG_CAE=DMA2D_ISR_CAEIF
   DMA2D_FLAG_CE=DMA2D_ISR_CEIF
   DMA2D_FLAG_CTC=DMA2D_ISR_CTCIF
   DMA2D_FLAG_TC=DMA2D_ISR_TCIF
   DMA2D_FLAG_TE=DMA2D_ISR_TEIF
   DMA2D_FLAG_TW=DMA2D_ISR_TWIF
   DMA2D_IFSR_CCAEIF=((uint32_t)0x00000008)
   DMA2D_IFSR_CCEIF=((uint32_t)0x00000020)
   DMA2D_IFSR_CCTCIF=((uint32_t)0x00000010)
   DMA2D_IFSR_CTCIF=((uint32_t)0x00000002)
   DMA2D_IFSR_CTEIF=((uint32_t)0x00000001)
   DMA2D_IFSR_CTWIF=((uint32_t)0x00000004)
   DMA2D_ISR_CAEIF=((uint32_t)0x00000008)
   DMA2D_ISR_CEIF=((uint32_t)0x00000020)
   DMA2D_ISR_CTCIF=((uint32_t)0x00000010)
   DMA2D_ISR_TCIF=((uint32_t)0x00000002)
   DMA2D_ISR_TEIF=((uint32_t)0x00000001)
   DMA2D_ISR_TWIF=((uint32_t)0x00000004)
   DMA2D_IT_CAE=DMA2D_CR_CAEIE
   DMA2D_IT_CE=DMA2D_CR_CEIE
   DMA2D_IT_CTC=DMA2D_CR_CTCIE
   DMA2D_IT_TC=DMA2D_CR_TCIE
   DMA2D_IT_TE=DMA2D_CR_TEIE
   DMA2D_IT_TW=DMA2D_CR_TWIE
   DMA2D_LINE=DMA2D_NLR_NL
   DMA2D_LWR_LW=((uint32_t)0x0000FFFF)
   DMA2D_M2M=((uint32_t)0x00000000)
   DMA2D_M2M_BLEND=((uint32_t)0x00020000)
   DMA2D_M2M_PFC=((uint32_t)0x00010000)
   DMA2D_NLR_NL=((uint32_t)0x0000FFFF)
   DMA2D_NLR_PL=((uint32_t)0x3FFF0000)
   DMA2D_NO_MODIF_ALPHA=((uint32_t)0x00000000)
   DMA2D_OCOLR_ALPHA_1=((uint32_t)0xFF000000)
   DMA2D_OCOLR_ALPHA_3=((uint32_t)0x00008000)
   DMA2D_OCOLR_ALPHA_4=((uint32_t)0x0000F000)
   DMA2D_OCOLR_BLUE_1=((uint32_t)0x000000FF)
   DMA2D_OCOLR_BLUE_2=((uint32_t)0x0000001F)
   DMA2D_OCOLR_BLUE_3=((uint32_t)0x0000001F)
   DMA2D_OCOLR_BLUE_4=((uint32_t)0x0000000F)
   DMA2D_OCOLR_GREEN_1=((uint32_t)0x0000FF00)
   DMA2D_OCOLR_GREEN_2=((uint32_t)0x000007E0)
   DMA2D_OCOLR_GREEN_3=((uint32_t)0x000003E0)
   DMA2D_OCOLR_GREEN_4=((uint32_t)0x000000F0)
   DMA2D_OCOLR_RED_1=((uint32_t)0x00FF0000)
   DMA2D_OCOLR_RED_2=((uint32_t)0x0000F800)
   DMA2D_OCOLR_RED_3=((uint32_t)0x00007C00)
   DMA2D_OCOLR_RED_4=((uint32_t)0x00000F00)
   DMA2D_OFFSET=DMA2D_FGOR_LO
   DMA2D_OMAR_MA=((uint32_t)0xFFFFFFFF)
   DMA2D_OOR_LO=((uint32_t)0x00003FFF)
   DMA2D_OPFCCR_CM=((uint32_t)0x00000007)
   DMA2D_PIXEL=(DMA2D_NLR_PL >> 16)
   DMA2D_R2M=((uint32_t)0x00030000)
   DMA2D_REPLACE_ALPHA=((uint32_t)0x00000001)
   DMA2D_RGB565=((uint32_t)0x00000002)
   DMA2D_RGB888=((uint32_t)0x00000001)
   DMA2_BASE=(AHB1PERIPH_BASE + 0x6400)
   DMA2_Stream0=((DMA_Stream_TypeDef *) DMA2_Stream0_BASE)
   DMA2_Stream0_BASE=(DMA2_BASE + 0x010)
   DMA2_Stream1=((DMA_Stream_TypeDef *) DMA2_Stream1_BASE)
   DMA2_Stream1_BASE=(DMA2_BASE + 0x028)
   DMA2_Stream2=((DMA_Stream_TypeDef *) DMA2_Stream2_BASE)
   DMA2_Stream2_BASE=(DMA2_BASE + 0x040)
   DMA2_Stream3=((DMA_Stream_TypeDef *) DMA2_Stream3_BASE)
   DMA2_Stream3_BASE=(DMA2_BASE + 0x058)
   DMA2_Stream4=((DMA_Stream_TypeDef *) DMA2_Stream4_BASE)
   DMA2_Stream4_BASE=(DMA2_BASE + 0x070)
   DMA2_Stream5=((DMA_Stream_TypeDef *) DMA2_Stream5_BASE)
   DMA2_Stream5_BASE=(DMA2_BASE + 0x088)
   DMA2_Stream6=((DMA_Stream_TypeDef *) DMA2_Stream6_BASE)
   DMA2_Stream6_BASE=(DMA2_BASE + 0x0A0)
   DMA2_Stream7=((DMA_Stream_TypeDef *) DMA2_Stream7_BASE)
   DMA2_Stream7_BASE=(DMA2_BASE + 0x0B8)
   DMAOMR_CLEAR_MASK=ETH_DMAOMR_CLEAR_MASK
   DMA_CHANNEL_0=((uint32_t)0x00000000)
   DMA_CHANNEL_1=((uint32_t)0x02000000)
   DMA_CHANNEL_2=((uint32_t)0x04000000)
   DMA_CHANNEL_3=((uint32_t)0x06000000)
   DMA_CHANNEL_4=((uint32_t)0x08000000)
   DMA_CHANNEL_5=((uint32_t)0x0A000000)
   DMA_CHANNEL_6=((uint32_t)0x0C000000)
   DMA_CHANNEL_7=((uint32_t)0x0E000000)
   DMA_CIRCULAR=((uint32_t)DMA_SxCR_CIRC)
   DMA_FIFOMODE_DISABLE=((uint32_t)0x00000000)
   DMA_FIFOMODE_ENABLE=((uint32_t)DMA_SxFCR_DMDIS)
   DMA_FIFO_THRESHOLD_1QUARTERFULL=((uint32_t)0x00000000)
   DMA_FIFO_THRESHOLD_3QUARTERSFULL=((uint32_t)DMA_SxFCR_FTH_1)
   DMA_FIFO_THRESHOLD_FULL=((uint32_t)DMA_SxFCR_FTH)
   DMA_FIFO_THRESHOLD_HALFFULL=((uint32_t)DMA_SxFCR_FTH_0)
   DMA_FLAG_DMEIF0_4=((uint32_t)0x00800004)
   DMA_FLAG_DMEIF1_5=((uint32_t)0x00000100)
   DMA_FLAG_DMEIF2_6=((uint32_t)0x00040000)
   DMA_FLAG_DMEIF3_7=((uint32_t)0x01000000)
   DMA_FLAG_FEIF0_4=((uint32_t)0x00800001)
   DMA_FLAG_FEIF1_5=((uint32_t)0x00000040)
   DMA_FLAG_FEIF2_6=((uint32_t)0x00010000)
   DMA_FLAG_FEIF3_7=((uint32_t)0x00400000)
   DMA_FLAG_HTIF0_4=((uint32_t)0x00000010)
   DMA_FLAG_HTIF1_5=((uint32_t)0x00000400)
   DMA_FLAG_HTIF2_6=((uint32_t)0x00100000)
   DMA_FLAG_HTIF3_7=((uint32_t)0x04000000)
   DMA_FLAG_TCIF0_4=((uint32_t)0x00000020)
   DMA_FLAG_TCIF1_5=((uint32_t)0x00000800)
   DMA_FLAG_TCIF2_6=((uint32_t)0x00200000)
   DMA_FLAG_TCIF3_7=((uint32_t)0x08000000)
   DMA_FLAG_TEIF0_4=((uint32_t)0x00000008)
   DMA_FLAG_TEIF1_5=((uint32_t)0x00000200)
   DMA_FLAG_TEIF2_6=((uint32_t)0x00080000)
   DMA_FLAG_TEIF3_7=((uint32_t)0x02000000)
   DMA_HIFCR_CDMEIF4=((uint32_t)0x00000004)
   DMA_HIFCR_CDMEIF5=((uint32_t)0x00000100)
   DMA_HIFCR_CDMEIF6=((uint32_t)0x00040000)
   DMA_HIFCR_CDMEIF7=((uint32_t)0x01000000)
   DMA_HIFCR_CFEIF4=((uint32_t)0x00000001)
   DMA_HIFCR_CFEIF5=((uint32_t)0x00000040)
   DMA_HIFCR_CFEIF6=((uint32_t)0x00010000)
   DMA_HIFCR_CFEIF7=((uint32_t)0x00400000)
   DMA_HIFCR_CHTIF4=((uint32_t)0x00000010)
   DMA_HIFCR_CHTIF5=((uint32_t)0x00000400)
   DMA_HIFCR_CHTIF6=((uint32_t)0x00100000)
   DMA_HIFCR_CHTIF7=((uint32_t)0x04000000)
   DMA_HIFCR_CTCIF4=((uint32_t)0x00000020)
   DMA_HIFCR_CTCIF5=((uint32_t)0x00000800)
   DMA_HIFCR_CTCIF6=((uint32_t)0x00200000)
   DMA_HIFCR_CTCIF7=((uint32_t)0x08000000)
   DMA_HIFCR_CTEIF4=((uint32_t)0x00000008)
   DMA_HIFCR_CTEIF5=((uint32_t)0x00000200)
   DMA_HIFCR_CTEIF6=((uint32_t)0x00080000)
   DMA_HIFCR_CTEIF7=((uint32_t)0x02000000)
   DMA_HISR_DMEIF4=((uint32_t)0x00000004)
   DMA_HISR_DMEIF5=((uint32_t)0x00000100)
   DMA_HISR_DMEIF6=((uint32_t)0x00040000)
   DMA_HISR_DMEIF7=((uint32_t)0x01000000)
   DMA_HISR_FEIF4=((uint32_t)0x00000001)
   DMA_HISR_FEIF5=((uint32_t)0x00000040)
   DMA_HISR_FEIF6=((uint32_t)0x00010000)
   DMA_HISR_FEIF7=((uint32_t)0x00400000)
   DMA_HISR_HTIF4=((uint32_t)0x00000010)
   DMA_HISR_HTIF5=((uint32_t)0x00000400)
   DMA_HISR_HTIF6=((uint32_t)0x00100000)
   DMA_HISR_HTIF7=((uint32_t)0x04000000)
   DMA_HISR_TCIF4=((uint32_t)0x00000020)
   DMA_HISR_TCIF5=((uint32_t)0x00000800)
   DMA_HISR_TCIF6=((uint32_t)0x00200000)
   DMA_HISR_TCIF7=((uint32_t)0x08000000)
   DMA_HISR_TEIF4=((uint32_t)0x00000008)
   DMA_HISR_TEIF5=((uint32_t)0x00000200)
   DMA_HISR_TEIF6=((uint32_t)0x00080000)
   DMA_HISR_TEIF7=((uint32_t)0x02000000)
   DMA_HPP=
   DMA_IT_DME=((uint32_t)DMA_SxCR_DMEIE)
   DMA_IT_FE=((uint32_t)0x00000080)
   DMA_IT_HT=((uint32_t)DMA_SxCR_HTIE)
   DMA_IT_TC=((uint32_t)DMA_SxCR_TCIE)
   DMA_IT_TE=((uint32_t)DMA_SxCR_TEIE)
   DMA_LIFCR_CDMEIF0=((uint32_t)0x00000004)
   DMA_LIFCR_CDMEIF1=((uint32_t)0x00000100)
   DMA_LIFCR_CDMEIF2=((uint32_t)0x00040000)
   DMA_LIFCR_CDMEIF3=((uint32_t)0x01000000)
   DMA_LIFCR_CFEIF0=((uint32_t)0x00000001)
   DMA_LIFCR_CFEIF1=((uint32_t)0x00000040)
   DMA_LIFCR_CFEIF2=((uint32_t)0x00010000)
   DMA_LIFCR_CFEIF3=((uint32_t)0x00400000)
   DMA_LIFCR_CHTIF0=((uint32_t)0x00000010)
   DMA_LIFCR_CHTIF1=((uint32_t)0x00000400)
   DMA_LIFCR_CHTIF2=((uint32_t)0x00100000)
   DMA_LIFCR_CHTIF3=((uint32_t)0x04000000)
   DMA_LIFCR_CTCIF0=((uint32_t)0x00000020)
   DMA_LIFCR_CTCIF1=((uint32_t)0x00000800)
   DMA_LIFCR_CTCIF2=((uint32_t)0x00200000)
   DMA_LIFCR_CTCIF3=((uint32_t)0x08000000)
   DMA_LIFCR_CTEIF0=((uint32_t)0x00000008)
   DMA_LIFCR_CTEIF1=((uint32_t)0x00000200)
   DMA_LIFCR_CTEIF2=((uint32_t)0x00080000)
   DMA_LIFCR_CTEIF3=((uint32_t)0x02000000)
   DMA_LISR_DMEIF0=((uint32_t)0x00000004)
   DMA_LISR_DMEIF1=((uint32_t)0x00000100)
   DMA_LISR_DMEIF2=((uint32_t)0x00040000)
   DMA_LISR_DMEIF3=((uint32_t)0x01000000)
   DMA_LISR_FEIF0=((uint32_t)0x00000001)
   DMA_LISR_FEIF1=((uint32_t)0x00000040)
   DMA_LISR_FEIF2=((uint32_t)0x00010000)
   DMA_LISR_FEIF3=((uint32_t)0x00400000)
   DMA_LISR_HTIF0=((uint32_t)0x00000010)
   DMA_LISR_HTIF1=((uint32_t)0x00000400)
   DMA_LISR_HTIF2=((uint32_t)0x00100000)
   DMA_LISR_HTIF3=((uint32_t)0x04000000)
   DMA_LISR_TCIF0=((uint32_t)0x00000020)
   DMA_LISR_TCIF1=((uint32_t)0x00000800)
   DMA_LISR_TCIF2=((uint32_t)0x00200000)
   DMA_LISR_TCIF3=((uint32_t)0x08000000)
   DMA_LISR_TEIF0=((uint32_t)0x00000008)
   DMA_LISR_TEIF1=((uint32_t)0x00000200)
   DMA_LISR_TEIF2=((uint32_t)0x00080000)
   DMA_LISR_TEIF3=((uint32_t)0x02000000)
   DMA_MBURST_INC16=((uint32_t)DMA_SxCR_MBURST)
   DMA_MBURST_INC4=((uint32_t)DMA_SxCR_MBURST_0)
   DMA_MBURST_INC8=((uint32_t)DMA_SxCR_MBURST_1)
   DMA_MBURST_SINGLE=((uint32_t)0x00000000)
   DMA_MDATAALIGN_BYTE=((uint32_t)0x00000000)
   DMA_MDATAALIGN_HALFWORD=((uint32_t)DMA_SxCR_MSIZE_0)
   DMA_MDATAALIGN_WORD=((uint32_t)DMA_SxCR_MSIZE_1)
   DMA_MEMORY_TO_MEMORY=((uint32_t)DMA_SxCR_DIR_1)
   DMA_MEMORY_TO_PERIPH=((uint32_t)DMA_SxCR_DIR_0)
   DMA_MINC_DISABLE=((uint32_t)0x00000000)
   DMA_MINC_ENABLE=((uint32_t)DMA_SxCR_MINC)
   DMA_NORMAL=((uint32_t)0x00000000)
   DMA_PBURST_INC16=((uint32_t)DMA_SxCR_PBURST)
   DMA_PBURST_INC4=((uint32_t)DMA_SxCR_PBURST_0)
   DMA_PBURST_INC8=((uint32_t)DMA_SxCR_PBURST_1)
   DMA_PBURST_SINGLE=((uint32_t)0x00000000)
   DMA_PDATAALIGN_BYTE=((uint32_t)0x00000000)
   DMA_PDATAALIGN_HALFWORD=((uint32_t)DMA_SxCR_PSIZE_0)
   DMA_PDATAALIGN_WORD=((uint32_t)DMA_SxCR_PSIZE_1)
   DMA_PERIPH_TO_MEMORY=((uint32_t)0x00000000)
   DMA_PFCTRL=((uint32_t)DMA_SxCR_PFCTRL)
   DMA_PINC_DISABLE=((uint32_t)0x00000000)
   DMA_PINC_ENABLE=((uint32_t)DMA_SxCR_PINC)
   DMA_PRIORITY_HIGH=((uint32_t)DMA_SxCR_PL_1)
   DMA_PRIORITY_LOW=((uint32_t)0x00000000)
   DMA_PRIORITY_MEDIUM=((uint32_t)DMA_SxCR_PL_0)
   DMA_PRIORITY_VERY_HIGH=((uint32_t)DMA_SxCR_PL)
   DMA_SxCR_ACK=((uint32_t)0x00100000)
   DMA_SxCR_CHSEL=((uint32_t)0x0E000000)
   DMA_SxCR_CHSEL_0=((uint32_t)0x02000000)
   DMA_SxCR_CHSEL_1=((uint32_t)0x04000000)
   DMA_SxCR_CHSEL_2=((uint32_t)0x08000000)
   DMA_SxCR_CIRC=((uint32_t)0x00000100)
   DMA_SxCR_CT=((uint32_t)0x00080000)
   DMA_SxCR_DBM=((uint32_t)0x00040000)
   DMA_SxCR_DIR=((uint32_t)0x000000C0)
   DMA_SxCR_DIR_0=((uint32_t)0x00000040)
   DMA_SxCR_DIR_1=((uint32_t)0x00000080)
   DMA_SxCR_DMEIE=((uint32_t)0x00000002)
   DMA_SxCR_EN=((uint32_t)0x00000001)
   DMA_SxCR_HTIE=((uint32_t)0x00000008)
   DMA_SxCR_MBURST=((uint32_t)0x01800000)
   DMA_SxCR_MBURST_0=((uint32_t)0x00800000)
   DMA_SxCR_MBURST_1=((uint32_t)0x01000000)
   DMA_SxCR_MINC=((uint32_t)0x00000400)
   DMA_SxCR_MSIZE=((uint32_t)0x00006000)
   DMA_SxCR_MSIZE_0=((uint32_t)0x00002000)
   DMA_SxCR_MSIZE_1=((uint32_t)0x00004000)
   DMA_SxCR_PBURST=((uint32_t)0x00600000)
   DMA_SxCR_PBURST_0=((uint32_t)0x00200000)
   DMA_SxCR_PBURST_1=((uint32_t)0x00400000)
   DMA_SxCR_PFCTRL=((uint32_t)0x00000020)
   DMA_SxCR_PINC=((uint32_t)0x00000200)
   DMA_SxCR_PINCOS=((uint32_t)0x00008000)
   DMA_SxCR_PL=((uint32_t)0x00030000)
   DMA_SxCR_PL_0=((uint32_t)0x00010000)
   DMA_SxCR_PL_1=((uint32_t)0x00020000)
   DMA_SxCR_PSIZE=((uint32_t)0x00001800)
   DMA_SxCR_PSIZE_0=((uint32_t)0x00000800)
   DMA_SxCR_PSIZE_1=((uint32_t)0x00001000)
   DMA_SxCR_TCIE=((uint32_t)0x00000010)
   DMA_SxCR_TEIE=((uint32_t)0x00000004)
   DMA_SxFCR_DMDIS=((uint32_t)0x00000004)
   DMA_SxFCR_FEIE=((uint32_t)0x00000080)
   DMA_SxFCR_FS=((uint32_t)0x00000038)
   DMA_SxFCR_FS_0=((uint32_t)0x00000008)
   DMA_SxFCR_FS_1=((uint32_t)0x00000010)
   DMA_SxFCR_FS_2=((uint32_t)0x00000020)
   DMA_SxFCR_FTH=((uint32_t)0x00000003)
   DMA_SxFCR_FTH_0=((uint32_t)0x00000001)
   DMA_SxFCR_FTH_1=((uint32_t)0x00000002)
   DMA_SxNDT=((uint32_t)0x0000FFFF)
   DMA_SxNDT_0=((uint32_t)0x00000001)
   DMA_SxNDT_10=((uint32_t)0x00000400)
   DMA_SxNDT_11=((uint32_t)0x00000800)
   DMA_SxNDT_12=((uint32_t)0x00001000)
   DMA_SxNDT_13=((uint32_t)0x00002000)
   DMA_SxNDT_14=((uint32_t)0x00004000)
   DMA_SxNDT_15=((uint32_t)0x00008000)
   DMA_SxNDT_1=((uint32_t)0x00000002)
   DMA_SxNDT_2=((uint32_t)0x00000004)
   DMA_SxNDT_3=((uint32_t)0x00000008)
   DMA_SxNDT_4=((uint32_t)0x00000010)
   DMA_SxNDT_5=((uint32_t)0x00000020)
   DMA_SxNDT_6=((uint32_t)0x00000040)
   DMA_SxNDT_7=((uint32_t)0x00000080)
   DMA_SxNDT_8=((uint32_t)0x00000100)
   DMA_SxNDT_9=((uint32_t)0x00000200)
   DOMAIN=1
   DP83848_PHY_ADDRESS=0x01
   DRAGEVENT_HPP=
   DRAWABLE_HPP=
   DSI=((DSI_TypeDef *)DSI_BASE)
   DSI_ACKNOWLEDGE_DISABLE=0
   DSI_ACKNOWLEDGE_ENABLE=DSI_CMCR_ARE
   DSI_AR_DISABLE=0
   DSI_AR_ENABLE=DSI_WCFGR_AR
   DSI_AUTO_CLK_LANE_CTRL_DISABLE=0
   DSI_AUTO_CLK_LANE_CTRL_ENABLE=DSI_CLCR_ACR
   DSI_BASE=(APB2PERIPH_BASE + 0x6C00)
   DSI_CCR_TOCKDIV0=((uint32_t)0x00000100)
   DSI_CCR_TOCKDIV1=((uint32_t)0x00000200)
   DSI_CCR_TOCKDIV2=((uint32_t)0x00000400)
   DSI_CCR_TOCKDIV3=((uint32_t)0x00000800)
   DSI_CCR_TOCKDIV4=((uint32_t)0x00001000)
   DSI_CCR_TOCKDIV5=((uint32_t)0x00002000)
   DSI_CCR_TOCKDIV6=((uint32_t)0x00004000)
   DSI_CCR_TOCKDIV7=((uint32_t)0x00008000)
   DSI_CCR_TOCKDIV=((uint32_t)0x0000FF00)
   DSI_CCR_TXECKDIV0=((uint32_t)0x00000001)
   DSI_CCR_TXECKDIV1=((uint32_t)0x00000002)
   DSI_CCR_TXECKDIV2=((uint32_t)0x00000004)
   DSI_CCR_TXECKDIV3=((uint32_t)0x00000008)
   DSI_CCR_TXECKDIV4=((uint32_t)0x00000010)
   DSI_CCR_TXECKDIV5=((uint32_t)0x00000020)
   DSI_CCR_TXECKDIV6=((uint32_t)0x00000040)
   DSI_CCR_TXECKDIV7=((uint32_t)0x00000080)
   DSI_CCR_TXECKDIV=((uint32_t)0x000000FF)
   DSI_CLCR_ACR=((uint32_t)0x00000002)
   DSI_CLCR_DPCC=((uint32_t)0x00000001)
   DSI_CLOCK_LANE=((uint32_t)0x00000000)
   DSI_CLTCR_HS2LP_TIME0=((uint32_t)0x00010000)
   DSI_CLTCR_HS2LP_TIME1=((uint32_t)0x00020000)
   DSI_CLTCR_HS2LP_TIME2=((uint32_t)0x00040000)
   DSI_CLTCR_HS2LP_TIME3=((uint32_t)0x00080000)
   DSI_CLTCR_HS2LP_TIME4=((uint32_t)0x00100000)
   DSI_CLTCR_HS2LP_TIME5=((uint32_t)0x00200000)
   DSI_CLTCR_HS2LP_TIME6=((uint32_t)0x00400000)
   DSI_CLTCR_HS2LP_TIME7=((uint32_t)0x00800000)
   DSI_CLTCR_HS2LP_TIME8=((uint32_t)0x01000000)
   DSI_CLTCR_HS2LP_TIME9=((uint32_t)0x02000000)
   DSI_CLTCR_HS2LP_TIME=((uint32_t)0x03FF0000)
   DSI_CLTCR_LP2HS_TIME0=((uint32_t)0x00000001)
   DSI_CLTCR_LP2HS_TIME1=((uint32_t)0x00000002)
   DSI_CLTCR_LP2HS_TIME2=((uint32_t)0x00000004)
   DSI_CLTCR_LP2HS_TIME3=((uint32_t)0x00000008)
   DSI_CLTCR_LP2HS_TIME4=((uint32_t)0x00000010)
   DSI_CLTCR_LP2HS_TIME5=((uint32_t)0x00000020)
   DSI_CLTCR_LP2HS_TIME6=((uint32_t)0x00000040)
   DSI_CLTCR_LP2HS_TIME7=((uint32_t)0x00000080)
   DSI_CLTCR_LP2HS_TIME8=((uint32_t)0x00000100)
   DSI_CLTCR_LP2HS_TIME9=((uint32_t)0x00000200)
   DSI_CLTCR_LP2HS_TIME=((uint32_t)0x000003FF)
   DSI_CMCR_ARE=((uint32_t)0x00000002)
   DSI_CMCR_DLWTX=((uint32_t)0x00080000)
   DSI_CMCR_DSR0TX=((uint32_t)0x00040000)
   DSI_CMCR_DSW0TX=((uint32_t)0x00010000)
   DSI_CMCR_DSW1TX=((uint32_t)0x00020000)
   DSI_CMCR_GLWTX=((uint32_t)0x00004000)
   DSI_CMCR_GSR0TX=((uint32_t)0x00000800)
   DSI_CMCR_GSR1TX=((uint32_t)0x00001000)
   DSI_CMCR_GSR2TX=((uint32_t)0x00002000)
   DSI_CMCR_GSW0TX=((uint32_t)0x00000100)
   DSI_CMCR_GSW1TX=((uint32_t)0x00000200)
   DSI_CMCR_GSW2TX=((uint32_t)0x00000400)
   DSI_CMCR_MRDPS=((uint32_t)0x01000000)
   DSI_CMCR_TEARE=((uint32_t)0x00000001)
   DSI_COLOR_MODE_EIGHT=DSI_WCR_COLM
   DSI_COLOR_MODE_FULL=0
   DSI_CR_EN=((uint32_t)0x00000001)
   DSI_DATA_ENABLE_ACTIVE_HIGH=0
   DSI_DATA_ENABLE_ACTIVE_LOW=DSI_LPCR_DEP
   DSI_DATA_LANE0=((uint32_t)0x00000001)
   DSI_DATA_LANE1=((uint32_t)0x00000002)
   DSI_DATA_LANES=((uint32_t)0x00000001)
   DSI_DCS_LONG_PKT_WRITE=((uint32_t)0x00000039)
   DSI_DCS_SHORT_PKT_READ=((uint32_t)0x00000006)
   DSI_DCS_SHORT_PKT_WRITE_P0=((uint32_t)0x00000005)
   DSI_DCS_SHORT_PKT_WRITE_P1=((uint32_t)0x00000015)
   DSI_DISPLAY_OFF=DSI_WCR_SHTDN
   DSI_DISPLAY_ON=0
   DSI_DLTCR_HS2LP_TIME0=((uint32_t)0x01000000)
   DSI_DLTCR_HS2LP_TIME1=((uint32_t)0x02000000)
   DSI_DLTCR_HS2LP_TIME2=((uint32_t)0x04000000)
   DSI_DLTCR_HS2LP_TIME3=((uint32_t)0x08000000)
   DSI_DLTCR_HS2LP_TIME4=((uint32_t)0x10000000)
   DSI_DLTCR_HS2LP_TIME5=((uint32_t)0x20000000)
   DSI_DLTCR_HS2LP_TIME6=((uint32_t)0x40000000)
   DSI_DLTCR_HS2LP_TIME7=((uint32_t)0x80000000)
   DSI_DLTCR_HS2LP_TIME=((uint32_t)0xFF000000)
   DSI_DLTCR_LP2HS_TIME0=((uint32_t)0x00010000)
   DSI_DLTCR_LP2HS_TIME1=((uint32_t)0x00020000)
   DSI_DLTCR_LP2HS_TIME2=((uint32_t)0x00040000)
   DSI_DLTCR_LP2HS_TIME3=((uint32_t)0x00080000)
   DSI_DLTCR_LP2HS_TIME4=((uint32_t)0x00100000)
   DSI_DLTCR_LP2HS_TIME5=((uint32_t)0x00200000)
   DSI_DLTCR_LP2HS_TIME6=((uint32_t)0x00400000)
   DSI_DLTCR_LP2HS_TIME7=((uint32_t)0x00800000)
   DSI_DLTCR_LP2HS_TIME=((uint32_t)0x00FF0000)
   DSI_DLTCR_MRD_TIME0=((uint32_t)0x00000001)
   DSI_DLTCR_MRD_TIME10=((uint32_t)0x00000400)
   DSI_DLTCR_MRD_TIME11=((uint32_t)0x00000800)
   DSI_DLTCR_MRD_TIME12=((uint32_t)0x00001000)
   DSI_DLTCR_MRD_TIME13=((uint32_t)0x00002000)
   DSI_DLTCR_MRD_TIME14=((uint32_t)0x00004000)
   DSI_DLTCR_MRD_TIME1=((uint32_t)0x00000002)
   DSI_DLTCR_MRD_TIME2=((uint32_t)0x00000004)
   DSI_DLTCR_MRD_TIME3=((uint32_t)0x00000008)
   DSI_DLTCR_MRD_TIME4=((uint32_t)0x00000010)
   DSI_DLTCR_MRD_TIME5=((uint32_t)0x00000020)
   DSI_DLTCR_MRD_TIME6=((uint32_t)0x00000040)
   DSI_DLTCR_MRD_TIME7=((uint32_t)0x00000080)
   DSI_DLTCR_MRD_TIME8=((uint32_t)0x00000100)
   DSI_DLTCR_MRD_TIME9=((uint32_t)0x00000200)
   DSI_DLTCR_MRD_TIME=((uint32_t)0x00007FFF)
   DSI_ENTER_IDLE_MODE=0x39
   DSI_ENTER_INVERT_MODE=0x21
   DSI_ENTER_NORMAL_MODE=0x13
   DSI_ENTER_PARTIAL_MODE=0x12
   DSI_ENTER_SLEEP_MODE=0x10
   DSI_EXIT_IDLE_MODE=0x38
   DSI_EXIT_INVERT_MODE=0x20
   DSI_EXIT_SLEEP_MODE=0x11
   DSI_FBTAA_DISABLE=0
   DSI_FBTAA_ENABLE=DSI_VMCR_FBTAAE
   DSI_FIR0_FAE0=((uint32_t)0x00000001)
   DSI_FIR0_FAE10=((uint32_t)0x00000400)
   DSI_FIR0_FAE11=((uint32_t)0x00000800)
   DSI_FIR0_FAE12=((uint32_t)0x00001000)
   DSI_FIR0_FAE13=((uint32_t)0x00002000)
   DSI_FIR0_FAE14=((uint32_t)0x00004000)
   DSI_FIR0_FAE15=((uint32_t)0x00008000)
   DSI_FIR0_FAE1=((uint32_t)0x00000002)
   DSI_FIR0_FAE2=((uint32_t)0x00000004)
   DSI_FIR0_FAE3=((uint32_t)0x00000008)
   DSI_FIR0_FAE4=((uint32_t)0x00000010)
   DSI_FIR0_FAE5=((uint32_t)0x00000020)
   DSI_FIR0_FAE6=((uint32_t)0x00000040)
   DSI_FIR0_FAE7=((uint32_t)0x00000080)
   DSI_FIR0_FAE8=((uint32_t)0x00000100)
   DSI_FIR0_FAE9=((uint32_t)0x00000200)
   DSI_FIR0_FPE0=((uint32_t)0x00010000)
   DSI_FIR0_FPE1=((uint32_t)0x00020000)
   DSI_FIR0_FPE2=((uint32_t)0x00040000)
   DSI_FIR0_FPE3=((uint32_t)0x00080000)
   DSI_FIR0_FPE4=((uint32_t)0x00100000)
   DSI_FIR1_FCRCE=((uint32_t)0x00000010)
   DSI_FIR1_FECCME=((uint32_t)0x00000008)
   DSI_FIR1_FECCSE=((uint32_t)0x00000004)
   DSI_FIR1_FEOTPE=((uint32_t)0x00000040)
   DSI_FIR1_FGCWRE=((uint32_t)0x00000100)
   DSI_FIR1_FGPRDE=((uint32_t)0x00000800)
   DSI_FIR1_FGPRXE=((uint32_t)0x00001000)
   DSI_FIR1_FGPTXE=((uint32_t)0x00000400)
   DSI_FIR1_FGPWRE=((uint32_t)0x00000200)
   DSI_FIR1_FLPWRE=((uint32_t)0x00000080)
   DSI_FIR1_FPSE=((uint32_t)0x00000020)
   DSI_FIR1_FTOHSTX=((uint32_t)0x00000001)
   DSI_FIR1_FTOLPRX=((uint32_t)0x00000002)
   DSI_FLAG_BUSY=DSI_WISR_BUSY
   DSI_FLAG_ER=DSI_WISR_ERIF
   DSI_FLAG_PLLL=DSI_WISR_PLLLIF
   DSI_FLAG_PLLLS=DSI_WISR_PLLLS
   DSI_FLAG_PLLU=DSI_WISR_PLLUIF
   DSI_FLAG_RR=DSI_WISR_RRIF
   DSI_FLAG_RRS=DSI_WISR_RRS
   DSI_FLAG_TE=DSI_WISR_TEIF
   DSI_FLOW_CONTROL_ALL=(DSI_FLOW_CONTROL_CRC_RX | DSI_FLOW_CONTROL_ECC_RX | DSI_FLOW_CONTROL_BTA | DSI_FLOW_CONTROL_EOTP_RX | DSI_FLOW_CONTROL_EOTP_TX)
   DSI_FLOW_CONTROL_BTA=DSI_PCR_BTAE
   DSI_FLOW_CONTROL_CRC_RX=DSI_PCR_CRCRXE
   DSI_FLOW_CONTROL_ECC_RX=DSI_PCR_ECCRXE
   DSI_FLOW_CONTROL_EOTP_RX=DSI_PCR_ETRXE
   DSI_FLOW_CONTROL_EOTP_TX=DSI_PCR_ETTXE
   DSI_GEN_LONG_PKT_WRITE=((uint32_t)0x00000029)
   DSI_GEN_SHORT_PKT_READ_P0=((uint32_t)0x00000004)
   DSI_GEN_SHORT_PKT_READ_P1=((uint32_t)0x00000014)
   DSI_GEN_SHORT_PKT_READ_P2=((uint32_t)0x00000024)
   DSI_GEN_SHORT_PKT_WRITE_P0=((uint32_t)0x00000003)
   DSI_GEN_SHORT_PKT_WRITE_P1=((uint32_t)0x00000013)
   DSI_GEN_SHORT_PKT_WRITE_P2=((uint32_t)0x00000023)
   DSI_GET_3D_CONTROL=0x3F
   DSI_GET_ADDRESS_MODE=0x0B
   DSI_GET_BLUE_CHANNEL=0x08
   DSI_GET_DIAGNOSTIC_RESULT=0x0F
   DSI_GET_DISPLAY_MODE=0x0D
   DSI_GET_GREEN_CHANNEL=0x07
   DSI_GET_PIXEL_FORMAT=0x0C
   DSI_GET_POWER_MODE=0x0A
   DSI_GET_RED_CHANNEL=0x06
   DSI_GET_SCANLINE=0x45
   DSI_GET_SIGNAL_MODE=0x0E
   DSI_GHCR_DT0=((uint32_t)0x00000001)
   DSI_GHCR_DT1=((uint32_t)0x00000002)
   DSI_GHCR_DT2=((uint32_t)0x00000004)
   DSI_GHCR_DT3=((uint32_t)0x00000008)
   DSI_GHCR_DT4=((uint32_t)0x00000010)
   DSI_GHCR_DT5=((uint32_t)0x00000020)
   DSI_GHCR_DT=((uint32_t)0x0000003F)
   DSI_GHCR_VCID0=((uint32_t)0x00000040)
   DSI_GHCR_VCID1=((uint32_t)0x00000080)
   DSI_GHCR_VCID=((uint32_t)0x000000C0)
   DSI_GHCR_WCLSB0=((uint32_t)0x00000100)
   DSI_GHCR_WCLSB1=((uint32_t)0x00000200)
   DSI_GHCR_WCLSB2=((uint32_t)0x00000400)
   DSI_GHCR_WCLSB3=((uint32_t)0x00000800)
   DSI_GHCR_WCLSB4=((uint32_t)0x00001000)
   DSI_GHCR_WCLSB5=((uint32_t)0x00002000)
   DSI_GHCR_WCLSB6=((uint32_t)0x00004000)
   DSI_GHCR_WCLSB7=((uint32_t)0x00008000)
   DSI_GHCR_WCLSB=((uint32_t)0x0000FF00)
   DSI_GHCR_WCMSB0=((uint32_t)0x00010000)
   DSI_GHCR_WCMSB1=((uint32_t)0x00020000)
   DSI_GHCR_WCMSB2=((uint32_t)0x00040000)
   DSI_GHCR_WCMSB3=((uint32_t)0x00080000)
   DSI_GHCR_WCMSB4=((uint32_t)0x00100000)
   DSI_GHCR_WCMSB5=((uint32_t)0x00200000)
   DSI_GHCR_WCMSB6=((uint32_t)0x00400000)
   DSI_GHCR_WCMSB7=((uint32_t)0x00800000)
   DSI_GHCR_WCMSB=((uint32_t)0x00FF0000)
   DSI_GPDR_DATA1=((uint32_t)0x000000FF)
   DSI_GPDR_DATA1_0=((uint32_t)0x00000001)
   DSI_GPDR_DATA1_1=((uint32_t)0x00000002)
   DSI_GPDR_DATA1_2=((uint32_t)0x00000004)
   DSI_GPDR_DATA1_3=((uint32_t)0x00000008)
   DSI_GPDR_DATA1_4=((uint32_t)0x00000010)
   DSI_GPDR_DATA1_5=((uint32_t)0x00000020)
   DSI_GPDR_DATA1_6=((uint32_t)0x00000040)
   DSI_GPDR_DATA1_7=((uint32_t)0x00000080)
   DSI_GPDR_DATA2=((uint32_t)0x0000FF00)
   DSI_GPDR_DATA2_0=((uint32_t)0x00000100)
   DSI_GPDR_DATA2_1=((uint32_t)0x00000200)
   DSI_GPDR_DATA2_2=((uint32_t)0x00000400)
   DSI_GPDR_DATA2_3=((uint32_t)0x00000800)
   DSI_GPDR_DATA2_4=((uint32_t)0x00001000)
   DSI_GPDR_DATA2_5=((uint32_t)0x00002000)
   DSI_GPDR_DATA2_6=((uint32_t)0x00004000)
   DSI_GPDR_DATA2_7=((uint32_t)0x00008000)
   DSI_GPDR_DATA3=((uint32_t)0x00FF0000)
   DSI_GPDR_DATA3_0=((uint32_t)0x00010000)
   DSI_GPDR_DATA3_1=((uint32_t)0x00020000)
   DSI_GPDR_DATA3_2=((uint32_t)0x00040000)
   DSI_GPDR_DATA3_3=((uint32_t)0x00080000)
   DSI_GPDR_DATA3_4=((uint32_t)0x00100000)
   DSI_GPDR_DATA3_5=((uint32_t)0x00200000)
   DSI_GPDR_DATA3_6=((uint32_t)0x00400000)
   DSI_GPDR_DATA3_7=((uint32_t)0x00800000)
   DSI_GPDR_DATA4=((uint32_t)0xFF000000)
   DSI_GPDR_DATA4_0=((uint32_t)0x01000000)
   DSI_GPDR_DATA4_1=((uint32_t)0x02000000)
   DSI_GPDR_DATA4_2=((uint32_t)0x04000000)
   DSI_GPDR_DATA4_3=((uint32_t)0x08000000)
   DSI_GPDR_DATA4_4=((uint32_t)0x10000000)
   DSI_GPDR_DATA4_5=((uint32_t)0x20000000)
   DSI_GPDR_DATA4_6=((uint32_t)0x40000000)
   DSI_GPDR_DATA4_7=((uint32_t)0x80000000)
   DSI_GPSR_CMDFE=((uint32_t)0x00000001)
   DSI_GPSR_CMDFF=((uint32_t)0x00000002)
   DSI_GPSR_PRDFE=((uint32_t)0x00000010)
   DSI_GPSR_PRDFF=((uint32_t)0x00000020)
   DSI_GPSR_PWRFE=((uint32_t)0x00000004)
   DSI_GPSR_PWRFF=((uint32_t)0x00000008)
   DSI_GPSR_RCB=((uint32_t)0x00000040)
   DSI_GVCIDR_VCID0=((uint32_t)0x00000001)
   DSI_GVCIDR_VCID1=((uint32_t)0x00000002)
   DSI_GVCIDR_VCID=((uint32_t)0x00000003)
   DSI_HSYNC_ACTIVE_HIGH=0
   DSI_HSYNC_ACTIVE_LOW=DSI_LPCR_HSP
   DSI_HS_DELAY=((uint32_t)0x00000002)
   DSI_HS_PM_DISABLE=0
   DSI_HS_PM_ENABLE=DSI_TCCR4_PM
   DSI_IER0_AE0IE=((uint32_t)0x00000001)
   DSI_IER0_AE10IE=((uint32_t)0x00000400)
   DSI_IER0_AE11IE=((uint32_t)0x00000800)
   DSI_IER0_AE12IE=((uint32_t)0x00001000)
   DSI_IER0_AE13IE=((uint32_t)0x00002000)
   DSI_IER0_AE14IE=((uint32_t)0x00004000)
   DSI_IER0_AE15IE=((uint32_t)0x00008000)
   DSI_IER0_AE1IE=((uint32_t)0x00000002)
   DSI_IER0_AE2IE=((uint32_t)0x00000004)
   DSI_IER0_AE3IE=((uint32_t)0x00000008)
   DSI_IER0_AE4IE=((uint32_t)0x00000010)
   DSI_IER0_AE5IE=((uint32_t)0x00000020)
   DSI_IER0_AE6IE=((uint32_t)0x00000040)
   DSI_IER0_AE7IE=((uint32_t)0x00000080)
   DSI_IER0_AE8IE=((uint32_t)0x00000100)
   DSI_IER0_AE9IE=((uint32_t)0x00000200)
   DSI_IER0_PE0IE=((uint32_t)0x00010000)
   DSI_IER0_PE1IE=((uint32_t)0x00020000)
   DSI_IER0_PE2IE=((uint32_t)0x00040000)
   DSI_IER0_PE3IE=((uint32_t)0x00080000)
   DSI_IER0_PE4IE=((uint32_t)0x00100000)
   DSI_IER1_CRCEIE=((uint32_t)0x00000010)
   DSI_IER1_ECCMEIE=((uint32_t)0x00000008)
   DSI_IER1_ECCSEIE=((uint32_t)0x00000004)
   DSI_IER1_EOTPEIE=((uint32_t)0x00000040)
   DSI_IER1_GCWREIE=((uint32_t)0x00000100)
   DSI_IER1_GPRDEIE=((uint32_t)0x00000800)
   DSI_IER1_GPRXEIE=((uint32_t)0x00001000)
   DSI_IER1_GPTXEIE=((uint32_t)0x00000400)
   DSI_IER1_GPWREIE=((uint32_t)0x00000200)
   DSI_IER1_LPWREIE=((uint32_t)0x00000080)
   DSI_IER1_PSEIE=((uint32_t)0x00000020)
   DSI_IER1_TOHSTXIE=((uint32_t)0x00000001)
   DSI_IER1_TOLPRXIE=((uint32_t)0x00000002)
   DSI_INVERT_HS_SIGNAL=((uint32_t)0x00000001)
   DSI_ISR0_AE0=((uint32_t)0x00000001)
   DSI_ISR0_AE10=((uint32_t)0x00000400)
   DSI_ISR0_AE11=((uint32_t)0x00000800)
   DSI_ISR0_AE12=((uint32_t)0x00001000)
   DSI_ISR0_AE13=((uint32_t)0x00002000)
   DSI_ISR0_AE14=((uint32_t)0x00004000)
   DSI_ISR0_AE15=((uint32_t)0x00008000)
   DSI_ISR0_AE1=((uint32_t)0x00000002)
   DSI_ISR0_AE2=((uint32_t)0x00000004)
   DSI_ISR0_AE3=((uint32_t)0x00000008)
   DSI_ISR0_AE4=((uint32_t)0x00000010)
   DSI_ISR0_AE5=((uint32_t)0x00000020)
   DSI_ISR0_AE6=((uint32_t)0x00000040)
   DSI_ISR0_AE7=((uint32_t)0x00000080)
   DSI_ISR0_AE8=((uint32_t)0x00000100)
   DSI_ISR0_AE9=((uint32_t)0x00000200)
   DSI_ISR0_PE0=((uint32_t)0x00010000)
   DSI_ISR0_PE1=((uint32_t)0x00020000)
   DSI_ISR0_PE2=((uint32_t)0x00040000)
   DSI_ISR0_PE3=((uint32_t)0x00080000)
   DSI_ISR0_PE4=((uint32_t)0x00100000)
   DSI_ISR1_CRCE=((uint32_t)0x00000010)
   DSI_ISR1_ECCME=((uint32_t)0x00000008)
   DSI_ISR1_ECCSE=((uint32_t)0x00000004)
   DSI_ISR1_EOTPE=((uint32_t)0x00000040)
   DSI_ISR1_GCWRE=((uint32_t)0x00000100)
   DSI_ISR1_GPRDE=((uint32_t)0x00000800)
   DSI_ISR1_GPRXE=((uint32_t)0x00001000)
   DSI_ISR1_GPTXE=((uint32_t)0x00000400)
   DSI_ISR1_GPWRE=((uint32_t)0x00000200)
   DSI_ISR1_LPWRE=((uint32_t)0x00000080)
   DSI_ISR1_PSE=((uint32_t)0x00000020)
   DSI_ISR1_TOHSTX=((uint32_t)0x00000001)
   DSI_ISR1_TOLPRX=((uint32_t)0x00000002)
   DSI_IT_ER=DSI_WIER_ERIE
   DSI_IT_PLLL=DSI_WIER_PLLLIE
   DSI_IT_PLLU=DSI_WIER_PLLUIE
   DSI_IT_RR=DSI_WIER_RRIE
   DSI_IT_TE=DSI_WIER_TEIE
   DSI_LCCCR_COLC0=((uint32_t)0x00000001)
   DSI_LCCCR_COLC1=((uint32_t)0x00000002)
   DSI_LCCCR_COLC2=((uint32_t)0x00000004)
   DSI_LCCCR_COLC3=((uint32_t)0x00000008)
   DSI_LCCCR_COLC=((uint32_t)0x0000000F)
   DSI_LCCCR_LPE=((uint32_t)0x00000100)
   DSI_LCCR_CMDSIZE0=((uint32_t)0x00000001)
   DSI_LCCR_CMDSIZE10=((uint32_t)0x00000400)
   DSI_LCCR_CMDSIZE11=((uint32_t)0x00000800)
   DSI_LCCR_CMDSIZE12=((uint32_t)0x00001000)
   DSI_LCCR_CMDSIZE13=((uint32_t)0x00002000)
   DSI_LCCR_CMDSIZE14=((uint32_t)0x00004000)
   DSI_LCCR_CMDSIZE15=((uint32_t)0x00008000)
   DSI_LCCR_CMDSIZE1=((uint32_t)0x00000002)
   DSI_LCCR_CMDSIZE2=((uint32_t)0x00000004)
   DSI_LCCR_CMDSIZE3=((uint32_t)0x00000008)
   DSI_LCCR_CMDSIZE4=((uint32_t)0x00000010)
   DSI_LCCR_CMDSIZE5=((uint32_t)0x00000020)
   DSI_LCCR_CMDSIZE6=((uint32_t)0x00000040)
   DSI_LCCR_CMDSIZE7=((uint32_t)0x00000080)
   DSI_LCCR_CMDSIZE8=((uint32_t)0x00000100)
   DSI_LCCR_CMDSIZE9=((uint32_t)0x00000200)
   DSI_LCCR_CMDSIZE=((uint32_t)0x0000FFFF)
   DSI_LCOLCR_COLC0=((uint32_t)0x00000001)
   DSI_LCOLCR_COLC1=((uint32_t)0x00000020)
   DSI_LCOLCR_COLC2=((uint32_t)0x00000040)
   DSI_LCOLCR_COLC3=((uint32_t)0x00000080)
   DSI_LCOLCR_COLC=((uint32_t)0x0000000F)
   DSI_LCOLCR_LPE=((uint32_t)0x00000100)
   DSI_LCVCIDR_VCID0=((uint32_t)0x00000001)
   DSI_LCVCIDR_VCID1=((uint32_t)0x00000002)
   DSI_LCVCIDR_VCID=((uint32_t)0x00000003)
   DSI_LOOSELY_PACKED_DISABLE=0
   DSI_LOOSELY_PACKED_ENABLE=DSI_LCOLCR_LPE
   DSI_LPCR_DEP=((uint32_t)0x00000001)
   DSI_LPCR_HSP=((uint32_t)0x00000004)
   DSI_LPCR_VSP=((uint32_t)0x00000002)
   DSI_LPMCCR_LPSIZE0=((uint32_t)0x00010000)
   DSI_LPMCCR_LPSIZE1=((uint32_t)0x00020000)
   DSI_LPMCCR_LPSIZE2=((uint32_t)0x00040000)
   DSI_LPMCCR_LPSIZE3=((uint32_t)0x00080000)
   DSI_LPMCCR_LPSIZE4=((uint32_t)0x00100000)
   DSI_LPMCCR_LPSIZE5=((uint32_t)0x00200000)
   DSI_LPMCCR_LPSIZE6=((uint32_t)0x00400000)
   DSI_LPMCCR_LPSIZE7=((uint32_t)0x00800000)
   DSI_LPMCCR_LPSIZE=((uint32_t)0x00FF0000)
   DSI_LPMCCR_VLPSIZE0=((uint32_t)0x00000001)
   DSI_LPMCCR_VLPSIZE1=((uint32_t)0x00000002)
   DSI_LPMCCR_VLPSIZE2=((uint32_t)0x00000004)
   DSI_LPMCCR_VLPSIZE3=((uint32_t)0x00000008)
   DSI_LPMCCR_VLPSIZE4=((uint32_t)0x00000010)
   DSI_LPMCCR_VLPSIZE5=((uint32_t)0x00000020)
   DSI_LPMCCR_VLPSIZE6=((uint32_t)0x00000040)
   DSI_LPMCCR_VLPSIZE7=((uint32_t)0x00000080)
   DSI_LPMCCR_VLPSIZE=((uint32_t)0x000000FF)
   DSI_LPMCR_LPSIZE0=((uint32_t)0x00010000)
   DSI_LPMCR_LPSIZE1=((uint32_t)0x00020000)
   DSI_LPMCR_LPSIZE2=((uint32_t)0x00040000)
   DSI_LPMCR_LPSIZE3=((uint32_t)0x00080000)
   DSI_LPMCR_LPSIZE4=((uint32_t)0x00100000)
   DSI_LPMCR_LPSIZE5=((uint32_t)0x00200000)
   DSI_LPMCR_LPSIZE6=((uint32_t)0x00400000)
   DSI_LPMCR_LPSIZE7=((uint32_t)0x00800000)
   DSI_LPMCR_LPSIZE=((uint32_t)0x00FF0000)
   DSI_LPMCR_VLPSIZE0=((uint32_t)0x00000001)
   DSI_LPMCR_VLPSIZE1=((uint32_t)0x00000002)
   DSI_LPMCR_VLPSIZE2=((uint32_t)0x00000004)
   DSI_LPMCR_VLPSIZE3=((uint32_t)0x00000008)
   DSI_LPMCR_VLPSIZE4=((uint32_t)0x00000010)
   DSI_LPMCR_VLPSIZE5=((uint32_t)0x00000020)
   DSI_LPMCR_VLPSIZE6=((uint32_t)0x00000040)
   DSI_LPMCR_VLPSIZE7=((uint32_t)0x00000080)
   DSI_LPMCR_VLPSIZE=((uint32_t)0x000000FF)
   DSI_LP_COMMAND_DISABLE=0
   DSI_LP_COMMAND_ENABLE=DSI_VMCR_LPCE
   DSI_LP_DLW_DISABLE=0
   DSI_LP_DLW_ENABLE=DSI_CMCR_DLWTX
   DSI_LP_DSR0P_DISABLE=0
   DSI_LP_DSR0P_ENABLE=DSI_CMCR_DSR0TX
   DSI_LP_DSW0P_DISABLE=0
   DSI_LP_DSW0P_ENABLE=DSI_CMCR_DSW0TX
   DSI_LP_DSW1P_DISABLE=0
   DSI_LP_DSW1P_ENABLE=DSI_CMCR_DSW1TX
   DSI_LP_GLW_DISABLE=0
   DSI_LP_GLW_ENABLE=DSI_CMCR_GLWTX
   DSI_LP_GSR0P_DISABLE=0
   DSI_LP_GSR0P_ENABLE=DSI_CMCR_GSR0TX
   DSI_LP_GSR1P_DISABLE=0
   DSI_LP_GSR1P_ENABLE=DSI_CMCR_GSR1TX
   DSI_LP_GSR2P_DISABLE=0
   DSI_LP_GSR2P_ENABLE=DSI_CMCR_GSR2TX
   DSI_LP_GSW0P_DISABLE=0
   DSI_LP_GSW0P_ENABLE=DSI_CMCR_GSW0TX
   DSI_LP_GSW1P_DISABLE=0
   DSI_LP_GSW1P_ENABLE=DSI_CMCR_GSW1TX
   DSI_LP_GSW2P_DISABLE=0
   DSI_LP_GSW2P_ENABLE=DSI_CMCR_GSW2TX
   DSI_LP_HBP_DISABLE=0
   DSI_LP_HBP_ENABLE=DSI_VMCR_LPHBPE
   DSI_LP_HFP_DISABLE=0
   DSI_LP_HFP_ENABLE=DSI_VMCR_LPHFPE
   DSI_LP_MRDP_DISABLE=0
   DSI_LP_MRDP_ENABLE=DSI_CMCR_MRDPS
   DSI_LP_VACT_DISABLE=0
   DSI_LP_VACT_ENABLE=DSI_VMCR_LPVAE
   DSI_LP_VBP_DISABLE=0
   DSI_LP_VBP_ENABLE=DSI_VMCR_LPVBPE
   DSI_LP_VFP_DISABLE=0
   DSI_LP_VFP_ENABLE=DSI_VMCR_LPVFPE
   DSI_LP_VSYNC_DISABLE=0
   DSI_LP_VSYNC_ENABLE=DSI_VMCR_LPVSAE
   DSI_LVCIDR_VCID0=((uint32_t)0x00000001)
   DSI_LVCIDR_VCID1=((uint32_t)0x00000002)
   DSI_LVCIDR_VCID=((uint32_t)0x00000003)
   DSI_MAX_RETURN_PKT_SIZE=((uint32_t)0x00000037)
   DSI_MCR_CMDM=((uint32_t)0x00000001)
   DSI_NOP=0x00
   DSI_ONE_DATA_LANE=0
   DSI_PCONFR_NL0=((uint32_t)0x00000001)
   DSI_PCONFR_NL1=((uint32_t)0x00000002)
   DSI_PCONFR_NL=((uint32_t)0x00000003)
   DSI_PCONFR_SW_TIME0=((uint32_t)0x00000100)
   DSI_PCONFR_SW_TIME1=((uint32_t)0x00000200)
   DSI_PCONFR_SW_TIME2=((uint32_t)0x00000400)
   DSI_PCONFR_SW_TIME3=((uint32_t)0x00000800)
   DSI_PCONFR_SW_TIME4=((uint32_t)0x00001000)
   DSI_PCONFR_SW_TIME5=((uint32_t)0x00002000)
   DSI_PCONFR_SW_TIME6=((uint32_t)0x00004000)
   DSI_PCONFR_SW_TIME7=((uint32_t)0x00008000)
   DSI_PCONFR_SW_TIME=((uint32_t)0x0000FF00)
   DSI_PCR_BTAE=((uint32_t)0x00000004)
   DSI_PCR_CRCRXE=((uint32_t)0x00000010)
   DSI_PCR_ECCRXE=((uint32_t)0x00000008)
   DSI_PCR_ETRXE=((uint32_t)0x00000002)
   DSI_PCR_ETTXE=((uint32_t)0x00000001)
   DSI_PCTLR_CKE=((uint32_t)0x00000004)
   DSI_PCTLR_DEN=((uint32_t)0x00000002)
   DSI_PLL_IN_DIV1=((uint32_t)0x00000001)
   DSI_PLL_IN_DIV2=((uint32_t)0x00000002)
   DSI_PLL_IN_DIV3=((uint32_t)0x00000003)
   DSI_PLL_IN_DIV4=((uint32_t)0x00000004)
   DSI_PLL_IN_DIV5=((uint32_t)0x00000005)
   DSI_PLL_IN_DIV6=((uint32_t)0x00000006)
   DSI_PLL_IN_DIV7=((uint32_t)0x00000007)
   DSI_PLL_OUT_DIV1=((uint32_t)0x00000000)
   DSI_PLL_OUT_DIV2=((uint32_t)0x00000001)
   DSI_PLL_OUT_DIV4=((uint32_t)0x00000002)
   DSI_PLL_OUT_DIV8=((uint32_t)0x00000003)
   DSI_PSR_PD=((uint32_t)0x00000002)
   DSI_PSR_PSS0=((uint32_t)0x00000010)
   DSI_PSR_PSS1=((uint32_t)0x00000080)
   DSI_PSR_PSSC=((uint32_t)0x00000004)
   DSI_PSR_RUE0=((uint32_t)0x00000040)
   DSI_PSR_UAN0=((uint32_t)0x00000020)
   DSI_PSR_UAN1=((uint32_t)0x00000100)
   DSI_PSR_UANC=((uint32_t)0x00000008)
   DSI_PTTCR_TX_TRIG0=((uint32_t)0x00000001)
   DSI_PTTCR_TX_TRIG1=((uint32_t)0x00000002)
   DSI_PTTCR_TX_TRIG2=((uint32_t)0x00000004)
   DSI_PTTCR_TX_TRIG3=((uint32_t)0x00000008)
   DSI_PTTCR_TX_TRIG=((uint32_t)0x0000000F)
   DSI_PUCR_UECL=((uint32_t)0x00000002)
   DSI_PUCR_UEDL=((uint32_t)0x00000008)
   DSI_PUCR_URCL=((uint32_t)0x00000001)
   DSI_PUCR_URDL=((uint32_t)0x00000004)
   DSI_READ_DDB_CONTINUE=0xA8
   DSI_READ_DDB_START=0xA1
   DSI_READ_MEMORY_CONTINUE=0x3E
   DSI_READ_MEMORY_START=0x2E
   DSI_RGB565=((uint32_t)0x00000000)
   DSI_RGB666=((uint32_t)0x00000003)
   DSI_RGB888=((uint32_t)0x00000005)
   DSI_SET_3D_CONTROL=0x3D
   DSI_SET_ADDRESS_MODE=0x36
   DSI_SET_COLUMN_ADDRESS=0x2A
   DSI_SET_DISPLAY_OFF=0x28
   DSI_SET_DISPLAY_ON=0x29
   DSI_SET_GAMMA_CURVE=0x26
   DSI_SET_PAGE_ADDRESS=0x2B
   DSI_SET_PARTIAL_COLUMNS=0x31
   DSI_SET_PARTIAL_ROWS=0x30
   DSI_SET_PIXEL_FORMAT=0x3A
   DSI_SET_SCROLL_AREA=0x33
   DSI_SET_SCROLL_START=0x37
   DSI_SET_TEAR_OFF=0x34
   DSI_SET_TEAR_ON=0x35
   DSI_SET_TEAR_SCANLINE=0x44
   DSI_SET_VSYNC_TIMING=0x40
   DSI_SLEW_RATE_HSTX=((uint32_t)0x00000000)
   DSI_SLEW_RATE_LPTX=((uint32_t)0x00000001)
   DSI_SOFT_RESET=0x01
   DSI_SWAP_LANE_PINS=((uint32_t)0x00000000)
   DSI_TCCR1_HSTX_TOCNT0=((uint32_t)0x00010000)
   DSI_TCCR1_HSTX_TOCNT10=((uint32_t)0x04000000)
   DSI_TCCR1_HSTX_TOCNT11=((uint32_t)0x08000000)
   DSI_TCCR1_HSTX_TOCNT12=((uint32_t)0x10000000)
   DSI_TCCR1_HSTX_TOCNT13=((uint32_t)0x20000000)
   DSI_TCCR1_HSTX_TOCNT14=((uint32_t)0x40000000)
   DSI_TCCR1_HSTX_TOCNT15=((uint32_t)0x80000000)
   DSI_TCCR1_HSTX_TOCNT1=((uint32_t)0x00020000)
   DSI_TCCR1_HSTX_TOCNT2=((uint32_t)0x00040000)
   DSI_TCCR1_HSTX_TOCNT3=((uint32_t)0x00080000)
   DSI_TCCR1_HSTX_TOCNT4=((uint32_t)0x00100000)
   DSI_TCCR1_HSTX_TOCNT5=((uint32_t)0x00200000)
   DSI_TCCR1_HSTX_TOCNT6=((uint32_t)0x00400000)
   DSI_TCCR1_HSTX_TOCNT7=((uint32_t)0x00800000)
   DSI_TCCR1_HSTX_TOCNT8=((uint32_t)0x01000000)
   DSI_TCCR1_HSTX_TOCNT9=((uint32_t)0x02000000)
   DSI_TCCR1_HSTX_TOCNT=((uint32_t)0xFFFF0000)
   DSI_TCCR1_LPRX_TOCNT0=((uint32_t)0x00000001)
   DSI_TCCR1_LPRX_TOCNT10=((uint32_t)0x00000400)
   DSI_TCCR1_LPRX_TOCNT11=((uint32_t)0x00000800)
   DSI_TCCR1_LPRX_TOCNT12=((uint32_t)0x00001000)
   DSI_TCCR1_LPRX_TOCNT13=((uint32_t)0x00002000)
   DSI_TCCR1_LPRX_TOCNT14=((uint32_t)0x00004000)
   DSI_TCCR1_LPRX_TOCNT15=((uint32_t)0x00008000)
   DSI_TCCR1_LPRX_TOCNT1=((uint32_t)0x00000002)
   DSI_TCCR1_LPRX_TOCNT2=((uint32_t)0x00000004)
   DSI_TCCR1_LPRX_TOCNT3=((uint32_t)0x00000008)
   DSI_TCCR1_LPRX_TOCNT4=((uint32_t)0x00000010)
   DSI_TCCR1_LPRX_TOCNT5=((uint32_t)0x00000020)
   DSI_TCCR1_LPRX_TOCNT6=((uint32_t)0x00000040)
   DSI_TCCR1_LPRX_TOCNT7=((uint32_t)0x00000080)
   DSI_TCCR1_LPRX_TOCNT8=((uint32_t)0x00000100)
   DSI_TCCR1_LPRX_TOCNT9=((uint32_t)0x00000200)
   DSI_TCCR1_LPRX_TOCNT=((uint32_t)0x0000FFFF)
   DSI_TCCR2_HSRD_TOCNT0=((uint32_t)0x00000001)
   DSI_TCCR2_HSRD_TOCNT10=((uint32_t)0x00000400)
   DSI_TCCR2_HSRD_TOCNT11=((uint32_t)0x00000800)
   DSI_TCCR2_HSRD_TOCNT12=((uint32_t)0x00001000)
   DSI_TCCR2_HSRD_TOCNT13=((uint32_t)0x00002000)
   DSI_TCCR2_HSRD_TOCNT14=((uint32_t)0x00004000)
   DSI_TCCR2_HSRD_TOCNT15=((uint32_t)0x00008000)
   DSI_TCCR2_HSRD_TOCNT1=((uint32_t)0x00000002)
   DSI_TCCR2_HSRD_TOCNT2=((uint32_t)0x00000004)
   DSI_TCCR2_HSRD_TOCNT3=((uint32_t)0x00000008)
   DSI_TCCR2_HSRD_TOCNT4=((uint32_t)0x00000010)
   DSI_TCCR2_HSRD_TOCNT5=((uint32_t)0x00000020)
   DSI_TCCR2_HSRD_TOCNT6=((uint32_t)0x00000040)
   DSI_TCCR2_HSRD_TOCNT7=((uint32_t)0x00000080)
   DSI_TCCR2_HSRD_TOCNT8=((uint32_t)0x00000100)
   DSI_TCCR2_HSRD_TOCNT9=((uint32_t)0x00000200)
   DSI_TCCR2_HSRD_TOCNT=((uint32_t)0x0000FFFF)
   DSI_TCCR3_LPRD_TOCNT0=((uint32_t)0x00000001)
   DSI_TCCR3_LPRD_TOCNT10=((uint32_t)0x00000400)
   DSI_TCCR3_LPRD_TOCNT11=((uint32_t)0x00000800)
   DSI_TCCR3_LPRD_TOCNT12=((uint32_t)0x00001000)
   DSI_TCCR3_LPRD_TOCNT13=((uint32_t)0x00002000)
   DSI_TCCR3_LPRD_TOCNT14=((uint32_t)0x00004000)
   DSI_TCCR3_LPRD_TOCNT15=((uint32_t)0x00008000)
   DSI_TCCR3_LPRD_TOCNT1=((uint32_t)0x00000002)
   DSI_TCCR3_LPRD_TOCNT2=((uint32_t)0x00000004)
   DSI_TCCR3_LPRD_TOCNT3=((uint32_t)0x00000008)
   DSI_TCCR3_LPRD_TOCNT4=((uint32_t)0x00000010)
   DSI_TCCR3_LPRD_TOCNT5=((uint32_t)0x00000020)
   DSI_TCCR3_LPRD_TOCNT6=((uint32_t)0x00000040)
   DSI_TCCR3_LPRD_TOCNT7=((uint32_t)0x00000080)
   DSI_TCCR3_LPRD_TOCNT8=((uint32_t)0x00000100)
   DSI_TCCR3_LPRD_TOCNT9=((uint32_t)0x00000200)
   DSI_TCCR3_LPRD_TOCNT=((uint32_t)0x0000FFFF)
   DSI_TCCR4_HSWR_TOCNT0=((uint32_t)0x00000001)
   DSI_TCCR4_HSWR_TOCNT10=((uint32_t)0x00000400)
   DSI_TCCR4_HSWR_TOCNT11=((uint32_t)0x00000800)
   DSI_TCCR4_HSWR_TOCNT12=((uint32_t)0x00001000)
   DSI_TCCR4_HSWR_TOCNT13=((uint32_t)0x00002000)
   DSI_TCCR4_HSWR_TOCNT14=((uint32_t)0x00004000)
   DSI_TCCR4_HSWR_TOCNT15=((uint32_t)0x00008000)
   DSI_TCCR4_HSWR_TOCNT1=((uint32_t)0x00000002)
   DSI_TCCR4_HSWR_TOCNT2=((uint32_t)0x00000004)
   DSI_TCCR4_HSWR_TOCNT3=((uint32_t)0x00000008)
   DSI_TCCR4_HSWR_TOCNT4=((uint32_t)0x00000010)
   DSI_TCCR4_HSWR_TOCNT5=((uint32_t)0x00000020)
   DSI_TCCR4_HSWR_TOCNT6=((uint32_t)0x00000040)
   DSI_TCCR4_HSWR_TOCNT7=((uint32_t)0x00000080)
   DSI_TCCR4_HSWR_TOCNT8=((uint32_t)0x00000100)
   DSI_TCCR4_HSWR_TOCNT9=((uint32_t)0x00000200)
   DSI_TCCR4_HSWR_TOCNT=((uint32_t)0x0000FFFF)
   DSI_TCCR4_PM=((uint32_t)0x01000000)
   DSI_TCCR5_LPWR_TOCNT0=((uint32_t)0x00000001)
   DSI_TCCR5_LPWR_TOCNT10=((uint32_t)0x00000400)
   DSI_TCCR5_LPWR_TOCNT11=((uint32_t)0x00000800)
   DSI_TCCR5_LPWR_TOCNT12=((uint32_t)0x00001000)
   DSI_TCCR5_LPWR_TOCNT13=((uint32_t)0x00002000)
   DSI_TCCR5_LPWR_TOCNT14=((uint32_t)0x00004000)
   DSI_TCCR5_LPWR_TOCNT15=((uint32_t)0x00008000)
   DSI_TCCR5_LPWR_TOCNT1=((uint32_t)0x00000002)
   DSI_TCCR5_LPWR_TOCNT2=((uint32_t)0x00000004)
   DSI_TCCR5_LPWR_TOCNT3=((uint32_t)0x00000008)
   DSI_TCCR5_LPWR_TOCNT4=((uint32_t)0x00000010)
   DSI_TCCR5_LPWR_TOCNT5=((uint32_t)0x00000020)
   DSI_TCCR5_LPWR_TOCNT6=((uint32_t)0x00000040)
   DSI_TCCR5_LPWR_TOCNT7=((uint32_t)0x00000080)
   DSI_TCCR5_LPWR_TOCNT8=((uint32_t)0x00000100)
   DSI_TCCR5_LPWR_TOCNT9=((uint32_t)0x00000200)
   DSI_TCCR5_LPWR_TOCNT=((uint32_t)0x0000FFFF)
   DSI_TCCR6_BTA_TOCNT0=((uint32_t)0x00000001)
   DSI_TCCR6_BTA_TOCNT10=((uint32_t)0x00000400)
   DSI_TCCR6_BTA_TOCNT11=((uint32_t)0x00000800)
   DSI_TCCR6_BTA_TOCNT12=((uint32_t)0x00001000)
   DSI_TCCR6_BTA_TOCNT13=((uint32_t)0x00002000)
   DSI_TCCR6_BTA_TOCNT14=((uint32_t)0x00004000)
   DSI_TCCR6_BTA_TOCNT15=((uint32_t)0x00008000)
   DSI_TCCR6_BTA_TOCNT1=((uint32_t)0x00000002)
   DSI_TCCR6_BTA_TOCNT2=((uint32_t)0x00000004)
   DSI_TCCR6_BTA_TOCNT3=((uint32_t)0x00000008)
   DSI_TCCR6_BTA_TOCNT4=((uint32_t)0x00000010)
   DSI_TCCR6_BTA_TOCNT5=((uint32_t)0x00000020)
   DSI_TCCR6_BTA_TOCNT6=((uint32_t)0x00000040)
   DSI_TCCR6_BTA_TOCNT7=((uint32_t)0x00000080)
   DSI_TCCR6_BTA_TOCNT8=((uint32_t)0x00000100)
   DSI_TCCR6_BTA_TOCNT9=((uint32_t)0x00000200)
   DSI_TCCR6_BTA_TOCNT=((uint32_t)0x0000FFFF)
   DSI_TCLK_POST=((uint32_t)0x00000000)
   DSI_TCLK_PREPARE=((uint32_t)0x00000008)
   DSI_TCLK_ZERO=((uint32_t)0x00000007)
   DSI_TDCCR_3DF0=((uint32_t)0x00000004)
   DSI_TDCCR_3DF1=((uint32_t)0x00000008)
   DSI_TDCCR_3DF=((uint32_t)0x0000000C)
   DSI_TDCCR_3DM0=((uint32_t)0x00000001)
   DSI_TDCCR_3DM1=((uint32_t)0x00000002)
   DSI_TDCCR_3DM=((uint32_t)0x00000003)
   DSI_TDCCR_RF=((uint32_t)0x00000020)
   DSI_TDCCR_S3DC=((uint32_t)0x00010000)
   DSI_TDCCR_SVS=((uint32_t)0x00000010)
   DSI_TDCR_3DF0=((uint32_t)0x00000004)
   DSI_TDCR_3DF1=((uint32_t)0x00000008)
   DSI_TDCR_3DF=((uint32_t)0x0000000C)
   DSI_TDCR_3DM0=((uint32_t)0x00000001)
   DSI_TDCR_3DM1=((uint32_t)0x00000002)
   DSI_TDCR_3DM=((uint32_t)0x00000003)
   DSI_TDCR_RF=((uint32_t)0x00000020)
   DSI_TDCR_S3DC=((uint32_t)0x00010000)
   DSI_TDCR_SVS=((uint32_t)0x00000010)
   DSI_TE_ACKNOWLEDGE_DISABLE=0
   DSI_TE_ACKNOWLEDGE_ENABLE=DSI_CMCR_TEARE
   DSI_TE_DSILINK=0
   DSI_TE_EXTERNAL=DSI_WCFGR_TESRC
   DSI_TE_FALLING_EDGE=DSI_WCFGR_TEPOL
   DSI_TE_RISING_EDGE=0
   DSI_THS_EXIT=((uint32_t)0x00000002)
   DSI_THS_PREPARE=((uint32_t)0x00000006)
   DSI_THS_TRAIL=((uint32_t)0x00000005)
   DSI_THS_ZERO=((uint32_t)0x00000004)
   DSI_TLPX_CLK=((uint32_t)0x00000001)
   DSI_TLPX_DATA=((uint32_t)0x00000003)
   DSI_TWO_DATA_LANES=1
   DSI_VCCCR_NUMC0=((uint32_t)0x00000001)
   DSI_VCCCR_NUMC10=((uint32_t)0x00000400)
   DSI_VCCCR_NUMC11=((uint32_t)0x00000800)
   DSI_VCCCR_NUMC12=((uint32_t)0x00001000)
   DSI_VCCCR_NUMC1=((uint32_t)0x00000002)
   DSI_VCCCR_NUMC2=((uint32_t)0x00000004)
   DSI_VCCCR_NUMC3=((uint32_t)0x00000008)
   DSI_VCCCR_NUMC4=((uint32_t)0x00000010)
   DSI_VCCCR_NUMC5=((uint32_t)0x00000020)
   DSI_VCCCR_NUMC6=((uint32_t)0x00000040)
   DSI_VCCCR_NUMC7=((uint32_t)0x00000080)
   DSI_VCCCR_NUMC8=((uint32_t)0x00000100)
   DSI_VCCCR_NUMC9=((uint32_t)0x00000200)
   DSI_VCCCR_NUMC=((uint32_t)0x00001FFF)
   DSI_VCCR_NUMC0=((uint32_t)0x00000001)
   DSI_VCCR_NUMC10=((uint32_t)0x00000400)
   DSI_VCCR_NUMC11=((uint32_t)0x00000800)
   DSI_VCCR_NUMC12=((uint32_t)0x00001000)
   DSI_VCCR_NUMC1=((uint32_t)0x00000002)
   DSI_VCCR_NUMC2=((uint32_t)0x00000004)
   DSI_VCCR_NUMC3=((uint32_t)0x00000008)
   DSI_VCCR_NUMC4=((uint32_t)0x00000010)
   DSI_VCCR_NUMC5=((uint32_t)0x00000020)
   DSI_VCCR_NUMC6=((uint32_t)0x00000040)
   DSI_VCCR_NUMC7=((uint32_t)0x00000080)
   DSI_VCCR_NUMC8=((uint32_t)0x00000100)
   DSI_VCCR_NUMC9=((uint32_t)0x00000200)
   DSI_VCCR_NUMC=((uint32_t)0x00001FFF)
   DSI_VHBPCCR_HBP0=((uint32_t)0x00000001)
   DSI_VHBPCCR_HBP10=((uint32_t)0x00000400)
   DSI_VHBPCCR_HBP11=((uint32_t)0x00000800)
   DSI_VHBPCCR_HBP1=((uint32_t)0x00000002)
   DSI_VHBPCCR_HBP2=((uint32_t)0x00000004)
   DSI_VHBPCCR_HBP3=((uint32_t)0x00000008)
   DSI_VHBPCCR_HBP4=((uint32_t)0x00000010)
   DSI_VHBPCCR_HBP5=((uint32_t)0x00000020)
   DSI_VHBPCCR_HBP6=((uint32_t)0x00000040)
   DSI_VHBPCCR_HBP7=((uint32_t)0x00000080)
   DSI_VHBPCCR_HBP8=((uint32_t)0x00000100)
   DSI_VHBPCCR_HBP9=((uint32_t)0x00000200)
   DSI_VHBPCCR_HBP=((uint32_t)0x00000FFF)
   DSI_VHBPCR_HBP0=((uint32_t)0x00000001)
   DSI_VHBPCR_HBP10=((uint32_t)0x00000400)
   DSI_VHBPCR_HBP11=((uint32_t)0x00000800)
   DSI_VHBPCR_HBP1=((uint32_t)0x00000002)
   DSI_VHBPCR_HBP2=((uint32_t)0x00000004)
   DSI_VHBPCR_HBP3=((uint32_t)0x00000008)
   DSI_VHBPCR_HBP4=((uint32_t)0x00000010)
   DSI_VHBPCR_HBP5=((uint32_t)0x00000020)
   DSI_VHBPCR_HBP6=((uint32_t)0x00000040)
   DSI_VHBPCR_HBP7=((uint32_t)0x00000080)
   DSI_VHBPCR_HBP8=((uint32_t)0x00000100)
   DSI_VHBPCR_HBP9=((uint32_t)0x00000200)
   DSI_VHBPCR_HBP=((uint32_t)0x00000FFF)
   DSI_VHSACCR_HSA0=((uint32_t)0x00000001)
   DSI_VHSACCR_HSA10=((uint32_t)0x00000400)
   DSI_VHSACCR_HSA11=((uint32_t)0x00000800)
   DSI_VHSACCR_HSA1=((uint32_t)0x00000002)
   DSI_VHSACCR_HSA2=((uint32_t)0x00000004)
   DSI_VHSACCR_HSA3=((uint32_t)0x00000008)
   DSI_VHSACCR_HSA4=((uint32_t)0x00000010)
   DSI_VHSACCR_HSA5=((uint32_t)0x00000020)
   DSI_VHSACCR_HSA6=((uint32_t)0x00000040)
   DSI_VHSACCR_HSA7=((uint32_t)0x00000080)
   DSI_VHSACCR_HSA8=((uint32_t)0x00000100)
   DSI_VHSACCR_HSA9=((uint32_t)0x00000200)
   DSI_VHSACCR_HSA=((uint32_t)0x00000FFF)
   DSI_VHSACR_HSA0=((uint32_t)0x00000001)
   DSI_VHSACR_HSA10=((uint32_t)0x00000400)
   DSI_VHSACR_HSA11=((uint32_t)0x00000800)
   DSI_VHSACR_HSA1=((uint32_t)0x00000002)
   DSI_VHSACR_HSA2=((uint32_t)0x00000004)
   DSI_VHSACR_HSA3=((uint32_t)0x00000008)
   DSI_VHSACR_HSA4=((uint32_t)0x00000010)
   DSI_VHSACR_HSA5=((uint32_t)0x00000020)
   DSI_VHSACR_HSA6=((uint32_t)0x00000040)
   DSI_VHSACR_HSA7=((uint32_t)0x00000080)
   DSI_VHSACR_HSA8=((uint32_t)0x00000100)
   DSI_VHSACR_HSA9=((uint32_t)0x00000200)
   DSI_VHSACR_HSA=((uint32_t)0x00000FFF)
   DSI_VID_MODE_BURST=2
   DSI_VID_MODE_NB_EVENTS=1
   DSI_VID_MODE_NB_PULSES=0
   DSI_VLCCR_HLINE0=((uint32_t)0x00000001)
   DSI_VLCCR_HLINE10=((uint32_t)0x00000400)
   DSI_VLCCR_HLINE11=((uint32_t)0x00000800)
   DSI_VLCCR_HLINE12=((uint32_t)0x00001000)
   DSI_VLCCR_HLINE13=((uint32_t)0x00002000)
   DSI_VLCCR_HLINE14=((uint32_t)0x00004000)
   DSI_VLCCR_HLINE1=((uint32_t)0x00000002)
   DSI_VLCCR_HLINE2=((uint32_t)0x00000004)
   DSI_VLCCR_HLINE3=((uint32_t)0x00000008)
   DSI_VLCCR_HLINE4=((uint32_t)0x00000010)
   DSI_VLCCR_HLINE5=((uint32_t)0x00000020)
   DSI_VLCCR_HLINE6=((uint32_t)0x00000040)
   DSI_VLCCR_HLINE7=((uint32_t)0x00000080)
   DSI_VLCCR_HLINE8=((uint32_t)0x00000100)
   DSI_VLCCR_HLINE9=((uint32_t)0x00000200)
   DSI_VLCCR_HLINE=((uint32_t)0x00007FFF)
   DSI_VLCR_HLINE0=((uint32_t)0x00000001)
   DSI_VLCR_HLINE10=((uint32_t)0x00000400)
   DSI_VLCR_HLINE11=((uint32_t)0x00000800)
   DSI_VLCR_HLINE12=((uint32_t)0x00001000)
   DSI_VLCR_HLINE13=((uint32_t)0x00002000)
   DSI_VLCR_HLINE14=((uint32_t)0x00004000)
   DSI_VLCR_HLINE1=((uint32_t)0x00000002)
   DSI_VLCR_HLINE2=((uint32_t)0x00000004)
   DSI_VLCR_HLINE3=((uint32_t)0x00000008)
   DSI_VLCR_HLINE4=((uint32_t)0x00000010)
   DSI_VLCR_HLINE5=((uint32_t)0x00000020)
   DSI_VLCR_HLINE6=((uint32_t)0x00000040)
   DSI_VLCR_HLINE7=((uint32_t)0x00000080)
   DSI_VLCR_HLINE8=((uint32_t)0x00000100)
   DSI_VLCR_HLINE9=((uint32_t)0x00000200)
   DSI_VLCR_HLINE=((uint32_t)0x00007FFF)
   DSI_VMCCR_FBTAAE=((uint32_t)0x00004000)
   DSI_VMCCR_LPCE=((uint32_t)0x00008000)
   DSI_VMCCR_LPHBPE=((uint32_t)0x00001000)
   DSI_VMCCR_LPHFE=((uint32_t)0x00002000)
   DSI_VMCCR_LPVAE=((uint32_t)0x00000800)
   DSI_VMCCR_LPVBPE=((uint32_t)0x00000200)
   DSI_VMCCR_LPVFPE=((uint32_t)0x00000400)
   DSI_VMCCR_LPVSAE=((uint32_t)0x00000100)
   DSI_VMCCR_VMT0=((uint32_t)0x00000001)
   DSI_VMCCR_VMT1=((uint32_t)0x00000002)
   DSI_VMCCR_VMT=((uint32_t)0x00000003)
   DSI_VMCR_FBTAAE=((uint32_t)0x00004000)
   DSI_VMCR_LPCE=((uint32_t)0x00008000)
   DSI_VMCR_LPHBPE=((uint32_t)0x00001000)
   DSI_VMCR_LPHFPE=((uint32_t)0x00002000)
   DSI_VMCR_LPVAE=((uint32_t)0x00000800)
   DSI_VMCR_LPVBPE=((uint32_t)0x00000200)
   DSI_VMCR_LPVFPE=((uint32_t)0x00000400)
   DSI_VMCR_LPVSAE=((uint32_t)0x00000100)
   DSI_VMCR_PGE=((uint32_t)0x00010000)
   DSI_VMCR_PGM=((uint32_t)0x00100000)
   DSI_VMCR_PGO=((uint32_t)0x01000000)
   DSI_VMCR_VMT0=((uint32_t)0x00000001)
   DSI_VMCR_VMT1=((uint32_t)0x00000002)
   DSI_VMCR_VMT=((uint32_t)0x00000003)
   DSI_VNPCCR_NPSIZE0=((uint32_t)0x00000001)
   DSI_VNPCCR_NPSIZE10=((uint32_t)0x00000400)
   DSI_VNPCCR_NPSIZE11=((uint32_t)0x00000800)
   DSI_VNPCCR_NPSIZE12=((uint32_t)0x00001000)
   DSI_VNPCCR_NPSIZE1=((uint32_t)0x00000002)
   DSI_VNPCCR_NPSIZE2=((uint32_t)0x00000004)
   DSI_VNPCCR_NPSIZE3=((uint32_t)0x00000008)
   DSI_VNPCCR_NPSIZE4=((uint32_t)0x00000010)
   DSI_VNPCCR_NPSIZE5=((uint32_t)0x00000020)
   DSI_VNPCCR_NPSIZE6=((uint32_t)0x00000040)
   DSI_VNPCCR_NPSIZE7=((uint32_t)0x00000080)
   DSI_VNPCCR_NPSIZE8=((uint32_t)0x00000100)
   DSI_VNPCCR_NPSIZE9=((uint32_t)0x00000200)
   DSI_VNPCCR_NPSIZE=((uint32_t)0x00001FFF)
   DSI_VNPCR_NPSIZE0=((uint32_t)0x00000001)
   DSI_VNPCR_NPSIZE10=((uint32_t)0x00000400)
   DSI_VNPCR_NPSIZE11=((uint32_t)0x00000800)
   DSI_VNPCR_NPSIZE12=((uint32_t)0x00001000)
   DSI_VNPCR_NPSIZE1=((uint32_t)0x00000002)
   DSI_VNPCR_NPSIZE2=((uint32_t)0x00000004)
   DSI_VNPCR_NPSIZE3=((uint32_t)0x00000008)
   DSI_VNPCR_NPSIZE4=((uint32_t)0x00000010)
   DSI_VNPCR_NPSIZE5=((uint32_t)0x00000020)
   DSI_VNPCR_NPSIZE6=((uint32_t)0x00000040)
   DSI_VNPCR_NPSIZE7=((uint32_t)0x00000080)
   DSI_VNPCR_NPSIZE8=((uint32_t)0x00000100)
   DSI_VNPCR_NPSIZE9=((uint32_t)0x00000200)
   DSI_VNPCR_NPSIZE=((uint32_t)0x00001FFF)
   DSI_VPCCR_VPSIZE0=((uint32_t)0x00000001)
   DSI_VPCCR_VPSIZE10=((uint32_t)0x00000400)
   DSI_VPCCR_VPSIZE11=((uint32_t)0x00000800)
   DSI_VPCCR_VPSIZE12=((uint32_t)0x00001000)
   DSI_VPCCR_VPSIZE13=((uint32_t)0x00002000)
   DSI_VPCCR_VPSIZE1=((uint32_t)0x00000002)
   DSI_VPCCR_VPSIZE2=((uint32_t)0x00000004)
   DSI_VPCCR_VPSIZE3=((uint32_t)0x00000008)
   DSI_VPCCR_VPSIZE4=((uint32_t)0x00000010)
   DSI_VPCCR_VPSIZE5=((uint32_t)0x00000020)
   DSI_VPCCR_VPSIZE6=((uint32_t)0x00000040)
   DSI_VPCCR_VPSIZE7=((uint32_t)0x00000080)
   DSI_VPCCR_VPSIZE8=((uint32_t)0x00000100)
   DSI_VPCCR_VPSIZE9=((uint32_t)0x00000200)
   DSI_VPCCR_VPSIZE=((uint32_t)0x00003FFF)
   DSI_VPCR_VPSIZE0=((uint32_t)0x00000001)
   DSI_VPCR_VPSIZE10=((uint32_t)0x00000400)
   DSI_VPCR_VPSIZE11=((uint32_t)0x00000800)
   DSI_VPCR_VPSIZE12=((uint32_t)0x00001000)
   DSI_VPCR_VPSIZE13=((uint32_t)0x00002000)
   DSI_VPCR_VPSIZE1=((uint32_t)0x00000002)
   DSI_VPCR_VPSIZE2=((uint32_t)0x00000004)
   DSI_VPCR_VPSIZE3=((uint32_t)0x00000008)
   DSI_VPCR_VPSIZE4=((uint32_t)0x00000010)
   DSI_VPCR_VPSIZE5=((uint32_t)0x00000020)
   DSI_VPCR_VPSIZE6=((uint32_t)0x00000040)
   DSI_VPCR_VPSIZE7=((uint32_t)0x00000080)
   DSI_VPCR_VPSIZE8=((uint32_t)0x00000100)
   DSI_VPCR_VPSIZE9=((uint32_t)0x00000200)
   DSI_VPCR_VPSIZE=((uint32_t)0x00003FFF)
   DSI_VR=((uint32_t)0x3133302A)
   DSI_VSCR_EN=((uint32_t)0x00000001)
   DSI_VSCR_UR=((uint32_t)0x00000100)
   DSI_VSYNC_ACTIVE_HIGH=0
   DSI_VSYNC_ACTIVE_LOW=DSI_LPCR_VSP
   DSI_VSYNC_FALLING=0
   DSI_VSYNC_RISING=DSI_WCFGR_VSPOL
   DSI_VVACCR_VA0=((uint32_t)0x00000001)
   DSI_VVACCR_VA10=((uint32_t)0x00000400)
   DSI_VVACCR_VA11=((uint32_t)0x00000800)
   DSI_VVACCR_VA12=((uint32_t)0x00001000)
   DSI_VVACCR_VA13=((uint32_t)0x00002000)
   DSI_VVACCR_VA1=((uint32_t)0x00000002)
   DSI_VVACCR_VA2=((uint32_t)0x00000004)
   DSI_VVACCR_VA3=((uint32_t)0x00000008)
   DSI_VVACCR_VA4=((uint32_t)0x00000010)
   DSI_VVACCR_VA5=((uint32_t)0x00000020)
   DSI_VVACCR_VA6=((uint32_t)0x00000040)
   DSI_VVACCR_VA7=((uint32_t)0x00000080)
   DSI_VVACCR_VA8=((uint32_t)0x00000100)
   DSI_VVACCR_VA9=((uint32_t)0x00000200)
   DSI_VVACCR_VA=((uint32_t)0x00003FFF)
   DSI_VVACR_VA0=((uint32_t)0x00000001)
   DSI_VVACR_VA10=((uint32_t)0x00000400)
   DSI_VVACR_VA11=((uint32_t)0x00000800)
   DSI_VVACR_VA12=((uint32_t)0x00001000)
   DSI_VVACR_VA13=((uint32_t)0x00002000)
   DSI_VVACR_VA1=((uint32_t)0x00000002)
   DSI_VVACR_VA2=((uint32_t)0x00000004)
   DSI_VVACR_VA3=((uint32_t)0x00000008)
   DSI_VVACR_VA4=((uint32_t)0x00000010)
   DSI_VVACR_VA5=((uint32_t)0x00000020)
   DSI_VVACR_VA6=((uint32_t)0x00000040)
   DSI_VVACR_VA7=((uint32_t)0x00000080)
   DSI_VVACR_VA8=((uint32_t)0x00000100)
   DSI_VVACR_VA9=((uint32_t)0x00000200)
   DSI_VVACR_VA=((uint32_t)0x00003FFF)
   DSI_VVBPCCR_VBP0=((uint32_t)0x00000001)
   DSI_VVBPCCR_VBP1=((uint32_t)0x00000002)
   DSI_VVBPCCR_VBP2=((uint32_t)0x00000004)
   DSI_VVBPCCR_VBP3=((uint32_t)0x00000008)
   DSI_VVBPCCR_VBP4=((uint32_t)0x00000010)
   DSI_VVBPCCR_VBP5=((uint32_t)0x00000020)
   DSI_VVBPCCR_VBP6=((uint32_t)0x00000040)
   DSI_VVBPCCR_VBP7=((uint32_t)0x00000080)
   DSI_VVBPCCR_VBP8=((uint32_t)0x00000100)
   DSI_VVBPCCR_VBP9=((uint32_t)0x00000200)
   DSI_VVBPCCR_VBP=((uint32_t)0x000003FF)
   DSI_VVBPCR_VBP0=((uint32_t)0x00000001)
   DSI_VVBPCR_VBP1=((uint32_t)0x00000002)
   DSI_VVBPCR_VBP2=((uint32_t)0x00000004)
   DSI_VVBPCR_VBP3=((uint32_t)0x00000008)
   DSI_VVBPCR_VBP4=((uint32_t)0x00000010)
   DSI_VVBPCR_VBP5=((uint32_t)0x00000020)
   DSI_VVBPCR_VBP6=((uint32_t)0x00000040)
   DSI_VVBPCR_VBP7=((uint32_t)0x00000080)
   DSI_VVBPCR_VBP8=((uint32_t)0x00000100)
   DSI_VVBPCR_VBP9=((uint32_t)0x00000200)
   DSI_VVBPCR_VBP=((uint32_t)0x000003FF)
   DSI_VVFPCCR_VFP0=((uint32_t)0x00000001)
   DSI_VVFPCCR_VFP1=((uint32_t)0x00000002)
   DSI_VVFPCCR_VFP2=((uint32_t)0x00000004)
   DSI_VVFPCCR_VFP3=((uint32_t)0x00000008)
   DSI_VVFPCCR_VFP4=((uint32_t)0x00000010)
   DSI_VVFPCCR_VFP5=((uint32_t)0x00000020)
   DSI_VVFPCCR_VFP6=((uint32_t)0x00000040)
   DSI_VVFPCCR_VFP7=((uint32_t)0x00000080)
   DSI_VVFPCCR_VFP8=((uint32_t)0x00000100)
   DSI_VVFPCCR_VFP9=((uint32_t)0x00000200)
   DSI_VVFPCCR_VFP=((uint32_t)0x000003FF)
   DSI_VVFPCR_VFP0=((uint32_t)0x00000001)
   DSI_VVFPCR_VFP1=((uint32_t)0x00000002)
   DSI_VVFPCR_VFP2=((uint32_t)0x00000004)
   DSI_VVFPCR_VFP3=((uint32_t)0x00000008)
   DSI_VVFPCR_VFP4=((uint32_t)0x00000010)
   DSI_VVFPCR_VFP5=((uint32_t)0x00000020)
   DSI_VVFPCR_VFP6=((uint32_t)0x00000040)
   DSI_VVFPCR_VFP7=((uint32_t)0x00000080)
   DSI_VVFPCR_VFP8=((uint32_t)0x00000100)
   DSI_VVFPCR_VFP9=((uint32_t)0x00000200)
   DSI_VVFPCR_VFP=((uint32_t)0x000003FF)
   DSI_VVSACCR_VSA0=((uint32_t)0x00000001)
   DSI_VVSACCR_VSA1=((uint32_t)0x00000002)
   DSI_VVSACCR_VSA2=((uint32_t)0x00000004)
   DSI_VVSACCR_VSA3=((uint32_t)0x00000008)
   DSI_VVSACCR_VSA4=((uint32_t)0x00000010)
   DSI_VVSACCR_VSA5=((uint32_t)0x00000020)
   DSI_VVSACCR_VSA6=((uint32_t)0x00000040)
   DSI_VVSACCR_VSA7=((uint32_t)0x00000080)
   DSI_VVSACCR_VSA8=((uint32_t)0x00000100)
   DSI_VVSACCR_VSA9=((uint32_t)0x00000200)
   DSI_VVSACCR_VSA=((uint32_t)0x000003FF)
   DSI_VVSACR_VSA0=((uint32_t)0x00000001)
   DSI_VVSACR_VSA1=((uint32_t)0x00000002)
   DSI_VVSACR_VSA2=((uint32_t)0x00000004)
   DSI_VVSACR_VSA3=((uint32_t)0x00000008)
   DSI_VVSACR_VSA4=((uint32_t)0x00000010)
   DSI_VVSACR_VSA5=((uint32_t)0x00000020)
   DSI_VVSACR_VSA6=((uint32_t)0x00000040)
   DSI_VVSACR_VSA7=((uint32_t)0x00000080)
   DSI_VVSACR_VSA8=((uint32_t)0x00000100)
   DSI_VVSACR_VSA9=((uint32_t)0x00000200)
   DSI_VVSACR_VSA=((uint32_t)0x000003FF)
   DSI_WCFGR_AR=((uint32_t)0x00000040)
   DSI_WCFGR_COLMUX0=((uint32_t)0x00000002)
   DSI_WCFGR_COLMUX1=((uint32_t)0x00000004)
   DSI_WCFGR_COLMUX2=((uint32_t)0x00000008)
   DSI_WCFGR_COLMUX=((uint32_t)0x0000000E)
   DSI_WCFGR_DSIM=((uint32_t)0x00000001)
   DSI_WCFGR_TEPOL=((uint32_t)0x00000020)
   DSI_WCFGR_TESRC=((uint32_t)0x00000010)
   DSI_WCFGR_VSPOL=((uint32_t)0x00000080)
   DSI_WCR_COLM=((uint32_t)0x00000001)
   DSI_WCR_DSIEN=((uint32_t)0x00000008)
   DSI_WCR_LTDCEN=((uint32_t)0x00000004)
   DSI_WCR_SHTDN=((uint32_t)0x00000002)
   DSI_WIER_ERIE=((uint32_t)0x00000002)
   DSI_WIER_PLLLIE=((uint32_t)0x00000200)
   DSI_WIER_PLLUIE=((uint32_t)0x00000400)
   DSI_WIER_RRIE=((uint32_t)0x00002000)
   DSI_WIER_TEIE=((uint32_t)0x00000001)
   DSI_WIFCR_CERIF=((uint32_t)0x00000002)
   DSI_WIFCR_CPLLLIF=((uint32_t)0x00000200)
   DSI_WIFCR_CPLLUIF=((uint32_t)0x00000400)
   DSI_WIFCR_CRRIF=((uint32_t)0x00002000)
   DSI_WIFCR_CTEIF=((uint32_t)0x00000001)
   DSI_WISR_BUSY=((uint32_t)0x00000004)
   DSI_WISR_ERIF=((uint32_t)0x00000002)
   DSI_WISR_PLLLIF=((uint32_t)0x00000200)
   DSI_WISR_PLLLS=((uint32_t)0x00000100)
   DSI_WISR_PLLUIF=((uint32_t)0x00000400)
   DSI_WISR_RRIF=((uint32_t)0x00002000)
   DSI_WISR_RRS=((uint32_t)0x00001000)
   DSI_WISR_TEIF=((uint32_t)0x00000001)
   DSI_WPCR1_CDOFFDL=((uint32_t)0x00004000)
   DSI_WPCR1_FTXSMCL=((uint32_t)0x00001000)
   DSI_WPCR1_FTXSMDL=((uint32_t)0x00002000)
   DSI_WPCR1_HSICL=((uint32_t)0x00000200)
   DSI_WPCR1_HSIDL0=((uint32_t)0x00000400)
   DSI_WPCR1_HSIDL1=((uint32_t)0x00000800)
   DSI_WPCR1_PDEN=((uint32_t)0x00040000)
   DSI_WPCR1_SWCL=((uint32_t)0x00000040)
   DSI_WPCR1_SWDL0=((uint32_t)0x00000080)
   DSI_WPCR1_SWDL1=((uint32_t)0x00000100)
   DSI_WPCR1_TCLKPOSTEN=((uint32_t)0x08000000)
   DSI_WPCR1_TCLKPREPEN=((uint32_t)0x00080000)
   DSI_WPCR1_TCLKZEROEN=((uint32_t)0x00100000)
   DSI_WPCR1_TDDL=((uint32_t)0x00010000)
   DSI_WPCR1_THSEXITEN=((uint32_t)0x02000000)
   DSI_WPCR1_THSPREPEN=((uint32_t)0x00200000)
   DSI_WPCR1_THSTRAILEN=((uint32_t)0x00400000)
   DSI_WPCR1_THSZEROEN=((uint32_t)0x00800000)
   DSI_WPCR1_TLPXCEN=((uint32_t)0x04000000)
   DSI_WPCR1_TLPXDEN=((uint32_t)0x01000000)
   DSI_WPCR1_UIX4=((uint32_t)0x0000003F)
   DSI_WPCR1_UIX4_0=((uint32_t)0x00000001)
   DSI_WPCR1_UIX4_1=((uint32_t)0x00000002)
   DSI_WPCR1_UIX4_2=((uint32_t)0x00000004)
   DSI_WPCR1_UIX4_3=((uint32_t)0x00000008)
   DSI_WPCR1_UIX4_4=((uint32_t)0x00000010)
   DSI_WPCR1_UIX4_5=((uint32_t)0x00000020)
   DSI_WPCR2_FLPRXLPM=((uint32_t)0x00400000)
   DSI_WPCR2_HSTXDCL0=((uint32_t)0x00000001)
   DSI_WPCR2_HSTXDCL1=((uint32_t)0x00000002)
   DSI_WPCR2_HSTXDCL=((uint32_t)0x00000003)
   DSI_WPCR2_HSTXDDL0=((uint32_t)0x00000004)
   DSI_WPCR2_HSTXDDL1=((uint32_t)0x00000008)
   DSI_WPCR2_HSTXDDL=((uint32_t)0x0000000C)
   DSI_WPCR2_HSTXSRCCL0=((uint32_t)0x00010000)
   DSI_WPCR2_HSTXSRCCL1=((uint32_t)0x00020000)
   DSI_WPCR2_HSTXSRCCL=((uint32_t)0x00030000)
   DSI_WPCR2_HSTXSRCDL0=((uint32_t)0x00040000)
   DSI_WPCR2_HSTXSRCDL1=((uint32_t)0x00080000)
   DSI_WPCR2_HSTXSRCDL=((uint32_t)0x000C0000)
   DSI_WPCR2_LPRXFT0=((uint32_t)0x02000000)
   DSI_WPCR2_LPRXFT1=((uint32_t)0x04000000)
   DSI_WPCR2_LPRXFT=((uint32_t)0x06000000)
   DSI_WPCR2_LPRXVCDL0=((uint32_t)0x00004000)
   DSI_WPCR2_LPRXVCDL1=((uint32_t)0x00008000)
   DSI_WPCR2_LPRXVCDL=((uint32_t)0x0000C000)
   DSI_WPCR2_LPSRCCL0=((uint32_t)0x00000040)
   DSI_WPCR2_LPSRCCL1=((uint32_t)0x00000080)
   DSI_WPCR2_LPSRCCL=((uint32_t)0x000000C0)
   DSI_WPCR2_LPSRCDL0=((uint32_t)0x00000100)
   DSI_WPCR2_LPSRCDL1=((uint32_t)0x00000200)
   DSI_WPCR2_LPSRCDL=((uint32_t)0x00000300)
   DSI_WPCR2_SDDC=((uint32_t)0x00001000)
   DSI_WPCR3_TCLKPREP0=((uint32_t)0x00000001)
   DSI_WPCR3_TCLKPREP1=((uint32_t)0x00000002)
   DSI_WPCR3_TCLKPREP2=((uint32_t)0x00000004)
   DSI_WPCR3_TCLKPREP3=((uint32_t)0x00000008)
   DSI_WPCR3_TCLKPREP4=((uint32_t)0x00000010)
   DSI_WPCR3_TCLKPREP5=((uint32_t)0x00000020)
   DSI_WPCR3_TCLKPREP6=((uint32_t)0x00000040)
   DSI_WPCR3_TCLKPREP7=((uint32_t)0x00000080)
   DSI_WPCR3_TCLKPREP=((uint32_t)0x000000FF)
   DSI_WPCR3_TCLKZERO0=((uint32_t)0x00000100)
   DSI_WPCR3_TCLKZERO1=((uint32_t)0x00000200)
   DSI_WPCR3_TCLKZERO2=((uint32_t)0x00000400)
   DSI_WPCR3_TCLKZERO3=((uint32_t)0x00000800)
   DSI_WPCR3_TCLKZERO4=((uint32_t)0x00001000)
   DSI_WPCR3_TCLKZERO5=((uint32_t)0x00002000)
   DSI_WPCR3_TCLKZERO6=((uint32_t)0x00004000)
   DSI_WPCR3_TCLKZERO7=((uint32_t)0x00008000)
   DSI_WPCR3_TCLKZERO=((uint32_t)0x0000FF00)
   DSI_WPCR3_THSPREP0=((uint32_t)0x00010000)
   DSI_WPCR3_THSPREP1=((uint32_t)0x00020000)
   DSI_WPCR3_THSPREP2=((uint32_t)0x00040000)
   DSI_WPCR3_THSPREP3=((uint32_t)0x00080000)
   DSI_WPCR3_THSPREP4=((uint32_t)0x00100000)
   DSI_WPCR3_THSPREP5=((uint32_t)0x00200000)
   DSI_WPCR3_THSPREP6=((uint32_t)0x00400000)
   DSI_WPCR3_THSPREP7=((uint32_t)0x00800000)
   DSI_WPCR3_THSPREP=((uint32_t)0x00FF0000)
   DSI_WPCR3_THSTRAIL0=((uint32_t)0x01000000)
   DSI_WPCR3_THSTRAIL1=((uint32_t)0x02000000)
   DSI_WPCR3_THSTRAIL2=((uint32_t)0x04000000)
   DSI_WPCR3_THSTRAIL3=((uint32_t)0x08000000)
   DSI_WPCR3_THSTRAIL4=((uint32_t)0x10000000)
   DSI_WPCR3_THSTRAIL5=((uint32_t)0x20000000)
   DSI_WPCR3_THSTRAIL6=((uint32_t)0x40000000)
   DSI_WPCR3_THSTRAIL7=((uint32_t)0x80000000)
   DSI_WPCR3_THSTRAIL=((uint32_t)0xFF000000)
   DSI_WPCR4_THSEXIT0=((uint32_t)0x00010000)
   DSI_WPCR4_THSEXIT1=((uint32_t)0x00020000)
   DSI_WPCR4_THSEXIT2=((uint32_t)0x00040000)
   DSI_WPCR4_THSEXIT3=((uint32_t)0x00080000)
   DSI_WPCR4_THSEXIT4=((uint32_t)0x00100000)
   DSI_WPCR4_THSEXIT5=((uint32_t)0x00200000)
   DSI_WPCR4_THSEXIT6=((uint32_t)0x00400000)
   DSI_WPCR4_THSEXIT7=((uint32_t)0x00800000)
   DSI_WPCR4_THSEXIT=((uint32_t)0x00FF0000)
   DSI_WPCR4_THSZERO0=((uint32_t)0x00000001)
   DSI_WPCR4_THSZERO1=((uint32_t)0x00000002)
   DSI_WPCR4_THSZERO2=((uint32_t)0x00000004)
   DSI_WPCR4_THSZERO3=((uint32_t)0x00000008)
   DSI_WPCR4_THSZERO4=((uint32_t)0x00000010)
   DSI_WPCR4_THSZERO5=((uint32_t)0x00000020)
   DSI_WPCR4_THSZERO6=((uint32_t)0x00000040)
   DSI_WPCR4_THSZERO7=((uint32_t)0x00000080)
   DSI_WPCR4_THSZERO=((uint32_t)0x000000FF)
   DSI_WPCR4_TLPXC0=((uint32_t)0x01000000)
   DSI_WPCR4_TLPXC1=((uint32_t)0x02000000)
   DSI_WPCR4_TLPXC2=((uint32_t)0x04000000)
   DSI_WPCR4_TLPXC3=((uint32_t)0x08000000)
   DSI_WPCR4_TLPXC4=((uint32_t)0x10000000)
   DSI_WPCR4_TLPXC5=((uint32_t)0x20000000)
   DSI_WPCR4_TLPXC6=((uint32_t)0x40000000)
   DSI_WPCR4_TLPXC7=((uint32_t)0x80000000)
   DSI_WPCR4_TLPXC=((uint32_t)0xFF000000)
   DSI_WPCR4_TLPXD0=((uint32_t)0x00000100)
   DSI_WPCR4_TLPXD1=((uint32_t)0x00000200)
   DSI_WPCR4_TLPXD2=((uint32_t)0x00000400)
   DSI_WPCR4_TLPXD3=((uint32_t)0x00000800)
   DSI_WPCR4_TLPXD4=((uint32_t)0x00001000)
   DSI_WPCR4_TLPXD5=((uint32_t)0x00002000)
   DSI_WPCR4_TLPXD6=((uint32_t)0x00004000)
   DSI_WPCR4_TLPXD7=((uint32_t)0x00008000)
   DSI_WPCR4_TLPXD=((uint32_t)0x0000FF00)
   DSI_WPCR5_TCLKPOST0=((uint32_t)0x00000001)
   DSI_WPCR5_TCLKPOST1=((uint32_t)0x00000002)
   DSI_WPCR5_TCLKPOST2=((uint32_t)0x00000004)
   DSI_WPCR5_TCLKPOST3=((uint32_t)0x00000008)
   DSI_WPCR5_TCLKPOST4=((uint32_t)0x00000010)
   DSI_WPCR5_TCLKPOST5=((uint32_t)0x00000020)
   DSI_WPCR5_TCLKPOST6=((uint32_t)0x00000040)
   DSI_WPCR5_TCLKPOST7=((uint32_t)0x00000080)
   DSI_WPCR5_TCLKPOST=((uint32_t)0x000000FF)
   DSI_WRITE_LUT=0x2D
   DSI_WRITE_MEMORY_CONTINUE=0x3C
   DSI_WRITE_MEMORY_START=0x2C
   DSI_WRPCR_PLLEN=((uint32_t)0x00000001)
   DSI_WRPCR_PLL_IDF0=((uint32_t)0x00000800)
   DSI_WRPCR_PLL_IDF1=((uint32_t)0x00001000)
   DSI_WRPCR_PLL_IDF2=((uint32_t)0x00002000)
   DSI_WRPCR_PLL_IDF3=((uint32_t)0x00004000)
   DSI_WRPCR_PLL_IDF=((uint32_t)0x00007800)
   DSI_WRPCR_PLL_NDIV0=((uint32_t)0x00000004)
   DSI_WRPCR_PLL_NDIV1=((uint32_t)0x00000008)
   DSI_WRPCR_PLL_NDIV2=((uint32_t)0x00000010)
   DSI_WRPCR_PLL_NDIV3=((uint32_t)0x00000020)
   DSI_WRPCR_PLL_NDIV4=((uint32_t)0x00000040)
   DSI_WRPCR_PLL_NDIV5=((uint32_t)0x00000080)
   DSI_WRPCR_PLL_NDIV6=((uint32_t)0x00000100)
   DSI_WRPCR_PLL_NDIV=((uint32_t)0x000001FC)
   DSI_WRPCR_PLL_ODF0=((uint32_t)0x00010000)
   DSI_WRPCR_PLL_ODF1=((uint32_t)0x00020000)
   DSI_WRPCR_PLL_ODF=((uint32_t)0x00030000)
   DSI_WRPCR_REGEN=((uint32_t)0x01000000)
   DUAL_INOUT_FAST_READ_CMD=0xBB
   DUAL_IN_FAST_PROG_CMD=0xA2
   DUAL_OUT_FAST_READ_CMD=0x3B
   DUMMYSCREEN_PRESENTER_HPP=
   DUMMYSCREEN_VIEW_BASE_HPP=
   DUMMYSCREEN_VIEW_HPP=
   DWT=((DWT_Type *) DWT_BASE )
   DWT_BASE=(0xE0001000UL)
   DWT_CPICNT_CPICNT_Msk=(0xFFUL )
   DWT_CPICNT_CPICNT_Pos=0
   DWT_CTRL_CPIEVTENA_Msk=(0x1UL << DWT_CTRL_CPIEVTENA_Pos)
   DWT_CTRL_CPIEVTENA_Pos=17
   DWT_CTRL_CYCCNTENA_Msk=(0x1UL )
   DWT_CTRL_CYCCNTENA_Pos=0
   DWT_CTRL_CYCEVTENA_Msk=(0x1UL << DWT_CTRL_CYCEVTENA_Pos)
   DWT_CTRL_CYCEVTENA_Pos=22
   DWT_CTRL_CYCTAP_Msk=(0x1UL << DWT_CTRL_CYCTAP_Pos)
   DWT_CTRL_CYCTAP_Pos=9
   DWT_CTRL_EXCEVTENA_Msk=(0x1UL << DWT_CTRL_EXCEVTENA_Pos)
   DWT_CTRL_EXCEVTENA_Pos=18
   DWT_CTRL_EXCTRCENA_Msk=(0x1UL << DWT_CTRL_EXCTRCENA_Pos)
   DWT_CTRL_EXCTRCENA_Pos=16
   DWT_CTRL_FOLDEVTENA_Msk=(0x1UL << DWT_CTRL_FOLDEVTENA_Pos)
   DWT_CTRL_FOLDEVTENA_Pos=21
   DWT_CTRL_LSUEVTENA_Msk=(0x1UL << DWT_CTRL_LSUEVTENA_Pos)
   DWT_CTRL_LSUEVTENA_Pos=20
   DWT_CTRL_NOCYCCNT_Msk=(0x1UL << DWT_CTRL_NOCYCCNT_Pos)
   DWT_CTRL_NOCYCCNT_Pos=25
   DWT_CTRL_NOEXTTRIG_Msk=(0x1UL << DWT_CTRL_NOEXTTRIG_Pos)
   DWT_CTRL_NOEXTTRIG_Pos=26
   DWT_CTRL_NOPRFCNT_Msk=(0x1UL << DWT_CTRL_NOPRFCNT_Pos)
   DWT_CTRL_NOPRFCNT_Pos=24
   DWT_CTRL_NOTRCPKT_Msk=(0x1UL << DWT_CTRL_NOTRCPKT_Pos)
   DWT_CTRL_NOTRCPKT_Pos=27
   DWT_CTRL_NUMCOMP_Msk=(0xFUL << DWT_CTRL_NUMCOMP_Pos)
   DWT_CTRL_NUMCOMP_Pos=28
   DWT_CTRL_PCSAMPLENA_Msk=(0x1UL << DWT_CTRL_PCSAMPLENA_Pos)
   DWT_CTRL_PCSAMPLENA_Pos=12
   DWT_CTRL_POSTINIT_Msk=(0xFUL << DWT_CTRL_POSTINIT_Pos)
   DWT_CTRL_POSTINIT_Pos=5
   DWT_CTRL_POSTPRESET_Msk=(0xFUL << DWT_CTRL_POSTPRESET_Pos)
   DWT_CTRL_POSTPRESET_Pos=1
   DWT_CTRL_SLEEPEVTENA_Msk=(0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)
   DWT_CTRL_SLEEPEVTENA_Pos=19
   DWT_CTRL_SYNCTAP_Msk=(0x3UL << DWT_CTRL_SYNCTAP_Pos)
   DWT_CTRL_SYNCTAP_Pos=10
   DWT_EXCCNT_EXCCNT_Msk=(0xFFUL )
   DWT_EXCCNT_EXCCNT_Pos=0
   DWT_FOLDCNT_FOLDCNT_Msk=(0xFFUL )
   DWT_FOLDCNT_FOLDCNT_Pos=0
   DWT_FUNCTION_CYCMATCH_Msk=(0x1UL << DWT_FUNCTION_CYCMATCH_Pos)
   DWT_FUNCTION_CYCMATCH_Pos=7
   DWT_FUNCTION_DATAVADDR0_Msk=(0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)
   DWT_FUNCTION_DATAVADDR0_Pos=12
   DWT_FUNCTION_DATAVADDR1_Msk=(0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)
   DWT_FUNCTION_DATAVADDR1_Pos=16
   DWT_FUNCTION_DATAVMATCH_Msk=(0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)
   DWT_FUNCTION_DATAVMATCH_Pos=8
   DWT_FUNCTION_DATAVSIZE_Msk=(0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)
   DWT_FUNCTION_DATAVSIZE_Pos=10
   DWT_FUNCTION_EMITRANGE_Msk=(0x1UL << DWT_FUNCTION_EMITRANGE_Pos)
   DWT_FUNCTION_EMITRANGE_Pos=5
   DWT_FUNCTION_FUNCTION_Msk=(0xFUL )
   DWT_FUNCTION_FUNCTION_Pos=0
   DWT_FUNCTION_LNK1ENA_Msk=(0x1UL << DWT_FUNCTION_LNK1ENA_Pos)
   DWT_FUNCTION_LNK1ENA_Pos=9
   DWT_FUNCTION_MATCHED_Msk=(0x1UL << DWT_FUNCTION_MATCHED_Pos)
   DWT_FUNCTION_MATCHED_Pos=24
   DWT_LSUCNT_LSUCNT_Msk=(0xFFUL )
   DWT_LSUCNT_LSUCNT_Pos=0
   DWT_MASK_MASK_Msk=(0x1FUL )
   DWT_MASK_MASK_Pos=0
   DWT_SLEEPCNT_SLEEPCNT_Msk=(0xFFUL )
   DWT_SLEEPCNT_SLEEPCNT_Pos=0
   EASINGEQUATIONS_HPP=
   EEPROM_I2C_ADDRESS_A01=((uint16_t)0xA0)
   EEPROM_I2C_ADDRESS_A02=((uint16_t)0xA6)
   EOC_SEQ_CONV=ADC_EOC_SEQ_CONV
   EOC_SINGLE_CONV=ADC_EOC_SINGLE_CONV
   EOC_SINGLE_SEQ_CONV=ADC_EOC_SINGLE_SEQ_CONV
   EOF=(-1)
   ETH=((ETH_TypeDef *) ETH_BASE)
   ETH_BASE=(AHB1PERIPH_BASE + 0x8000)
   ETH_DMABMR_AAB=((uint32_t)0x02000000)
   ETH_DMABMR_DA=((uint32_t)0x00000002)
   ETH_DMABMR_DSL=((uint32_t)0x0000007C)
   ETH_DMABMR_EDE=((uint32_t)0x00000080)
   ETH_DMABMR_FB=((uint32_t)0x00010000)
   ETH_DMABMR_FPM=((uint32_t)0x01000000)
   ETH_DMABMR_PBL=((uint32_t)0x00003F00)
   ETH_DMABMR_PBL_16Beat=((uint32_t)0x00001000)
   ETH_DMABMR_PBL_1Beat=((uint32_t)0x00000100)
   ETH_DMABMR_PBL_2Beat=((uint32_t)0x00000200)
   ETH_DMABMR_PBL_32Beat=((uint32_t)0x00002000)
   ETH_DMABMR_PBL_4Beat=((uint32_t)0x00000400)
   ETH_DMABMR_PBL_4xPBL_128Beat=((uint32_t)0x01002000)
   ETH_DMABMR_PBL_4xPBL_16Beat=((uint32_t)0x01000400)
   ETH_DMABMR_PBL_4xPBL_32Beat=((uint32_t)0x01000800)
   ETH_DMABMR_PBL_4xPBL_4Beat=((uint32_t)0x01000100)
   ETH_DMABMR_PBL_4xPBL_64Beat=((uint32_t)0x01001000)
   ETH_DMABMR_PBL_4xPBL_8Beat=((uint32_t)0x01000200)
   ETH_DMABMR_PBL_8Beat=((uint32_t)0x00000800)
   ETH_DMABMR_RDP=((uint32_t)0x007E0000)
   ETH_DMABMR_RDP_16Beat=((uint32_t)0x00200000)
   ETH_DMABMR_RDP_1Beat=((uint32_t)0x00020000)
   ETH_DMABMR_RDP_2Beat=((uint32_t)0x00040000)
   ETH_DMABMR_RDP_32Beat=((uint32_t)0x00400000)
   ETH_DMABMR_RDP_4Beat=((uint32_t)0x00080000)
   ETH_DMABMR_RDP_4xPBL_128Beat=((uint32_t)0x01400000)
   ETH_DMABMR_RDP_4xPBL_16Beat=((uint32_t)0x01080000)
   ETH_DMABMR_RDP_4xPBL_32Beat=((uint32_t)0x01100000)
   ETH_DMABMR_RDP_4xPBL_4Beat=((uint32_t)0x01020000)
   ETH_DMABMR_RDP_4xPBL_64Beat=((uint32_t)0x01200000)
   ETH_DMABMR_RDP_4xPBL_8Beat=((uint32_t)0x01040000)
   ETH_DMABMR_RDP_8Beat=((uint32_t)0x00100000)
   ETH_DMABMR_RTPR=((uint32_t)0x0000C000)
   ETH_DMABMR_RTPR_1_1=((uint32_t)0x00000000)
   ETH_DMABMR_RTPR_2_1=((uint32_t)0x00004000)
   ETH_DMABMR_RTPR_3_1=((uint32_t)0x00008000)
   ETH_DMABMR_RTPR_4_1=((uint32_t)0x0000C000)
   ETH_DMABMR_SR=((uint32_t)0x00000001)
   ETH_DMABMR_USP=((uint32_t)0x00800000)
   ETH_DMACHRBAR_HRBAP=((uint32_t)0xFFFFFFFF)
   ETH_DMACHRDR_HRDAP=((uint32_t)0xFFFFFFFF)
   ETH_DMACHTBAR_HTBAP=((uint32_t)0xFFFFFFFF)
   ETH_DMACHTDR_HTDAP=((uint32_t)0xFFFFFFFF)
   ETH_DMAIER_AISE=((uint32_t)0x00008000)
   ETH_DMAIER_ERIE=((uint32_t)0x00004000)
   ETH_DMAIER_ETIE=((uint32_t)0x00000400)
   ETH_DMAIER_FBEIE=((uint32_t)0x00002000)
   ETH_DMAIER_NISE=((uint32_t)0x00010000)
   ETH_DMAIER_RBUIE=((uint32_t)0x00000080)
   ETH_DMAIER_RIE=((uint32_t)0x00000040)
   ETH_DMAIER_ROIE=((uint32_t)0x00000010)
   ETH_DMAIER_RPSIE=((uint32_t)0x00000100)
   ETH_DMAIER_RWTIE=((uint32_t)0x00000200)
   ETH_DMAIER_TBUIE=((uint32_t)0x00000004)
   ETH_DMAIER_TIE=((uint32_t)0x00000001)
   ETH_DMAIER_TJTIE=((uint32_t)0x00000008)
   ETH_DMAIER_TPSIE=((uint32_t)0x00000002)
   ETH_DMAIER_TUIE=((uint32_t)0x00000020)
   ETH_DMAMFBOCR_MFA=((uint32_t)0x0FFE0000)
   ETH_DMAMFBOCR_MFC=((uint32_t)0x0000FFFF)
   ETH_DMAMFBOCR_OFOC=((uint32_t)0x10000000)
   ETH_DMAMFBOCR_OMFC=((uint32_t)0x00010000)
   ETH_DMAOMR_DFRF=((uint32_t)0x01000000)
   ETH_DMAOMR_DTCEFD=((uint32_t)0x04000000)
   ETH_DMAOMR_FEF=((uint32_t)0x00000080)
   ETH_DMAOMR_FTF=((uint32_t)0x00100000)
   ETH_DMAOMR_FUGF=((uint32_t)0x00000040)
   ETH_DMAOMR_OSF=((uint32_t)0x00000004)
   ETH_DMAOMR_RSF=((uint32_t)0x02000000)
   ETH_DMAOMR_RTC=((uint32_t)0x00000018)
   ETH_DMAOMR_RTC_128Bytes=((uint32_t)0x00000018)
   ETH_DMAOMR_RTC_32Bytes=((uint32_t)0x00000008)
   ETH_DMAOMR_RTC_64Bytes=((uint32_t)0x00000000)
   ETH_DMAOMR_RTC_96Bytes=((uint32_t)0x00000010)
   ETH_DMAOMR_SR=((uint32_t)0x00000002)
   ETH_DMAOMR_ST=((uint32_t)0x00002000)
   ETH_DMAOMR_TSF=((uint32_t)0x00200000)
   ETH_DMAOMR_TTC=((uint32_t)0x0001C000)
   ETH_DMAOMR_TTC_128Bytes=((uint32_t)0x00004000)
   ETH_DMAOMR_TTC_16Bytes=((uint32_t)0x0001C000)
   ETH_DMAOMR_TTC_192Bytes=((uint32_t)0x00008000)
   ETH_DMAOMR_TTC_24Bytes=((uint32_t)0x00018000)
   ETH_DMAOMR_TTC_256Bytes=((uint32_t)0x0000C000)
   ETH_DMAOMR_TTC_32Bytes=((uint32_t)0x00014000)
   ETH_DMAOMR_TTC_40Bytes=((uint32_t)0x00010000)
   ETH_DMAOMR_TTC_64Bytes=((uint32_t)0x00000000)
   ETH_DMARDLAR_SRL=((uint32_t)0xFFFFFFFF)
   ETH_DMARPDR_RPD=((uint32_t)0xFFFFFFFF)
   ETH_DMASR_AIS=((uint32_t)0x00008000)
   ETH_DMASR_EBS=((uint32_t)0x03800000)
   ETH_DMASR_EBS_DataTransfTx=((uint32_t)0x00800000)
   ETH_DMASR_EBS_DescAccess=((uint32_t)0x02000000)
   ETH_DMASR_EBS_ReadTransf=((uint32_t)0x01000000)
   ETH_DMASR_ERS=((uint32_t)0x00004000)
   ETH_DMASR_ETS=((uint32_t)0x00000400)
   ETH_DMASR_FBES=((uint32_t)0x00002000)
   ETH_DMASR_MMCS=((uint32_t)0x08000000)
   ETH_DMASR_NIS=((uint32_t)0x00010000)
   ETH_DMASR_PMTS=((uint32_t)0x10000000)
   ETH_DMASR_RBUS=((uint32_t)0x00000080)
   ETH_DMASR_ROS=((uint32_t)0x00000010)
   ETH_DMASR_RPS=((uint32_t)0x000E0000)
   ETH_DMASR_RPSS=((uint32_t)0x00000100)
   ETH_DMASR_RPS_Closing=((uint32_t)0x000A0000)
   ETH_DMASR_RPS_Fetching=((uint32_t)0x00020000)
   ETH_DMASR_RPS_Queuing=((uint32_t)0x000E0000)
   ETH_DMASR_RPS_Stopped=((uint32_t)0x00000000)
   ETH_DMASR_RPS_Suspended=((uint32_t)0x00080000)
   ETH_DMASR_RPS_Waiting=((uint32_t)0x00060000)
   ETH_DMASR_RS=((uint32_t)0x00000040)
   ETH_DMASR_RWTS=((uint32_t)0x00000200)
   ETH_DMASR_TBUS=((uint32_t)0x00000004)
   ETH_DMASR_TJTS=((uint32_t)0x00000008)
   ETH_DMASR_TPS=((uint32_t)0x00700000)
   ETH_DMASR_TPSS=((uint32_t)0x00000002)
   ETH_DMASR_TPS_Closing=((uint32_t)0x00700000)
   ETH_DMASR_TPS_Fetching=((uint32_t)0x00100000)
   ETH_DMASR_TPS_Reading=((uint32_t)0x00300000)
   ETH_DMASR_TPS_Stopped=((uint32_t)0x00000000)
   ETH_DMASR_TPS_Suspended=((uint32_t)0x00600000)
   ETH_DMASR_TPS_Waiting=((uint32_t)0x00200000)
   ETH_DMASR_TS=((uint32_t)0x00000001)
   ETH_DMASR_TSTS=((uint32_t)0x20000000)
   ETH_DMASR_TUS=((uint32_t)0x00000020)
   ETH_DMATDLAR_STL=((uint32_t)0xFFFFFFFF)
   ETH_DMATPDR_TPD=((uint32_t)0xFFFFFFFF)
   ETH_DMA_BASE=(ETH_BASE + 0x1000)
   ETH_MACA0HR_MACA0H=((uint32_t)0x0000FFFF)
   ETH_MACA0LR_MACA0L=((uint32_t)0xFFFFFFFF)
   ETH_MACA1HR_AE=((uint32_t)0x80000000)
   ETH_MACA1HR_MACA1H=((uint32_t)0x0000FFFF)
   ETH_MACA1HR_MBC=((uint32_t)0x3F000000)
   ETH_MACA1HR_MBC_HBits15_8=((uint32_t)0x20000000)
   ETH_MACA1HR_MBC_HBits7_0=((uint32_t)0x10000000)
   ETH_MACA1HR_MBC_LBits15_8=((uint32_t)0x02000000)
   ETH_MACA1HR_MBC_LBits23_16=((uint32_t)0x04000000)
   ETH_MACA1HR_MBC_LBits31_24=((uint32_t)0x08000000)
   ETH_MACA1HR_MBC_LBits7_0=((uint32_t)0x01000000)
   ETH_MACA1HR_SA=((uint32_t)0x40000000)
   ETH_MACA1LR_MACA1L=((uint32_t)0xFFFFFFFF)
   ETH_MACA2HR_AE=((uint32_t)0x80000000)
   ETH_MACA2HR_MACA2H=((uint32_t)0x0000FFFF)
   ETH_MACA2HR_MBC=((uint32_t)0x3F000000)
   ETH_MACA2HR_MBC_HBits15_8=((uint32_t)0x20000000)
   ETH_MACA2HR_MBC_HBits7_0=((uint32_t)0x10000000)
   ETH_MACA2HR_MBC_LBits15_8=((uint32_t)0x02000000)
   ETH_MACA2HR_MBC_LBits23_16=((uint32_t)0x04000000)
   ETH_MACA2HR_MBC_LBits31_24=((uint32_t)0x08000000)
   ETH_MACA2HR_MBC_LBits7_0=((uint32_t)0x01000000)
   ETH_MACA2HR_SA=((uint32_t)0x40000000)
   ETH_MACA2LR_MACA2L=((uint32_t)0xFFFFFFFF)
   ETH_MACA3HR_AE=((uint32_t)0x80000000)
   ETH_MACA3HR_MACA3H=((uint32_t)0x0000FFFF)
   ETH_MACA3HR_MBC=((uint32_t)0x3F000000)
   ETH_MACA3HR_MBC_HBits15_8=((uint32_t)0x20000000)
   ETH_MACA3HR_MBC_HBits7_0=((uint32_t)0x10000000)
   ETH_MACA3HR_MBC_LBits15_8=((uint32_t)0x02000000)
   ETH_MACA3HR_MBC_LBits23_16=((uint32_t)0x04000000)
   ETH_MACA3HR_MBC_LBits31_24=((uint32_t)0x08000000)
   ETH_MACA3HR_MBC_LBits7_0=((uint32_t)0x01000000)
   ETH_MACA3HR_SA=((uint32_t)0x40000000)
   ETH_MACA3LR_MACA3L=((uint32_t)0xFFFFFFFF)
   ETH_MACCR_APCS=((uint32_t)0x00000080)
   ETH_MACCR_BL=((uint32_t)0x00000060)
   ETH_MACCR_BL_10=((uint32_t)0x00000000)
   ETH_MACCR_BL_1=((uint32_t)0x00000060)
   ETH_MACCR_BL_4=((uint32_t)0x00000040)
   ETH_MACCR_BL_8=((uint32_t)0x00000020)
   ETH_MACCR_CSD=((uint32_t)0x00010000)
   ETH_MACCR_DC=((uint32_t)0x00000010)
   ETH_MACCR_DM=((uint32_t)0x00000800)
   ETH_MACCR_FES=((uint32_t)0x00004000)
   ETH_MACCR_IFG=((uint32_t)0x000E0000)
   ETH_MACCR_IFG_40Bit=((uint32_t)0x000E0000)
   ETH_MACCR_IFG_48Bit=((uint32_t)0x000C0000)
   ETH_MACCR_IFG_56Bit=((uint32_t)0x000A0000)
   ETH_MACCR_IFG_64Bit=((uint32_t)0x00080000)
   ETH_MACCR_IFG_72Bit=((uint32_t)0x00060000)
   ETH_MACCR_IFG_80Bit=((uint32_t)0x00040000)
   ETH_MACCR_IFG_88Bit=((uint32_t)0x00020000)
   ETH_MACCR_IFG_96Bit=((uint32_t)0x00000000)
   ETH_MACCR_IPCO=((uint32_t)0x00000400)
   ETH_MACCR_JD=((uint32_t)0x00400000)
   ETH_MACCR_LM=((uint32_t)0x00001000)
   ETH_MACCR_RD=((uint32_t)0x00000200)
   ETH_MACCR_RE=((uint32_t)0x00000004)
   ETH_MACCR_ROD=((uint32_t)0x00002000)
   ETH_MACCR_TE=((uint32_t)0x00000008)
   ETH_MACCR_WD=((uint32_t)0x00800000)
   ETH_MACFCR_FCBBPA=((uint32_t)0x00000001)
   ETH_MACFCR_PLT=((uint32_t)0x00000030)
   ETH_MACFCR_PLT_Minus144=((uint32_t)0x00000020)
   ETH_MACFCR_PLT_Minus256=((uint32_t)0x00000030)
   ETH_MACFCR_PLT_Minus28=((uint32_t)0x00000010)
   ETH_MACFCR_PLT_Minus4=((uint32_t)0x00000000)
   ETH_MACFCR_PT=((uint32_t)0xFFFF0000)
   ETH_MACFCR_RFCE=((uint32_t)0x00000004)
   ETH_MACFCR_TFCE=((uint32_t)0x00000002)
   ETH_MACFCR_UPFD=((uint32_t)0x00000008)
   ETH_MACFCR_ZQPD=((uint32_t)0x00000080)
   ETH_MACFFR_BFD=((uint32_t)0x00000020)
   ETH_MACFFR_DAIF=((uint32_t)0x00000008)
   ETH_MACFFR_HM=((uint32_t)0x00000004)
   ETH_MACFFR_HPF=((uint32_t)0x00000400)
   ETH_MACFFR_HU=((uint32_t)0x00000002)
   ETH_MACFFR_PAM=((uint32_t)0x00000010)
   ETH_MACFFR_PCF=((uint32_t)0x000000C0)
   ETH_MACFFR_PCF_BlockAll=((uint32_t)0x00000040)
   ETH_MACFFR_PCF_ForwardAll=((uint32_t)0x00000080)
   ETH_MACFFR_PCF_ForwardPassedAddrFilter=((uint32_t)0x000000C0)
   ETH_MACFFR_PM=((uint32_t)0x00000001)
   ETH_MACFFR_RA=((uint32_t)0x80000000)
   ETH_MACFFR_SAF=((uint32_t)0x00000200)
   ETH_MACFFR_SAIF=((uint32_t)0x00000100)
   ETH_MACHTHR_HTH=((uint32_t)0xFFFFFFFF)
   ETH_MACHTLR_HTL=((uint32_t)0xFFFFFFFF)
   ETH_MACIMR_PMTIM=((uint32_t)0x00000008)
   ETH_MACIMR_TSTIM=((uint32_t)0x00000200)
   ETH_MACMIIAR_CR=((uint32_t)0x0000001C)
   ETH_MACMIIAR_CR_Div102=((uint32_t)0x00000010)
   ETH_MACMIIAR_CR_Div16=((uint32_t)0x00000008)
   ETH_MACMIIAR_CR_Div26=((uint32_t)0x0000000C)
   ETH_MACMIIAR_CR_Div42=((uint32_t)0x00000000)
   ETH_MACMIIAR_CR_Div62=((uint32_t)0x00000004)
   ETH_MACMIIAR_MB=((uint32_t)0x00000001)
   ETH_MACMIIAR_MR=((uint32_t)0x000007C0)
   ETH_MACMIIAR_MW=((uint32_t)0x00000002)
   ETH_MACMIIAR_PA=((uint32_t)0x0000F800)
   ETH_MACMIIDR_MD=((uint32_t)0x0000FFFF)
   ETH_MACPMTCSR_GU=((uint32_t)0x00000200)
   ETH_MACPMTCSR_MPE=((uint32_t)0x00000002)
   ETH_MACPMTCSR_MPR=((uint32_t)0x00000020)
   ETH_MACPMTCSR_PD=((uint32_t)0x00000001)
   ETH_MACPMTCSR_WFE=((uint32_t)0x00000004)
   ETH_MACPMTCSR_WFFRPR=((uint32_t)0x80000000)
   ETH_MACPMTCSR_WFR=((uint32_t)0x00000040)
   ETH_MACRWUFFR_D=((uint32_t)0xFFFFFFFF)
   ETH_MACSR_MMCS=((uint32_t)0x00000010)
   ETH_MACSR_MMCTS=((uint32_t)0x00000040)
   ETH_MACSR_MMMCRS=((uint32_t)0x00000020)
   ETH_MACSR_PMTS=((uint32_t)0x00000008)
   ETH_MACSR_TSTS=((uint32_t)0x00000200)
   ETH_MACVLANTR_VLANTC=((uint32_t)0x00010000)
   ETH_MACVLANTR_VLANTI=((uint32_t)0x0000FFFF)
   ETH_MAC_BASE=(ETH_BASE)
   ETH_MMCCR=((uint32_t)0x00000100)
   ETH_MMCCR_CR=((uint32_t)0x00000001)
   ETH_MMCCR_CSR=((uint32_t)0x00000002)
   ETH_MMCCR_MCF=((uint32_t)0x00000008)
   ETH_MMCCR_MCFHP=((uint32_t)0x00000020)
   ETH_MMCCR_MCP=((uint32_t)0x00000010)
   ETH_MMCCR_ROR=((uint32_t)0x00000004)
   ETH_MMCRFAECR=((uint32_t)0x00000198)
   ETH_MMCRFAECR_RFAEC=((uint32_t)0xFFFFFFFF)
   ETH_MMCRFCECR=((uint32_t)0x00000194)
   ETH_MMCRFCECR_RFCEC=((uint32_t)0xFFFFFFFF)
   ETH_MMCRGUFCR=((uint32_t)0x000001C4)
   ETH_MMCRGUFCR_RGUFC=((uint32_t)0xFFFFFFFF)
   ETH_MMCRIMR=((uint32_t)0x0000010C)
   ETH_MMCRIMR_RFAEM=((uint32_t)0x00000040)
   ETH_MMCRIMR_RFCEM=((uint32_t)0x00000020)
   ETH_MMCRIMR_RGUFM=((uint32_t)0x00020000)
   ETH_MMCRIR=((uint32_t)0x00000104)
   ETH_MMCRIR_RFAES=((uint32_t)0x00000040)
   ETH_MMCRIR_RFCES=((uint32_t)0x00000020)
   ETH_MMCRIR_RGUFS=((uint32_t)0x00020000)
   ETH_MMCTGFCR=((uint32_t)0x00000168)
   ETH_MMCTGFCR_TGFC=((uint32_t)0xFFFFFFFF)
   ETH_MMCTGFMSCCR=((uint32_t)0x00000150)
   ETH_MMCTGFMSCCR_TGFMSCC=((uint32_t)0xFFFFFFFF)
   ETH_MMCTGFSCCR=((uint32_t)0x0000014C)
   ETH_MMCTGFSCCR_TGFSCC=((uint32_t)0xFFFFFFFF)
   ETH_MMCTIMR=((uint32_t)0x00000110)
   ETH_MMCTIMR_TGFM=((uint32_t)0x00200000)
   ETH_MMCTIMR_TGFMSCM=((uint32_t)0x00008000)
   ETH_MMCTIMR_TGFSCM=((uint32_t)0x00004000)
   ETH_MMCTIR=((uint32_t)0x00000108)
   ETH_MMCTIR_TGFMSCS=((uint32_t)0x00008000)
   ETH_MMCTIR_TGFS=((uint32_t)0x00200000)
   ETH_MMCTIR_TGFSCS=((uint32_t)0x00004000)
   ETH_MMC_BASE=(ETH_BASE + 0x0100)
   ETH_PROMISCIOUSMODE_DISABLE=ETH_PROMISCUOUS_MODE_DISABLE
   ETH_PROMISCIOUSMODE_ENABLE=ETH_PROMISCUOUS_MODE_ENABLE
   ETH_PTPSSIR_STSSI=((uint32_t)0x000000FF)
   ETH_PTPTSAR_TSA=((uint32_t)0xFFFFFFFF)
   ETH_PTPTSCR_TSARU=((uint32_t)0x00000020)
   ETH_PTPTSCR_TSCNT=((uint32_t)0x00030000)
   ETH_PTPTSCR_TSE=((uint32_t)0x00000001)
   ETH_PTPTSCR_TSFCU=((uint32_t)0x00000002)
   ETH_PTPTSCR_TSITE=((uint32_t)0x00000010)
   ETH_PTPTSCR_TSSTI=((uint32_t)0x00000004)
   ETH_PTPTSCR_TSSTU=((uint32_t)0x00000008)
   ETH_PTPTSHR_STS=((uint32_t)0xFFFFFFFF)
   ETH_PTPTSHUR_TSUS=((uint32_t)0xFFFFFFFF)
   ETH_PTPTSLR_STPNS=((uint32_t)0x80000000)
   ETH_PTPTSLR_STSS=((uint32_t)0x7FFFFFFF)
   ETH_PTPTSLUR_TSUPNS=((uint32_t)0x80000000)
   ETH_PTPTSLUR_TSUSS=((uint32_t)0x7FFFFFFF)
   ETH_PTPTSSR_TSPTPPSV2E=((uint32_t)0x00000400)
   ETH_PTPTSSR_TSSARFE=((uint32_t)0x00000100)
   ETH_PTPTSSR_TSSEME=((uint32_t)0x00004000)
   ETH_PTPTSSR_TSSIPV4FE=((uint32_t)0x00002000)
   ETH_PTPTSSR_TSSIPV6FE=((uint32_t)0x00001000)
   ETH_PTPTSSR_TSSMRME=((uint32_t)0x00008000)
   ETH_PTPTSSR_TSSO=((uint32_t)0x00000010)
   ETH_PTPTSSR_TSSPTPOEFE=((uint32_t)0x00000800)
   ETH_PTPTSSR_TSSSR=((uint32_t)0x00000200)
   ETH_PTPTSSR_TSTTR=((uint32_t)0x00000020)
   ETH_PTPTTHR_TTSH=((uint32_t)0xFFFFFFFF)
   ETH_PTPTTLR_TTSL=((uint32_t)0xFFFFFFFF)
   ETH_PTP_BASE=(ETH_BASE + 0x0700)
   ETH_RXBUFNB=((uint32_t)4)
   ETH_RX_BUF_SIZE=ETH_MAX_PACKET_SIZE
   ETH_TXBUFNB=((uint32_t)4)
   ETH_TX_BUF_SIZE=ETH_MAX_PACKET_SIZE
   EVENT_HPP=
   EWUP_BitNumber=EWUP_BIT_NUMBER
   EWUP_BIT_NUMBER=POSITION_VAL(PWR_CSR_EWUP)
   EXIT_FAILURE=1
   EXIT_SUCCESS=0
   EXTERNAL_CLOCK_VALUE=((uint32_t)12288000)
   EXTI=((EXTI_TypeDef *) EXTI_BASE)
   EXTI_BASE=(APB2PERIPH_BASE + 0x3C00)
   EXTI_EMR_MR0=((uint32_t)0x00000001)
   EXTI_EMR_MR10=((uint32_t)0x00000400)
   EXTI_EMR_MR11=((uint32_t)0x00000800)
   EXTI_EMR_MR12=((uint32_t)0x00001000)
   EXTI_EMR_MR13=((uint32_t)0x00002000)
   EXTI_EMR_MR14=((uint32_t)0x00004000)
   EXTI_EMR_MR15=((uint32_t)0x00008000)
   EXTI_EMR_MR16=((uint32_t)0x00010000)
   EXTI_EMR_MR17=((uint32_t)0x00020000)
   EXTI_EMR_MR18=((uint32_t)0x00040000)
   EXTI_EMR_MR19=((uint32_t)0x00080000)
   EXTI_EMR_MR1=((uint32_t)0x00000002)
   EXTI_EMR_MR20=((uint32_t)0x00100000)
   EXTI_EMR_MR21=((uint32_t)0x00200000)
   EXTI_EMR_MR22=((uint32_t)0x00400000)
   EXTI_EMR_MR2=((uint32_t)0x00000004)
   EXTI_EMR_MR3=((uint32_t)0x00000008)
   EXTI_EMR_MR4=((uint32_t)0x00000010)
   EXTI_EMR_MR5=((uint32_t)0x00000020)
   EXTI_EMR_MR6=((uint32_t)0x00000040)
   EXTI_EMR_MR7=((uint32_t)0x00000080)
   EXTI_EMR_MR8=((uint32_t)0x00000100)
   EXTI_EMR_MR9=((uint32_t)0x00000200)
   EXTI_FTSR_TR0=((uint32_t)0x00000001)
   EXTI_FTSR_TR10=((uint32_t)0x00000400)
   EXTI_FTSR_TR11=((uint32_t)0x00000800)
   EXTI_FTSR_TR12=((uint32_t)0x00001000)
   EXTI_FTSR_TR13=((uint32_t)0x00002000)
   EXTI_FTSR_TR14=((uint32_t)0x00004000)
   EXTI_FTSR_TR15=((uint32_t)0x00008000)
   EXTI_FTSR_TR16=((uint32_t)0x00010000)
   EXTI_FTSR_TR17=((uint32_t)0x00020000)
   EXTI_FTSR_TR18=((uint32_t)0x00040000)
   EXTI_FTSR_TR19=((uint32_t)0x00080000)
   EXTI_FTSR_TR1=((uint32_t)0x00000002)
   EXTI_FTSR_TR20=((uint32_t)0x00100000)
   EXTI_FTSR_TR21=((uint32_t)0x00200000)
   EXTI_FTSR_TR22=((uint32_t)0x00400000)
   EXTI_FTSR_TR2=((uint32_t)0x00000004)
   EXTI_FTSR_TR3=((uint32_t)0x00000008)
   EXTI_FTSR_TR4=((uint32_t)0x00000010)
   EXTI_FTSR_TR5=((uint32_t)0x00000020)
   EXTI_FTSR_TR6=((uint32_t)0x00000040)
   EXTI_FTSR_TR7=((uint32_t)0x00000080)
   EXTI_FTSR_TR8=((uint32_t)0x00000100)
   EXTI_FTSR_TR9=((uint32_t)0x00000200)
   EXTI_IMR_MR0=((uint32_t)0x00000001)
   EXTI_IMR_MR10=((uint32_t)0x00000400)
   EXTI_IMR_MR11=((uint32_t)0x00000800)
   EXTI_IMR_MR12=((uint32_t)0x00001000)
   EXTI_IMR_MR13=((uint32_t)0x00002000)
   EXTI_IMR_MR14=((uint32_t)0x00004000)
   EXTI_IMR_MR15=((uint32_t)0x00008000)
   EXTI_IMR_MR16=((uint32_t)0x00010000)
   EXTI_IMR_MR17=((uint32_t)0x00020000)
   EXTI_IMR_MR18=((uint32_t)0x00040000)
   EXTI_IMR_MR19=((uint32_t)0x00080000)
   EXTI_IMR_MR1=((uint32_t)0x00000002)
   EXTI_IMR_MR20=((uint32_t)0x00100000)
   EXTI_IMR_MR21=((uint32_t)0x00200000)
   EXTI_IMR_MR22=((uint32_t)0x00400000)
   EXTI_IMR_MR2=((uint32_t)0x00000004)
   EXTI_IMR_MR3=((uint32_t)0x00000008)
   EXTI_IMR_MR4=((uint32_t)0x00000010)
   EXTI_IMR_MR5=((uint32_t)0x00000020)
   EXTI_IMR_MR6=((uint32_t)0x00000040)
   EXTI_IMR_MR7=((uint32_t)0x00000080)
   EXTI_IMR_MR8=((uint32_t)0x00000100)
   EXTI_IMR_MR9=((uint32_t)0x00000200)
   EXTI_PR_PR0=((uint32_t)0x00000001)
   EXTI_PR_PR10=((uint32_t)0x00000400)
   EXTI_PR_PR11=((uint32_t)0x00000800)
   EXTI_PR_PR12=((uint32_t)0x00001000)
   EXTI_PR_PR13=((uint32_t)0x00002000)
   EXTI_PR_PR14=((uint32_t)0x00004000)
   EXTI_PR_PR15=((uint32_t)0x00008000)
   EXTI_PR_PR16=((uint32_t)0x00010000)
   EXTI_PR_PR17=((uint32_t)0x00020000)
   EXTI_PR_PR18=((uint32_t)0x00040000)
   EXTI_PR_PR19=((uint32_t)0x00080000)
   EXTI_PR_PR1=((uint32_t)0x00000002)
   EXTI_PR_PR20=((uint32_t)0x00100000)
   EXTI_PR_PR21=((uint32_t)0x00200000)
   EXTI_PR_PR22=((uint32_t)0x00400000)
   EXTI_PR_PR2=((uint32_t)0x00000004)
   EXTI_PR_PR3=((uint32_t)0x00000008)
   EXTI_PR_PR4=((uint32_t)0x00000010)
   EXTI_PR_PR5=((uint32_t)0x00000020)
   EXTI_PR_PR6=((uint32_t)0x00000040)
   EXTI_PR_PR7=((uint32_t)0x00000080)
   EXTI_PR_PR8=((uint32_t)0x00000100)
   EXTI_PR_PR9=((uint32_t)0x00000200)
   EXTI_RTSR_TR0=((uint32_t)0x00000001)
   EXTI_RTSR_TR10=((uint32_t)0x00000400)
   EXTI_RTSR_TR11=((uint32_t)0x00000800)
   EXTI_RTSR_TR12=((uint32_t)0x00001000)
   EXTI_RTSR_TR13=((uint32_t)0x00002000)
   EXTI_RTSR_TR14=((uint32_t)0x00004000)
   EXTI_RTSR_TR15=((uint32_t)0x00008000)
   EXTI_RTSR_TR16=((uint32_t)0x00010000)
   EXTI_RTSR_TR17=((uint32_t)0x00020000)
   EXTI_RTSR_TR18=((uint32_t)0x00040000)
   EXTI_RTSR_TR19=((uint32_t)0x00080000)
   EXTI_RTSR_TR1=((uint32_t)0x00000002)
   EXTI_RTSR_TR20=((uint32_t)0x00100000)
   EXTI_RTSR_TR21=((uint32_t)0x00200000)
   EXTI_RTSR_TR22=((uint32_t)0x00400000)
   EXTI_RTSR_TR2=((uint32_t)0x00000004)
   EXTI_RTSR_TR3=((uint32_t)0x00000008)
   EXTI_RTSR_TR4=((uint32_t)0x00000010)
   EXTI_RTSR_TR5=((uint32_t)0x00000020)
   EXTI_RTSR_TR6=((uint32_t)0x00000040)
   EXTI_RTSR_TR7=((uint32_t)0x00000080)
   EXTI_RTSR_TR8=((uint32_t)0x00000100)
   EXTI_RTSR_TR9=((uint32_t)0x00000200)
   EXTI_SWIER_SWIER0=((uint32_t)0x00000001)
   EXTI_SWIER_SWIER10=((uint32_t)0x00000400)
   EXTI_SWIER_SWIER11=((uint32_t)0x00000800)
   EXTI_SWIER_SWIER12=((uint32_t)0x00001000)
   EXTI_SWIER_SWIER13=((uint32_t)0x00002000)
   EXTI_SWIER_SWIER14=((uint32_t)0x00004000)
   EXTI_SWIER_SWIER15=((uint32_t)0x00008000)
   EXTI_SWIER_SWIER16=((uint32_t)0x00010000)
   EXTI_SWIER_SWIER17=((uint32_t)0x00020000)
   EXTI_SWIER_SWIER18=((uint32_t)0x00040000)
   EXTI_SWIER_SWIER19=((uint32_t)0x00080000)
   EXTI_SWIER_SWIER1=((uint32_t)0x00000002)
   EXTI_SWIER_SWIER20=((uint32_t)0x00100000)
   EXTI_SWIER_SWIER21=((uint32_t)0x00200000)
   EXTI_SWIER_SWIER22=((uint32_t)0x00400000)
   EXTI_SWIER_SWIER2=((uint32_t)0x00000004)
   EXTI_SWIER_SWIER3=((uint32_t)0x00000008)
   EXTI_SWIER_SWIER4=((uint32_t)0x00000010)
   EXTI_SWIER_SWIER5=((uint32_t)0x00000020)
   EXTI_SWIER_SWIER6=((uint32_t)0x00000040)
   EXTI_SWIER_SWIER7=((uint32_t)0x00000080)
   EXTI_SWIER_SWIER8=((uint32_t)0x00000100)
   EXTI_SWIER_SWIER9=((uint32_t)0x00000200)
   EXT_DUAL_IN_FAST_PROG_CMD=0xD2
   EXT_QUAD_IN_FAST_PROG_CMD=0x12
   fast_putc(x,p)=(--(p)->_w < 0 ? __swbuf_r(_REENT, (int)(x), p) == EOF : (*(p)->_p = (x), (p)->_p++, 0))
   FAST_READ_CMD=0x0B
   FD_CLR(n,p)=((p)->fds_bits[(n)/NFDBITS] &= ~(1L << ((n) % NFDBITS)))
   FD_ISSET(n,p)=((p)->fds_bits[(n)/NFDBITS] & (1L << ((n) % NFDBITS)))
   FD_SET(n,p)=((p)->fds_bits[(n)/NFDBITS] |= (1L << ((n) % NFDBITS)))
   fd_set=_types_fd_set
   FD_SETSIZE=64
   FD_ZERO(p)=(__extension__ (void)({ size_t __i; char *__tmp = (char *)p; for (__i = 0; __i < sizeof (*(p)); ++__i) *__tmp++ = 0; }))
   FILENAME_MAX=1024
   FLASH=((FLASH_TypeDef *) FLASH_R_BASE)
   FLASH_ACR_BYTE0_ADDRESS=((uint32_t)0x40023C00)
   FLASH_ACR_BYTE2_ADDRESS=((uint32_t)0x40023C03)
   FLASH_ACR_DCEN=((uint32_t)0x00000400)
   FLASH_ACR_DCRST=((uint32_t)0x00001000)
   FLASH_ACR_ICEN=((uint32_t)0x00000200)
   FLASH_ACR_ICRST=((uint32_t)0x00000800)
   FLASH_ACR_LATENCY=((uint32_t)0x0000000F)
   FLASH_ACR_LATENCY_0WS=((uint32_t)0x00000000)
   FLASH_ACR_LATENCY_10WS=((uint32_t)0x0000000A)
   FLASH_ACR_LATENCY_11WS=((uint32_t)0x0000000B)
   FLASH_ACR_LATENCY_12WS=((uint32_t)0x0000000C)
   FLASH_ACR_LATENCY_13WS=((uint32_t)0x0000000D)
   FLASH_ACR_LATENCY_14WS=((uint32_t)0x0000000E)
   FLASH_ACR_LATENCY_15WS=((uint32_t)0x0000000F)
   FLASH_ACR_LATENCY_1WS=((uint32_t)0x00000001)
   FLASH_ACR_LATENCY_2WS=((uint32_t)0x00000002)
   FLASH_ACR_LATENCY_3WS=((uint32_t)0x00000003)
   FLASH_ACR_LATENCY_4WS=((uint32_t)0x00000004)
   FLASH_ACR_LATENCY_5WS=((uint32_t)0x00000005)
   FLASH_ACR_LATENCY_6WS=((uint32_t)0x00000006)
   FLASH_ACR_LATENCY_7WS=((uint32_t)0x00000007)
   FLASH_ACR_LATENCY_8WS=((uint32_t)0x00000008)
   FLASH_ACR_LATENCY_9WS=((uint32_t)0x00000009)
   FLASH_ACR_PRFTEN=((uint32_t)0x00000100)
   FLASH_BANK_1=((uint32_t)1)
   FLASH_BANK_2=((uint32_t)2)
   FLASH_BANK_BOTH=((uint32_t)FLASH_BANK_1 | FLASH_BANK_2)
   FLASH_BASE=((uint32_t)0x08000000)
   FLASH_CR_EOPIE=((uint32_t)0x01000000)
   FLASH_CR_LOCK=((uint32_t)0x80000000)
   FLASH_CR_MER1=FLASH_CR_MER
   FLASH_CR_MER2=((uint32_t)0x00008000)
   FLASH_CR_MER=((uint32_t)0x00000004)
   FLASH_CR_PG=((uint32_t)0x00000001)
   FLASH_CR_PSIZE=((uint32_t)0x00000300)
   FLASH_CR_PSIZE_0=((uint32_t)0x00000100)
   FLASH_CR_PSIZE_1=((uint32_t)0x00000200)
   FLASH_CR_SER=((uint32_t)0x00000002)
   FLASH_CR_SNB=((uint32_t)0x000000F8)
   FLASH_CR_SNB_0=((uint32_t)0x00000008)
   FLASH_CR_SNB_1=((uint32_t)0x00000010)
   FLASH_CR_SNB_2=((uint32_t)0x00000020)
   FLASH_CR_SNB_3=((uint32_t)0x00000040)
   FLASH_CR_SNB_4=((uint32_t)0x00000080)
   FLASH_CR_STRT=((uint32_t)0x00010000)
   FLASH_DisableRunPowerDown=HAL_FLASHEx_DisableRunPowerDown
   FLASH_EnableRunPowerDown=HAL_FLASHEx_EnableRunPowerDown
   FLASH_END=((uint32_t)0x081FFFFF)
   FLASH_ERROR_ERS=HAL_FLASH_ERROR_ERS
   FLASH_ERROR_FAST=HAL_FLASH_ERROR_FAST
   FLASH_ERROR_FWWERR=HAL_FLASH_ERROR_FWWERR
   FLASH_ERROR_MIS=HAL_FLASH_ERROR_MIS
   FLASH_ERROR_NONE=HAL_FLASH_ERROR_NONE
   FLASH_ERROR_NOTZERO=HAL_FLASH_ERROR_NOTZERO
   FLASH_ERROR_OP=HAL_FLASH_ERROR_OPERATION
   FLASH_ERROR_OPERATION=HAL_FLASH_ERROR_OPERATION
   FLASH_ERROR_OPTV=HAL_FLASH_ERROR_OPTV
   FLASH_ERROR_OPTVUSR=HAL_FLASH_ERROR_OPTVUSR
   FLASH_ERROR_PG=HAL_FLASH_ERROR_PROG
   FLASH_ERROR_PGA=HAL_FLASH_ERROR_PGA
   FLASH_ERROR_PGP=HAL_FLASH_ERROR_PGS
   FLASH_ERROR_PGS=HAL_FLASH_ERROR_PGS
   FLASH_ERROR_PROG=HAL_FLASH_ERROR_PROG
   FLASH_ERROR_RD=HAL_FLASH_ERROR_RD
   FLASH_ERROR_SIZ=HAL_FLASH_ERROR_SIZE
   FLASH_ERROR_SIZE=HAL_FLASH_ERROR_SIZE
   FLASH_ERROR_WRP=HAL_FLASH_ERROR_WRP
   FLASH_FLAG_BSY=FLASH_SR_BSY
   FLASH_FLAG_EOP=FLASH_SR_EOP
   FLASH_FLAG_OPERR=FLASH_SR_SOP
   FLASH_FLAG_PGAERR=FLASH_SR_PGAERR
   FLASH_FLAG_PGPERR=FLASH_SR_PGPERR
   FLASH_FLAG_PGSERR=FLASH_SR_PGSERR
   FLASH_FLAG_RDERR=((uint32_t)0x00000100)
   FLASH_FLAG_WRPERR=FLASH_SR_WRPERR
   FLASH_HalfPageProgram=HAL_FLASHEx_HalfPageProgram
   FLASH_IT_EOP=FLASH_CR_EOPIE
   FLASH_IT_ERR=((uint32_t)0x02000000)
   FLASH_KEY1=((uint32_t)0x45670123)
   FLASH_KEY2=((uint32_t)0xCDEF89AB)
   FLASH_LATENCY_0=FLASH_ACR_LATENCY_0WS
   FLASH_LATENCY_10=FLASH_ACR_LATENCY_10WS
   FLASH_LATENCY_11=FLASH_ACR_LATENCY_11WS
   FLASH_LATENCY_12=FLASH_ACR_LATENCY_12WS
   FLASH_LATENCY_13=FLASH_ACR_LATENCY_13WS
   FLASH_LATENCY_14=FLASH_ACR_LATENCY_14WS
   FLASH_LATENCY_15=FLASH_ACR_LATENCY_15WS
   FLASH_LATENCY_1=FLASH_ACR_LATENCY_1WS
   FLASH_LATENCY_2=FLASH_ACR_LATENCY_2WS
   FLASH_LATENCY_3=FLASH_ACR_LATENCY_3WS
   FLASH_LATENCY_4=FLASH_ACR_LATENCY_4WS
   FLASH_LATENCY_5=FLASH_ACR_LATENCY_5WS
   FLASH_LATENCY_6=FLASH_ACR_LATENCY_6WS
   FLASH_LATENCY_7=FLASH_ACR_LATENCY_7WS
   FLASH_LATENCY_8=FLASH_ACR_LATENCY_8WS
   FLASH_LATENCY_9=FLASH_ACR_LATENCY_9WS
   FLASH_MER_BIT=(FLASH_CR_MER1 | FLASH_CR_MER2)
   FLASH_OPTCR1_nWRP=((uint32_t)0x0FFF0000)
   FLASH_OPTCR1_nWRP_0=((uint32_t)0x00010000)
   FLASH_OPTCR1_nWRP_10=((uint32_t)0x04000000)
   FLASH_OPTCR1_nWRP_11=((uint32_t)0x08000000)
   FLASH_OPTCR1_nWRP_1=((uint32_t)0x00020000)
   FLASH_OPTCR1_nWRP_2=((uint32_t)0x00040000)
   FLASH_OPTCR1_nWRP_3=((uint32_t)0x00080000)
   FLASH_OPTCR1_nWRP_4=((uint32_t)0x00100000)
   FLASH_OPTCR1_nWRP_5=((uint32_t)0x00200000)
   FLASH_OPTCR1_nWRP_6=((uint32_t)0x00400000)
   FLASH_OPTCR1_nWRP_7=((uint32_t)0x00800000)
   FLASH_OPTCR1_nWRP_8=((uint32_t)0x01000000)
   FLASH_OPTCR1_nWRP_9=((uint32_t)0x02000000)
   FLASH_OPTCR_BFB2=((uint32_t)0x00000010)
   FLASH_OPTCR_BOR_LEV=((uint32_t)0x0000000C)
   FLASH_OPTCR_BOR_LEV_0=((uint32_t)0x00000004)
   FLASH_OPTCR_BOR_LEV_1=((uint32_t)0x00000008)
   FLASH_OPTCR_DB1M=((uint32_t)0x40000000)
   FLASH_OPTCR_nRST_STDBY=((uint32_t)0x00000080)
   FLASH_OPTCR_nRST_STOP=((uint32_t)0x00000040)
   FLASH_OPTCR_nWRP=((uint32_t)0x0FFF0000)
   FLASH_OPTCR_nWRP_0=((uint32_t)0x00010000)
   FLASH_OPTCR_nWRP_10=((uint32_t)0x04000000)
   FLASH_OPTCR_nWRP_11=((uint32_t)0x08000000)
   FLASH_OPTCR_nWRP_1=((uint32_t)0x00020000)
   FLASH_OPTCR_nWRP_2=((uint32_t)0x00040000)
   FLASH_OPTCR_nWRP_3=((uint32_t)0x00080000)
   FLASH_OPTCR_nWRP_4=((uint32_t)0x00100000)
   FLASH_OPTCR_nWRP_5=((uint32_t)0x00200000)
   FLASH_OPTCR_nWRP_6=((uint32_t)0x00400000)
   FLASH_OPTCR_nWRP_7=((uint32_t)0x00800000)
   FLASH_OPTCR_nWRP_8=((uint32_t)0x01000000)
   FLASH_OPTCR_nWRP_9=((uint32_t)0x02000000)
   FLASH_OPTCR_OPTLOCK=((uint32_t)0x00000001)
   FLASH_OPTCR_OPTSTRT=((uint32_t)0x00000002)
   FLASH_OPTCR_RDP=((uint32_t)0x0000FF00)
   FLASH_OPTCR_RDP_0=((uint32_t)0x00000100)
   FLASH_OPTCR_RDP_1=((uint32_t)0x00000200)
   FLASH_OPTCR_RDP_2=((uint32_t)0x00000400)
   FLASH_OPTCR_RDP_3=((uint32_t)0x00000800)
   FLASH_OPTCR_RDP_4=((uint32_t)0x00001000)
   FLASH_OPTCR_RDP_5=((uint32_t)0x00002000)
   FLASH_OPTCR_RDP_6=((uint32_t)0x00004000)
   FLASH_OPTCR_RDP_7=((uint32_t)0x00008000)
   FLASH_OPTCR_SPRMOD=((uint32_t)0x80000000)
   FLASH_OPTCR_WDG_SW=((uint32_t)0x00000020)
   FLASH_OPT_KEY1=((uint32_t)0x08192A3B)
   FLASH_OPT_KEY2=((uint32_t)0x4C5D6E7F)
   FLASH_PSIZE_BYTE=((uint32_t)0x00000000)
   FLASH_PSIZE_DOUBLE_WORD=((uint32_t)0x00000300)
   FLASH_PSIZE_HALF_WORD=((uint32_t)0x00000100)
   FLASH_PSIZE_WORD=((uint32_t)0x00000200)
   FLASH_R_BASE=(AHB1PERIPH_BASE + 0x3C00)
   FLASH_SECTOR_0=((uint32_t)0)
   FLASH_SECTOR_10=((uint32_t)10)
   FLASH_SECTOR_11=((uint32_t)11)
   FLASH_SECTOR_12=((uint32_t)12)
   FLASH_SECTOR_13=((uint32_t)13)
   FLASH_SECTOR_14=((uint32_t)14)
   FLASH_SECTOR_15=((uint32_t)15)
   FLASH_SECTOR_16=((uint32_t)16)
   FLASH_SECTOR_17=((uint32_t)17)
   FLASH_SECTOR_18=((uint32_t)18)
   FLASH_SECTOR_19=((uint32_t)19)
   FLASH_SECTOR_1=((uint32_t)1)
   FLASH_SECTOR_20=((uint32_t)20)
   FLASH_SECTOR_21=((uint32_t)21)
   FLASH_SECTOR_22=((uint32_t)22)
   FLASH_SECTOR_23=((uint32_t)23)
   FLASH_SECTOR_2=((uint32_t)2)
   FLASH_SECTOR_3=((uint32_t)3)
   FLASH_SECTOR_4=((uint32_t)4)
   FLASH_SECTOR_5=((uint32_t)5)
   FLASH_SECTOR_6=((uint32_t)6)
   FLASH_SECTOR_7=((uint32_t)7)
   FLASH_SECTOR_8=((uint32_t)8)
   FLASH_SECTOR_9=((uint32_t)9)
   FLASH_SECTOR_TOTAL=24
   FLASH_SR_BSY=((uint32_t)0x00010000)
   FLASH_SR_EOP=((uint32_t)0x00000001)
   FLASH_SR_PGAERR=((uint32_t)0x00000020)
   FLASH_SR_PGPERR=((uint32_t)0x00000040)
   FLASH_SR_PGSERR=((uint32_t)0x00000080)
   FLASH_SR_SOP=((uint32_t)0x00000002)
   FLASH_SR_WRPERR=((uint32_t)0x00000010)
   FLASH_TYPEERASE_MASSERASE=((uint32_t)0x01)
   FLASH_TYPEERASE_SECTORS=((uint32_t)0x00)
   FLASH_TYPEPROGRAM_BYTE=((uint32_t)0x00)
   FLASH_TYPEPROGRAM_DOUBLEWORD=((uint32_t)0x03)
   FLASH_TYPEPROGRAM_HALFWORD=((uint32_t)0x01)
   FLASH_TYPEPROGRAM_WORD=((uint32_t)0x02)
   FLASH_VOLTAGE_RANGE_1=((uint32_t)0x00)
   FLASH_VOLTAGE_RANGE_2=((uint32_t)0x01)
   FLASH_VOLTAGE_RANGE_3=((uint32_t)0x02)
   FLASH_VOLTAGE_RANGE_4=((uint32_t)0x03)
   FLT_EVAL_METHOD=__FLT_EVAL_METHOD__
   FMC_ACCESS_MODE_A=((uint32_t)0x00000000)
   FMC_ACCESS_MODE_B=((uint32_t)0x10000000)
   FMC_ACCESS_MODE_C=((uint32_t)0x20000000)
   FMC_ACCESS_MODE_D=((uint32_t)0x30000000)
   FMC_ASYNCHRONOUS_WAIT_DISABLE=((uint32_t)0x00000000)
   FMC_ASYNCHRONOUS_WAIT_ENABLE=((uint32_t)0x00008000)
   FMC_Bank1=((FMC_Bank1_TypeDef *) FMC_Bank1_R_BASE)
   FMC_Bank1E=((FMC_Bank1E_TypeDef *) FMC_Bank1E_R_BASE)
   FMC_Bank1E_R_BASE=(FMC_R_BASE + 0x0104)
   FMC_Bank1_R_BASE=(FMC_R_BASE + 0x0000)
   FMC_Bank3=((FMC_Bank3_TypeDef *) FMC_Bank3_R_BASE)
   FMC_Bank3_R_BASE=(FMC_R_BASE + 0x0080)
   FMC_Bank5_6=((FMC_Bank5_6_TypeDef *) FMC_Bank5_6_R_BASE)
   FMC_Bank5_6_R_BASE=(FMC_R_BASE + 0x0140)
   FMC_BCR1_ASYNCWAIT=((uint32_t)0x00008000)
   FMC_BCR1_BURSTEN=((uint32_t)0x00000100)
   FMC_BCR1_CBURSTRW=((uint32_t)0x00080000)
   FMC_BCR1_CCLKEN=((uint32_t)0x00100000)
   FMC_BCR1_CPSIZE=((uint32_t)0x00070000)
   FMC_BCR1_CPSIZE_0=((uint32_t)0x00010000)
   FMC_BCR1_CPSIZE_1=((uint32_t)0x00020000)
   FMC_BCR1_CPSIZE_2=((uint32_t)0x00040000)
   FMC_BCR1_EXTMOD=((uint32_t)0x00004000)
   FMC_BCR1_FACCEN=((uint32_t)0x00000040)
   FMC_BCR1_MBKEN=((uint32_t)0x00000001)
   FMC_BCR1_MTYP=((uint32_t)0x0000000C)
   FMC_BCR1_MTYP_0=((uint32_t)0x00000004)
   FMC_BCR1_MTYP_1=((uint32_t)0x00000008)
   FMC_BCR1_MUXEN=((uint32_t)0x00000002)
   FMC_BCR1_MWID=((uint32_t)0x00000030)
   FMC_BCR1_MWID_0=((uint32_t)0x00000010)
   FMC_BCR1_MWID_1=((uint32_t)0x00000020)
   FMC_BCR1_WAITCFG=((uint32_t)0x00000800)
   FMC_BCR1_WAITEN=((uint32_t)0x00002000)
   FMC_BCR1_WAITPOL=((uint32_t)0x00000200)
   FMC_BCR1_WFDIS=((uint32_t)0x00200000)
   FMC_BCR1_WREN=((uint32_t)0x00001000)
   FMC_BCR2_ASYNCWAIT=((uint32_t)0x00008000)
   FMC_BCR2_BURSTEN=((uint32_t)0x00000100)
   FMC_BCR2_CBURSTRW=((uint32_t)0x00080000)
   FMC_BCR2_EXTMOD=((uint32_t)0x00004000)
   FMC_BCR2_FACCEN=((uint32_t)0x00000040)
   FMC_BCR2_MBKEN=((uint32_t)0x00000001)
   FMC_BCR2_MTYP=((uint32_t)0x0000000C)
   FMC_BCR2_MTYP_0=((uint32_t)0x00000004)
   FMC_BCR2_MTYP_1=((uint32_t)0x00000008)
   FMC_BCR2_MUXEN=((uint32_t)0x00000002)
   FMC_BCR2_MWID=((uint32_t)0x00000030)
   FMC_BCR2_MWID_0=((uint32_t)0x00000010)
   FMC_BCR2_MWID_1=((uint32_t)0x00000020)
   FMC_BCR2_WAITCFG=((uint32_t)0x00000800)
   FMC_BCR2_WAITEN=((uint32_t)0x00002000)
   FMC_BCR2_WAITPOL=((uint32_t)0x00000200)
   FMC_BCR2_WREN=((uint32_t)0x00001000)
   FMC_BCR3_ASYNCWAIT=((uint32_t)0x00008000)
   FMC_BCR3_BURSTEN=((uint32_t)0x00000100)
   FMC_BCR3_CBURSTRW=((uint32_t)0x00080000)
   FMC_BCR3_EXTMOD=((uint32_t)0x00004000)
   FMC_BCR3_FACCEN=((uint32_t)0x00000040)
   FMC_BCR3_MBKEN=((uint32_t)0x00000001)
   FMC_BCR3_MTYP=((uint32_t)0x0000000C)
   FMC_BCR3_MTYP_0=((uint32_t)0x00000004)
   FMC_BCR3_MTYP_1=((uint32_t)0x00000008)
   FMC_BCR3_MUXEN=((uint32_t)0x00000002)
   FMC_BCR3_MWID=((uint32_t)0x00000030)
   FMC_BCR3_MWID_0=((uint32_t)0x00000010)
   FMC_BCR3_MWID_1=((uint32_t)0x00000020)
   FMC_BCR3_WAITCFG=((uint32_t)0x00000800)
   FMC_BCR3_WAITEN=((uint32_t)0x00002000)
   FMC_BCR3_WAITPOL=((uint32_t)0x00000200)
   FMC_BCR3_WREN=((uint32_t)0x00001000)
   FMC_BCR4_ASYNCWAIT=((uint32_t)0x00008000)
   FMC_BCR4_BURSTEN=((uint32_t)0x00000100)
   FMC_BCR4_CBURSTRW=((uint32_t)0x00080000)
   FMC_BCR4_EXTMOD=((uint32_t)0x00004000)
   FMC_BCR4_FACCEN=((uint32_t)0x00000040)
   FMC_BCR4_MBKEN=((uint32_t)0x00000001)
   FMC_BCR4_MTYP=((uint32_t)0x0000000C)
   FMC_BCR4_MTYP_0=((uint32_t)0x00000004)
   FMC_BCR4_MTYP_1=((uint32_t)0x00000008)
   FMC_BCR4_MUXEN=((uint32_t)0x00000002)
   FMC_BCR4_MWID=((uint32_t)0x00000030)
   FMC_BCR4_MWID_0=((uint32_t)0x00000010)
   FMC_BCR4_MWID_1=((uint32_t)0x00000020)
   FMC_BCR4_WAITCFG=((uint32_t)0x00000800)
   FMC_BCR4_WAITEN=((uint32_t)0x00002000)
   FMC_BCR4_WAITPOL=((uint32_t)0x00000200)
   FMC_BCR4_WREN=((uint32_t)0x00001000)
   FMC_BTR1_ACCMOD=((uint32_t)0x30000000)
   FMC_BTR1_ACCMOD_0=((uint32_t)0x10000000)
   FMC_BTR1_ACCMOD_1=((uint32_t)0x20000000)
   FMC_BTR1_ADDHLD=((uint32_t)0x000000F0)
   FMC_BTR1_ADDHLD_0=((uint32_t)0x00000010)
   FMC_BTR1_ADDHLD_1=((uint32_t)0x00000020)
   FMC_BTR1_ADDHLD_2=((uint32_t)0x00000040)
   FMC_BTR1_ADDHLD_3=((uint32_t)0x00000080)
   FMC_BTR1_ADDSET=((uint32_t)0x0000000F)
   FMC_BTR1_ADDSET_0=((uint32_t)0x00000001)
   FMC_BTR1_ADDSET_1=((uint32_t)0x00000002)
   FMC_BTR1_ADDSET_2=((uint32_t)0x00000004)
   FMC_BTR1_ADDSET_3=((uint32_t)0x00000008)
   FMC_BTR1_BUSTURN=((uint32_t)0x000F0000)
   FMC_BTR1_BUSTURN_0=((uint32_t)0x00010000)
   FMC_BTR1_BUSTURN_1=((uint32_t)0x00020000)
   FMC_BTR1_BUSTURN_2=((uint32_t)0x00040000)
   FMC_BTR1_BUSTURN_3=((uint32_t)0x00080000)
   FMC_BTR1_CLKDIV=((uint32_t)0x00F00000)
   FMC_BTR1_CLKDIV_0=((uint32_t)0x00100000)
   FMC_BTR1_CLKDIV_1=((uint32_t)0x00200000)
   FMC_BTR1_CLKDIV_2=((uint32_t)0x00400000)
   FMC_BTR1_CLKDIV_3=((uint32_t)0x00800000)
   FMC_BTR1_DATAST=((uint32_t)0x0000FF00)
   FMC_BTR1_DATAST_0=((uint32_t)0x00000100)
   FMC_BTR1_DATAST_1=((uint32_t)0x00000200)
   FMC_BTR1_DATAST_2=((uint32_t)0x00000400)
   FMC_BTR1_DATAST_3=((uint32_t)0x00000800)
   FMC_BTR1_DATAST_4=((uint32_t)0x00001000)
   FMC_BTR1_DATAST_5=((uint32_t)0x00002000)
   FMC_BTR1_DATAST_6=((uint32_t)0x00004000)
   FMC_BTR1_DATAST_7=((uint32_t)0x00008000)
   FMC_BTR1_DATLAT=((uint32_t)0x0F000000)
   FMC_BTR1_DATLAT_0=((uint32_t)0x01000000)
   FMC_BTR1_DATLAT_1=((uint32_t)0x02000000)
   FMC_BTR1_DATLAT_2=((uint32_t)0x04000000)
   FMC_BTR1_DATLAT_3=((uint32_t)0x08000000)
   FMC_BTR2_ACCMOD=((uint32_t)0x30000000)
   FMC_BTR2_ACCMOD_0=((uint32_t)0x10000000)
   FMC_BTR2_ACCMOD_1=((uint32_t)0x20000000)
   FMC_BTR2_ADDHLD=((uint32_t)0x000000F0)
   FMC_BTR2_ADDHLD_0=((uint32_t)0x00000010)
   FMC_BTR2_ADDHLD_1=((uint32_t)0x00000020)
   FMC_BTR2_ADDHLD_2=((uint32_t)0x00000040)
   FMC_BTR2_ADDHLD_3=((uint32_t)0x00000080)
   FMC_BTR2_ADDSET=((uint32_t)0x0000000F)
   FMC_BTR2_ADDSET_0=((uint32_t)0x00000001)
   FMC_BTR2_ADDSET_1=((uint32_t)0x00000002)
   FMC_BTR2_ADDSET_2=((uint32_t)0x00000004)
   FMC_BTR2_ADDSET_3=((uint32_t)0x00000008)
   FMC_BTR2_BUSTURN=((uint32_t)0x000F0000)
   FMC_BTR2_BUSTURN_0=((uint32_t)0x00010000)
   FMC_BTR2_BUSTURN_1=((uint32_t)0x00020000)
   FMC_BTR2_BUSTURN_2=((uint32_t)0x00040000)
   FMC_BTR2_BUSTURN_3=((uint32_t)0x00080000)
   FMC_BTR2_CLKDIV=((uint32_t)0x00F00000)
   FMC_BTR2_CLKDIV_0=((uint32_t)0x00100000)
   FMC_BTR2_CLKDIV_1=((uint32_t)0x00200000)
   FMC_BTR2_CLKDIV_2=((uint32_t)0x00400000)
   FMC_BTR2_CLKDIV_3=((uint32_t)0x00800000)
   FMC_BTR2_DATAST=((uint32_t)0x0000FF00)
   FMC_BTR2_DATAST_0=((uint32_t)0x00000100)
   FMC_BTR2_DATAST_1=((uint32_t)0x00000200)
   FMC_BTR2_DATAST_2=((uint32_t)0x00000400)
   FMC_BTR2_DATAST_3=((uint32_t)0x00000800)
   FMC_BTR2_DATAST_4=((uint32_t)0x00001000)
   FMC_BTR2_DATAST_5=((uint32_t)0x00002000)
   FMC_BTR2_DATAST_6=((uint32_t)0x00004000)
   FMC_BTR2_DATAST_7=((uint32_t)0x00008000)
   FMC_BTR2_DATLAT=((uint32_t)0x0F000000)
   FMC_BTR2_DATLAT_0=((uint32_t)0x01000000)
   FMC_BTR2_DATLAT_1=((uint32_t)0x02000000)
   FMC_BTR2_DATLAT_2=((uint32_t)0x04000000)
   FMC_BTR2_DATLAT_3=((uint32_t)0x08000000)
   FMC_BTR3_ACCMOD=((uint32_t)0x30000000)
   FMC_BTR3_ACCMOD_0=((uint32_t)0x10000000)
   FMC_BTR3_ACCMOD_1=((uint32_t)0x20000000)
   FMC_BTR3_ADDHLD=((uint32_t)0x000000F0)
   FMC_BTR3_ADDHLD_0=((uint32_t)0x00000010)
   FMC_BTR3_ADDHLD_1=((uint32_t)0x00000020)
   FMC_BTR3_ADDHLD_2=((uint32_t)0x00000040)
   FMC_BTR3_ADDHLD_3=((uint32_t)0x00000080)
   FMC_BTR3_ADDSET=((uint32_t)0x0000000F)
   FMC_BTR3_ADDSET_0=((uint32_t)0x00000001)
   FMC_BTR3_ADDSET_1=((uint32_t)0x00000002)
   FMC_BTR3_ADDSET_2=((uint32_t)0x00000004)
   FMC_BTR3_ADDSET_3=((uint32_t)0x00000008)
   FMC_BTR3_BUSTURN=((uint32_t)0x000F0000)
   FMC_BTR3_BUSTURN_0=((uint32_t)0x00010000)
   FMC_BTR3_BUSTURN_1=((uint32_t)0x00020000)
   FMC_BTR3_BUSTURN_2=((uint32_t)0x00040000)
   FMC_BTR3_BUSTURN_3=((uint32_t)0x00080000)
   FMC_BTR3_CLKDIV=((uint32_t)0x00F00000)
   FMC_BTR3_CLKDIV_0=((uint32_t)0x00100000)
   FMC_BTR3_CLKDIV_1=((uint32_t)0x00200000)
   FMC_BTR3_CLKDIV_2=((uint32_t)0x00400000)
   FMC_BTR3_CLKDIV_3=((uint32_t)0x00800000)
   FMC_BTR3_DATAST=((uint32_t)0x0000FF00)
   FMC_BTR3_DATAST_0=((uint32_t)0x00000100)
   FMC_BTR3_DATAST_1=((uint32_t)0x00000200)
   FMC_BTR3_DATAST_2=((uint32_t)0x00000400)
   FMC_BTR3_DATAST_3=((uint32_t)0x00000800)
   FMC_BTR3_DATAST_4=((uint32_t)0x00001000)
   FMC_BTR3_DATAST_5=((uint32_t)0x00002000)
   FMC_BTR3_DATAST_6=((uint32_t)0x00004000)
   FMC_BTR3_DATAST_7=((uint32_t)0x00008000)
   FMC_BTR3_DATLAT=((uint32_t)0x0F000000)
   FMC_BTR3_DATLAT_0=((uint32_t)0x01000000)
   FMC_BTR3_DATLAT_1=((uint32_t)0x02000000)
   FMC_BTR3_DATLAT_2=((uint32_t)0x04000000)
   FMC_BTR3_DATLAT_3=((uint32_t)0x08000000)
   FMC_BTR4_ACCMOD=((uint32_t)0x30000000)
   FMC_BTR4_ACCMOD_0=((uint32_t)0x10000000)
   FMC_BTR4_ACCMOD_1=((uint32_t)0x20000000)
   FMC_BTR4_ADDHLD=((uint32_t)0x000000F0)
   FMC_BTR4_ADDHLD_0=((uint32_t)0x00000010)
   FMC_BTR4_ADDHLD_1=((uint32_t)0x00000020)
   FMC_BTR4_ADDHLD_2=((uint32_t)0x00000040)
   FMC_BTR4_ADDHLD_3=((uint32_t)0x00000080)
   FMC_BTR4_ADDSET=((uint32_t)0x0000000F)
   FMC_BTR4_ADDSET_0=((uint32_t)0x00000001)
   FMC_BTR4_ADDSET_1=((uint32_t)0x00000002)
   FMC_BTR4_ADDSET_2=((uint32_t)0x00000004)
   FMC_BTR4_ADDSET_3=((uint32_t)0x00000008)
   FMC_BTR4_BUSTURN=((uint32_t)0x000F0000)
   FMC_BTR4_BUSTURN_0=((uint32_t)0x00010000)
   FMC_BTR4_BUSTURN_1=((uint32_t)0x00020000)
   FMC_BTR4_BUSTURN_2=((uint32_t)0x00040000)
   FMC_BTR4_BUSTURN_3=((uint32_t)0x00080000)
   FMC_BTR4_CLKDIV=((uint32_t)0x00F00000)
   FMC_BTR4_CLKDIV_0=((uint32_t)0x00100000)
   FMC_BTR4_CLKDIV_1=((uint32_t)0x00200000)
   FMC_BTR4_CLKDIV_2=((uint32_t)0x00400000)
   FMC_BTR4_CLKDIV_3=((uint32_t)0x00800000)
   FMC_BTR4_DATAST=((uint32_t)0x0000FF00)
   FMC_BTR4_DATAST_0=((uint32_t)0x00000100)
   FMC_BTR4_DATAST_1=((uint32_t)0x00000200)
   FMC_BTR4_DATAST_2=((uint32_t)0x00000400)
   FMC_BTR4_DATAST_3=((uint32_t)0x00000800)
   FMC_BTR4_DATAST_4=((uint32_t)0x00001000)
   FMC_BTR4_DATAST_5=((uint32_t)0x00002000)
   FMC_BTR4_DATAST_6=((uint32_t)0x00004000)
   FMC_BTR4_DATAST_7=((uint32_t)0x00008000)
   FMC_BTR4_DATLAT=((uint32_t)0x0F000000)
   FMC_BTR4_DATLAT_0=((uint32_t)0x01000000)
   FMC_BTR4_DATLAT_1=((uint32_t)0x02000000)
   FMC_BTR4_DATLAT_2=((uint32_t)0x04000000)
   FMC_BTR4_DATLAT_3=((uint32_t)0x08000000)
   FMC_BURST_ACCESS_MODE_DISABLE=((uint32_t)0x00000000)
   FMC_BURST_ACCESS_MODE_ENABLE=((uint32_t)0x00000100)
   FMC_BWTR1_ACCMOD=((uint32_t)0x30000000)
   FMC_BWTR1_ACCMOD_0=((uint32_t)0x10000000)
   FMC_BWTR1_ACCMOD_1=((uint32_t)0x20000000)
   FMC_BWTR1_ADDHLD=((uint32_t)0x000000F0)
   FMC_BWTR1_ADDHLD_0=((uint32_t)0x00000010)
   FMC_BWTR1_ADDHLD_1=((uint32_t)0x00000020)
   FMC_BWTR1_ADDHLD_2=((uint32_t)0x00000040)
   FMC_BWTR1_ADDHLD_3=((uint32_t)0x00000080)
   FMC_BWTR1_ADDSET=((uint32_t)0x0000000F)
   FMC_BWTR1_ADDSET_0=((uint32_t)0x00000001)
   FMC_BWTR1_ADDSET_1=((uint32_t)0x00000002)
   FMC_BWTR1_ADDSET_2=((uint32_t)0x00000004)
   FMC_BWTR1_ADDSET_3=((uint32_t)0x00000008)
   FMC_BWTR1_BUSTURN=((uint32_t)0x000F0000)
   FMC_BWTR1_BUSTURN_0=((uint32_t)0x00010000)
   FMC_BWTR1_BUSTURN_1=((uint32_t)0x00020000)
   FMC_BWTR1_BUSTURN_2=((uint32_t)0x00040000)
   FMC_BWTR1_BUSTURN_3=((uint32_t)0x00080000)
   FMC_BWTR1_DATAST=((uint32_t)0x0000FF00)
   FMC_BWTR1_DATAST_0=((uint32_t)0x00000100)
   FMC_BWTR1_DATAST_1=((uint32_t)0x00000200)
   FMC_BWTR1_DATAST_2=((uint32_t)0x00000400)
   FMC_BWTR1_DATAST_3=((uint32_t)0x00000800)
   FMC_BWTR1_DATAST_4=((uint32_t)0x00001000)
   FMC_BWTR1_DATAST_5=((uint32_t)0x00002000)
   FMC_BWTR1_DATAST_6=((uint32_t)0x00004000)
   FMC_BWTR1_DATAST_7=((uint32_t)0x00008000)
   FMC_BWTR2_ACCMOD=((uint32_t)0x30000000)
   FMC_BWTR2_ACCMOD_0=((uint32_t)0x10000000)
   FMC_BWTR2_ACCMOD_1=((uint32_t)0x20000000)
   FMC_BWTR2_ADDHLD=((uint32_t)0x000000F0)
   FMC_BWTR2_ADDHLD_0=((uint32_t)0x00000010)
   FMC_BWTR2_ADDHLD_1=((uint32_t)0x00000020)
   FMC_BWTR2_ADDHLD_2=((uint32_t)0x00000040)
   FMC_BWTR2_ADDHLD_3=((uint32_t)0x00000080)
   FMC_BWTR2_ADDSET=((uint32_t)0x0000000F)
   FMC_BWTR2_ADDSET_0=((uint32_t)0x00000001)
   FMC_BWTR2_ADDSET_1=((uint32_t)0x00000002)
   FMC_BWTR2_ADDSET_2=((uint32_t)0x00000004)
   FMC_BWTR2_ADDSET_3=((uint32_t)0x00000008)
   FMC_BWTR2_BUSTURN=((uint32_t)0x000F0000)
   FMC_BWTR2_BUSTURN_0=((uint32_t)0x00010000)
   FMC_BWTR2_BUSTURN_1=((uint32_t)0x00020000)
   FMC_BWTR2_BUSTURN_2=((uint32_t)0x00040000)
   FMC_BWTR2_BUSTURN_3=((uint32_t)0x00080000)
   FMC_BWTR2_DATAST=((uint32_t)0x0000FF00)
   FMC_BWTR2_DATAST_0=((uint32_t)0x00000100)
   FMC_BWTR2_DATAST_1=((uint32_t)0x00000200)
   FMC_BWTR2_DATAST_2=((uint32_t)0x00000400)
   FMC_BWTR2_DATAST_3=((uint32_t)0x00000800)
   FMC_BWTR2_DATAST_4=((uint32_t)0x00001000)
   FMC_BWTR2_DATAST_5=((uint32_t)0x00002000)
   FMC_BWTR2_DATAST_6=((uint32_t)0x00004000)
   FMC_BWTR2_DATAST_7=((uint32_t)0x00008000)
   FMC_BWTR3_ACCMOD=((uint32_t)0x30000000)
   FMC_BWTR3_ACCMOD_0=((uint32_t)0x10000000)
   FMC_BWTR3_ACCMOD_1=((uint32_t)0x20000000)
   FMC_BWTR3_ADDHLD=((uint32_t)0x000000F0)
   FMC_BWTR3_ADDHLD_0=((uint32_t)0x00000010)
   FMC_BWTR3_ADDHLD_1=((uint32_t)0x00000020)
   FMC_BWTR3_ADDHLD_2=((uint32_t)0x00000040)
   FMC_BWTR3_ADDHLD_3=((uint32_t)0x00000080)
   FMC_BWTR3_ADDSET=((uint32_t)0x0000000F)
   FMC_BWTR3_ADDSET_0=((uint32_t)0x00000001)
   FMC_BWTR3_ADDSET_1=((uint32_t)0x00000002)
   FMC_BWTR3_ADDSET_2=((uint32_t)0x00000004)
   FMC_BWTR3_ADDSET_3=((uint32_t)0x00000008)
   FMC_BWTR3_BUSTURN=((uint32_t)0x000F0000)
   FMC_BWTR3_BUSTURN_0=((uint32_t)0x00010000)
   FMC_BWTR3_BUSTURN_1=((uint32_t)0x00020000)
   FMC_BWTR3_BUSTURN_2=((uint32_t)0x00040000)
   FMC_BWTR3_BUSTURN_3=((uint32_t)0x00080000)
   FMC_BWTR3_DATAST=((uint32_t)0x0000FF00)
   FMC_BWTR3_DATAST_0=((uint32_t)0x00000100)
   FMC_BWTR3_DATAST_1=((uint32_t)0x00000200)
   FMC_BWTR3_DATAST_2=((uint32_t)0x00000400)
   FMC_BWTR3_DATAST_3=((uint32_t)0x00000800)
   FMC_BWTR3_DATAST_4=((uint32_t)0x00001000)
   FMC_BWTR3_DATAST_5=((uint32_t)0x00002000)
   FMC_BWTR3_DATAST_6=((uint32_t)0x00004000)
   FMC_BWTR3_DATAST_7=((uint32_t)0x00008000)
   FMC_BWTR4_ACCMOD=((uint32_t)0x30000000)
   FMC_BWTR4_ACCMOD_0=((uint32_t)0x10000000)
   FMC_BWTR4_ACCMOD_1=((uint32_t)0x20000000)
   FMC_BWTR4_ADDHLD=((uint32_t)0x000000F0)
   FMC_BWTR4_ADDHLD_0=((uint32_t)0x00000010)
   FMC_BWTR4_ADDHLD_1=((uint32_t)0x00000020)
   FMC_BWTR4_ADDHLD_2=((uint32_t)0x00000040)
   FMC_BWTR4_ADDHLD_3=((uint32_t)0x00000080)
   FMC_BWTR4_ADDSET=((uint32_t)0x0000000F)
   FMC_BWTR4_ADDSET_0=((uint32_t)0x00000001)
   FMC_BWTR4_ADDSET_1=((uint32_t)0x00000002)
   FMC_BWTR4_ADDSET_2=((uint32_t)0x00000004)
   FMC_BWTR4_ADDSET_3=((uint32_t)0x00000008)
   FMC_BWTR4_BUSTURN=((uint32_t)0x000F0000)
   FMC_BWTR4_BUSTURN_0=((uint32_t)0x00010000)
   FMC_BWTR4_BUSTURN_1=((uint32_t)0x00020000)
   FMC_BWTR4_BUSTURN_2=((uint32_t)0x00040000)
   FMC_BWTR4_BUSTURN_3=((uint32_t)0x00080000)
   FMC_BWTR4_DATAST=((uint32_t)0x0000FF00)
   FMC_BWTR4_DATAST_0=((uint32_t)0x00000100)
   FMC_BWTR4_DATAST_1=((uint32_t)0x00000200)
   FMC_BWTR4_DATAST_2=((uint32_t)0x00000400)
   FMC_BWTR4_DATAST_3=((uint32_t)0x00000800)
   FMC_BWTR4_DATAST_4=((uint32_t)0x00001000)
   FMC_BWTR4_DATAST_5=((uint32_t)0x00002000)
   FMC_BWTR4_DATAST_6=((uint32_t)0x00004000)
   FMC_BWTR4_DATAST_7=((uint32_t)0x00008000)
   FMC_CONTINUOUS_CLOCK_SYNC_ASYNC=((uint32_t)0x00100000)
   FMC_CONTINUOUS_CLOCK_SYNC_ONLY=((uint32_t)0x00000000)
   FMC_DATA_ADDRESS_MUX_DISABLE=((uint32_t)0x00000000)
   FMC_DATA_ADDRESS_MUX_ENABLE=((uint32_t)0x00000002)
   FMC_ECCR_ECC2=((uint32_t)0xFFFFFFFF)
   FMC_EXTENDED_MODE_DISABLE=((uint32_t)0x00000000)
   FMC_EXTENDED_MODE_ENABLE=((uint32_t)0x00004000)
   FMC_FLAG_FALLING_EDGE=((uint32_t)0x00000004)
   FMC_FLAG_FEMPT=((uint32_t)0x00000040)
   FMC_FLAG_LEVEL=((uint32_t)0x00000002)
   FMC_FLAG_RISING_EDGE=((uint32_t)0x00000001)
   FMC_IT_FALLING_EDGE=((uint32_t)0x00000020)
   FMC_IT_LEVEL=((uint32_t)0x00000010)
   FMC_IT_REFRESH_ERROR=((uint32_t)0x00004000)
   FMC_IT_RISING_EDGE=((uint32_t)0x00000008)
   FMC_MEMORY_TYPE_NOR=((uint32_t)0x00000008)
   FMC_MEMORY_TYPE_PSRAM=((uint32_t)0x00000004)
   FMC_MEMORY_TYPE_SRAM=((uint32_t)0x00000000)
   FMC_NAND_BANK2=((uint32_t)0x00000010)
   FMC_NAND_BANK3=((uint32_t)0x00000100)
   FMC_NAND_DEVICE=FMC_Bank3
   FMC_NAND_ECC_DISABLE=((uint32_t)0x00000000)
   FMC_NAND_ECC_ENABLE=((uint32_t)0x00000040)
   FMC_NAND_ECC_PAGE_SIZE_1024BYTE=((uint32_t)0x00040000)
   FMC_NAND_ECC_PAGE_SIZE_2048BYTE=((uint32_t)0x00060000)
   FMC_NAND_ECC_PAGE_SIZE_256BYTE=((uint32_t)0x00000000)
   FMC_NAND_ECC_PAGE_SIZE_4096BYTE=((uint32_t)0x00080000)
   FMC_NAND_ECC_PAGE_SIZE_512BYTE=((uint32_t)0x00020000)
   FMC_NAND_ECC_PAGE_SIZE_8192BYTE=((uint32_t)0x000A0000)
   FMC_NAND_MEM_BUS_WIDTH_16=FMC_NAND_PCC_MEM_BUS_WIDTH_16
   FMC_NAND_MEM_BUS_WIDTH_8=FMC_NAND_PCC_MEM_BUS_WIDTH_8
   FMC_NAND_PCC_MEM_BUS_WIDTH_16=((uint32_t)0x00000010)
   FMC_NAND_PCC_MEM_BUS_WIDTH_8=((uint32_t)0x00000000)
   FMC_NAND_PCC_WAIT_FEATURE_DISABLE=((uint32_t)0x00000000)
   FMC_NAND_PCC_WAIT_FEATURE_ENABLE=((uint32_t)0x00000002)
   FMC_NAND_TypeDef=FMC_Bank3_TypeDef
   FMC_NAND_WAIT_FEATURE_DISABLE=FMC_NAND_PCC_WAIT_FEATURE_DISABLE
   FMC_NAND_WAIT_FEATURE_ENABLE=FMC_NAND_PCC_WAIT_FEATURE_ENABLE
   FMC_NORSRAM_BANK1=((uint32_t)0x00000000)
   FMC_NORSRAM_BANK2=((uint32_t)0x00000002)
   FMC_NORSRAM_BANK3=((uint32_t)0x00000004)
   FMC_NORSRAM_BANK4=((uint32_t)0x00000006)
   FMC_NORSRAM_DEVICE=FMC_Bank1
   FMC_NORSRAM_EXTENDED_DEVICE=FMC_Bank1E
   FMC_NORSRAM_EXTENDED_TypeDef=FMC_Bank1E_TypeDef
   FMC_NORSRAM_FLASH_ACCESS_DISABLE=((uint32_t)0x00000000)
   FMC_NORSRAM_FLASH_ACCESS_ENABLE=((uint32_t)0x00000040)
   FMC_NORSRAM_MEM_BUS_WIDTH_16=((uint32_t)0x00000010)
   FMC_NORSRAM_MEM_BUS_WIDTH_32=((uint32_t)0x00000020)
   FMC_NORSRAM_MEM_BUS_WIDTH_8=((uint32_t)0x00000000)
   FMC_NORSRAM_TypeDef=FMC_Bank1_TypeDef
   FMC_PAGE_SIZE_1024=((uint32_t)FMC_BCR1_CPSIZE_2)
   FMC_PAGE_SIZE_128=((uint32_t)FMC_BCR1_CPSIZE_0)
   FMC_PAGE_SIZE_256=((uint32_t)FMC_BCR1_CPSIZE_1)
   FMC_PAGE_SIZE_NONE=((uint32_t)0x00000000)
   FMC_PATT_ATTHIZ2=((uint32_t)0xFF000000)
   FMC_PATT_ATTHIZ2_0=((uint32_t)0x01000000)
   FMC_PATT_ATTHIZ2_1=((uint32_t)0x02000000)
   FMC_PATT_ATTHIZ2_2=((uint32_t)0x04000000)
   FMC_PATT_ATTHIZ2_3=((uint32_t)0x08000000)
   FMC_PATT_ATTHIZ2_4=((uint32_t)0x10000000)
   FMC_PATT_ATTHIZ2_5=((uint32_t)0x20000000)
   FMC_PATT_ATTHIZ2_6=((uint32_t)0x40000000)
   FMC_PATT_ATTHIZ2_7=((uint32_t)0x80000000)
   FMC_PATT_ATTHOLD2=((uint32_t)0x00FF0000)
   FMC_PATT_ATTHOLD2_0=((uint32_t)0x00010000)
   FMC_PATT_ATTHOLD2_1=((uint32_t)0x00020000)
   FMC_PATT_ATTHOLD2_2=((uint32_t)0x00040000)
   FMC_PATT_ATTHOLD2_3=((uint32_t)0x00080000)
   FMC_PATT_ATTHOLD2_4=((uint32_t)0x00100000)
   FMC_PATT_ATTHOLD2_5=((uint32_t)0x00200000)
   FMC_PATT_ATTHOLD2_6=((uint32_t)0x00400000)
   FMC_PATT_ATTHOLD2_7=((uint32_t)0x00800000)
   FMC_PATT_ATTSET2=((uint32_t)0x000000FF)
   FMC_PATT_ATTSET2_0=((uint32_t)0x00000001)
   FMC_PATT_ATTSET2_1=((uint32_t)0x00000002)
   FMC_PATT_ATTSET2_2=((uint32_t)0x00000004)
   FMC_PATT_ATTSET2_3=((uint32_t)0x00000008)
   FMC_PATT_ATTSET2_4=((uint32_t)0x00000010)
   FMC_PATT_ATTSET2_5=((uint32_t)0x00000020)
   FMC_PATT_ATTSET2_6=((uint32_t)0x00000040)
   FMC_PATT_ATTSET2_7=((uint32_t)0x00000080)
   FMC_PATT_ATTWAIT2=((uint32_t)0x0000FF00)
   FMC_PATT_ATTWAIT2_0=((uint32_t)0x00000100)
   FMC_PATT_ATTWAIT2_1=((uint32_t)0x00000200)
   FMC_PATT_ATTWAIT2_2=((uint32_t)0x00000400)
   FMC_PATT_ATTWAIT2_3=((uint32_t)0x00000800)
   FMC_PATT_ATTWAIT2_4=((uint32_t)0x00001000)
   FMC_PATT_ATTWAIT2_5=((uint32_t)0x00002000)
   FMC_PATT_ATTWAIT2_6=((uint32_t)0x00004000)
   FMC_PATT_ATTWAIT2_7=((uint32_t)0x00008000)
   FMC_PCR_ECCEN=((uint32_t)0x00000040)
   FMC_PCR_ECCPS=((uint32_t)0x000E0000)
   FMC_PCR_ECCPS_0=((uint32_t)0x00020000)
   FMC_PCR_ECCPS_1=((uint32_t)0x00040000)
   FMC_PCR_ECCPS_2=((uint32_t)0x00080000)
   FMC_PCR_MEMORY_TYPE_NAND=((uint32_t)0x00000008)
   FMC_PCR_MEMORY_TYPE_PCCARD=((uint32_t)0x00000000)
   FMC_PCR_PBKEN=((uint32_t)0x00000004)
   FMC_PCR_PTYP=((uint32_t)0x00000008)
   FMC_PCR_PWAITEN=((uint32_t)0x00000002)
   FMC_PCR_PWID=((uint32_t)0x00000030)
   FMC_PCR_PWID_0=((uint32_t)0x00000010)
   FMC_PCR_PWID_1=((uint32_t)0x00000020)
   FMC_PCR_TAR=((uint32_t)0x0001E000)
   FMC_PCR_TAR_0=((uint32_t)0x00002000)
   FMC_PCR_TAR_1=((uint32_t)0x00004000)
   FMC_PCR_TAR_2=((uint32_t)0x00008000)
   FMC_PCR_TAR_3=((uint32_t)0x00010000)
   FMC_PCR_TCLR=((uint32_t)0x00001E00)
   FMC_PCR_TCLR_0=((uint32_t)0x00000200)
   FMC_PCR_TCLR_1=((uint32_t)0x00000400)
   FMC_PCR_TCLR_2=((uint32_t)0x00000800)
   FMC_PCR_TCLR_3=((uint32_t)0x00001000)
   FMC_PMEM_MEMHIZ2=((uint32_t)0xFF000000)
   FMC_PMEM_MEMHIZ2_0=((uint32_t)0x01000000)
   FMC_PMEM_MEMHIZ2_1=((uint32_t)0x02000000)
   FMC_PMEM_MEMHIZ2_2=((uint32_t)0x04000000)
   FMC_PMEM_MEMHIZ2_3=((uint32_t)0x08000000)
   FMC_PMEM_MEMHIZ2_4=((uint32_t)0x10000000)
   FMC_PMEM_MEMHIZ2_5=((uint32_t)0x20000000)
   FMC_PMEM_MEMHIZ2_6=((uint32_t)0x40000000)
   FMC_PMEM_MEMHIZ2_7=((uint32_t)0x80000000)
   FMC_PMEM_MEMHOLD2=((uint32_t)0x00FF0000)
   FMC_PMEM_MEMHOLD2_0=((uint32_t)0x00010000)
   FMC_PMEM_MEMHOLD2_1=((uint32_t)0x00020000)
   FMC_PMEM_MEMHOLD2_2=((uint32_t)0x00040000)
   FMC_PMEM_MEMHOLD2_3=((uint32_t)0x00080000)
   FMC_PMEM_MEMHOLD2_4=((uint32_t)0x00100000)
   FMC_PMEM_MEMHOLD2_5=((uint32_t)0x00200000)
   FMC_PMEM_MEMHOLD2_6=((uint32_t)0x00400000)
   FMC_PMEM_MEMHOLD2_7=((uint32_t)0x00800000)
   FMC_PMEM_MEMSET2=((uint32_t)0x000000FF)
   FMC_PMEM_MEMSET2_0=((uint32_t)0x00000001)
   FMC_PMEM_MEMSET2_1=((uint32_t)0x00000002)
   FMC_PMEM_MEMSET2_2=((uint32_t)0x00000004)
   FMC_PMEM_MEMSET2_3=((uint32_t)0x00000008)
   FMC_PMEM_MEMSET2_4=((uint32_t)0x00000010)
   FMC_PMEM_MEMSET2_5=((uint32_t)0x00000020)
   FMC_PMEM_MEMSET2_6=((uint32_t)0x00000040)
   FMC_PMEM_MEMSET2_7=((uint32_t)0x00000080)
   FMC_PMEM_MEMWAIT2=((uint32_t)0x0000FF00)
   FMC_PMEM_MEMWAIT2_0=((uint32_t)0x00000100)
   FMC_PMEM_MEMWAIT2_1=((uint32_t)0x00000200)
   FMC_PMEM_MEMWAIT2_2=((uint32_t)0x00000400)
   FMC_PMEM_MEMWAIT2_3=((uint32_t)0x00000800)
   FMC_PMEM_MEMWAIT2_4=((uint32_t)0x00001000)
   FMC_PMEM_MEMWAIT2_5=((uint32_t)0x00002000)
   FMC_PMEM_MEMWAIT2_6=((uint32_t)0x00004000)
   FMC_PMEM_MEMWAIT2_7=((uint32_t)0x00008000)
   FMC_R_BASE=((uint32_t)0xA0000000)
   FMC_SDCMR_CTB1=((uint32_t)0x00000010)
   FMC_SDCMR_CTB2=((uint32_t)0x00000008)
   FMC_SDCMR_MODE=((uint32_t)0x00000007)
   FMC_SDCMR_MODE_0=((uint32_t)0x00000001)
   FMC_SDCMR_MODE_1=((uint32_t)0x00000002)
   FMC_SDCMR_MODE_2=((uint32_t)0x00000004)
   FMC_SDCMR_MRD=((uint32_t)0x003FFE00)
   FMC_SDCMR_NRFS=((uint32_t)0x000001E0)
   FMC_SDCMR_NRFS_0=((uint32_t)0x00000020)
   FMC_SDCMR_NRFS_1=((uint32_t)0x00000040)
   FMC_SDCMR_NRFS_2=((uint32_t)0x00000080)
   FMC_SDCMR_NRFS_3=((uint32_t)0x00000100)
   FMC_SDCR1_CAS=((uint32_t)0x00000180)
   FMC_SDCR1_CAS_0=((uint32_t)0x00000080)
   FMC_SDCR1_CAS_1=((uint32_t)0x00000100)
   FMC_SDCR1_MWID=((uint32_t)0x00000030)
   FMC_SDCR1_MWID_0=((uint32_t)0x00000010)
   FMC_SDCR1_MWID_1=((uint32_t)0x00000020)
   FMC_SDCR1_NB=((uint32_t)0x00000040)
   FMC_SDCR1_NC=((uint32_t)0x00000003)
   FMC_SDCR1_NC_0=((uint32_t)0x00000001)
   FMC_SDCR1_NC_1=((uint32_t)0x00000002)
   FMC_SDCR1_NR=((uint32_t)0x0000000C)
   FMC_SDCR1_NR_0=((uint32_t)0x00000004)
   FMC_SDCR1_NR_1=((uint32_t)0x00000008)
   FMC_SDCR1_RBURST=((uint32_t)0x00001000)
   FMC_SDCR1_RPIPE=((uint32_t)0x00006000)
   FMC_SDCR1_RPIPE_0=((uint32_t)0x00002000)
   FMC_SDCR1_RPIPE_1=((uint32_t)0x00004000)
   FMC_SDCR1_SDCLK=((uint32_t)0x00000C00)
   FMC_SDCR1_SDCLK_0=((uint32_t)0x00000400)
   FMC_SDCR1_SDCLK_1=((uint32_t)0x00000800)
   FMC_SDCR1_WP=((uint32_t)0x00000200)
   FMC_SDCR2_CAS=((uint32_t)0x00000180)
   FMC_SDCR2_CAS_0=((uint32_t)0x00000080)
   FMC_SDCR2_CAS_1=((uint32_t)0x00000100)
   FMC_SDCR2_MWID=((uint32_t)0x00000030)
   FMC_SDCR2_MWID_0=((uint32_t)0x00000010)
   FMC_SDCR2_MWID_1=((uint32_t)0x00000020)
   FMC_SDCR2_NB=((uint32_t)0x00000040)
   FMC_SDCR2_NC=((uint32_t)0x00000003)
   FMC_SDCR2_NC_0=((uint32_t)0x00000001)
   FMC_SDCR2_NC_1=((uint32_t)0x00000002)
   FMC_SDCR2_NR=((uint32_t)0x0000000C)
   FMC_SDCR2_NR_0=((uint32_t)0x00000004)
   FMC_SDCR2_NR_1=((uint32_t)0x00000008)
   FMC_SDCR2_RBURST=((uint32_t)0x00001000)
   FMC_SDCR2_RPIPE=((uint32_t)0x00006000)
   FMC_SDCR2_RPIPE_0=((uint32_t)0x00002000)
   FMC_SDCR2_RPIPE_1=((uint32_t)0x00004000)
   FMC_SDCR2_SDCLK=((uint32_t)0x00000C00)
   FMC_SDCR2_SDCLK_0=((uint32_t)0x00000400)
   FMC_SDCR2_SDCLK_1=((uint32_t)0x00000800)
   FMC_SDCR2_WP=((uint32_t)0x00000200)
   FMC_SDRAM_BANK1=((uint32_t)0x00000000)
   FMC_SDRAM_BANK2=((uint32_t)0x00000001)
   FMC_SDRAM_CAS_LATENCY_1=((uint32_t)0x00000080)
   FMC_SDRAM_CAS_LATENCY_2=((uint32_t)0x00000100)
   FMC_SDRAM_CAS_LATENCY_3=((uint32_t)0x00000180)
   FMC_SDRAM_CLOCK_DISABLE=((uint32_t)0x00000000)
   FMC_SDRAM_CLOCK_PERIOD_2=((uint32_t)0x00000800)
   FMC_SDRAM_CLOCK_PERIOD_3=((uint32_t)0x00000C00)
   FMC_SDRAM_CMD_AUTOREFRESH_MODE=((uint32_t)0x00000003)
   FMC_SDRAM_CMD_CLK_ENABLE=((uint32_t)0x00000001)
   FMC_SDRAM_CMD_LOAD_MODE=((uint32_t)0x00000004)
   FMC_SDRAM_CMD_NORMAL_MODE=((uint32_t)0x00000000)
   FMC_SDRAM_CMD_PALL=((uint32_t)0x00000002)
   FMC_SDRAM_CMD_POWERDOWN_MODE=((uint32_t)0x00000006)
   FMC_SDRAM_CMD_SELFREFRESH_MODE=((uint32_t)0x00000005)
   FMC_SDRAM_CMD_TARGET_BANK1=FMC_SDCMR_CTB1
   FMC_SDRAM_CMD_TARGET_BANK1_2=((uint32_t)0x00000018)
   FMC_SDRAM_CMD_TARGET_BANK2=FMC_SDCMR_CTB2
   FMC_SDRAM_COLUMN_BITS_NUM_10=((uint32_t)0x00000002)
   FMC_SDRAM_COLUMN_BITS_NUM_11=((uint32_t)0x00000003)
   FMC_SDRAM_COLUMN_BITS_NUM_8=((uint32_t)0x00000000)
   FMC_SDRAM_COLUMN_BITS_NUM_9=((uint32_t)0x00000001)
   FMC_SDRAM_DEVICE=FMC_Bank5_6
   FMC_SDRAM_FLAG_BUSY=FMC_SDSR_BUSY
   FMC_SDRAM_FLAG_REFRESH_ERROR=FMC_SDRTR_CRE
   FMC_SDRAM_FLAG_REFRESH_IT=FMC_SDSR_RE
   FMC_SDRAM_INTERN_BANKS_NUM_2=((uint32_t)0x00000000)
   FMC_SDRAM_INTERN_BANKS_NUM_4=((uint32_t)0x00000040)
   FMC_SDRAM_MEM_BUS_WIDTH_16=((uint32_t)0x00000010)
   FMC_SDRAM_MEM_BUS_WIDTH_32=((uint32_t)0x00000020)
   FMC_SDRAM_MEM_BUS_WIDTH_8=((uint32_t)0x00000000)
   FMC_SDRAM_NORMAL_MODE=((uint32_t)0x00000000)
   FMC_SDRAM_POWER_DOWN_MODE=FMC_SDSR_MODES1_1
   FMC_SDRAM_RBURST_DISABLE=((uint32_t)0x00000000)
   FMC_SDRAM_RBURST_ENABLE=((uint32_t)0x00001000)
   FMC_SDRAM_ROW_BITS_NUM_11=((uint32_t)0x00000000)
   FMC_SDRAM_ROW_BITS_NUM_12=((uint32_t)0x00000004)
   FMC_SDRAM_ROW_BITS_NUM_13=((uint32_t)0x00000008)
   FMC_SDRAM_RPIPE_DELAY_0=((uint32_t)0x00000000)
   FMC_SDRAM_RPIPE_DELAY_1=((uint32_t)0x00002000)
   FMC_SDRAM_RPIPE_DELAY_2=((uint32_t)0x00004000)
   FMC_SDRAM_SELF_REFRESH_MODE=FMC_SDSR_MODES1_0
   FMC_SDRAM_TypeDef=FMC_Bank5_6_TypeDef
   FMC_SDRAM_WRITE_PROTECTION_DISABLE=((uint32_t)0x00000000)
   FMC_SDRAM_WRITE_PROTECTION_ENABLE=((uint32_t)0x00000200)
   FMC_SDRTR_COUNT=((uint32_t)0x00003FFE)
   FMC_SDRTR_CRE=((uint32_t)0x00000001)
   FMC_SDRTR_REIE=((uint32_t)0x00004000)
   FMC_SDSR_BUSY=((uint32_t)0x00000020)
   FMC_SDSR_MODES1=((uint32_t)0x00000006)
   FMC_SDSR_MODES1_0=((uint32_t)0x00000002)
   FMC_SDSR_MODES1_1=((uint32_t)0x00000004)
   FMC_SDSR_MODES2=((uint32_t)0x00000018)
   FMC_SDSR_MODES2_0=((uint32_t)0x00000008)
   FMC_SDSR_MODES2_1=((uint32_t)0x00000010)
   FMC_SDSR_RE=((uint32_t)0x00000001)
   FMC_SDTR1_TMRD=((uint32_t)0x0000000F)
   FMC_SDTR1_TMRD_0=((uint32_t)0x00000001)
   FMC_SDTR1_TMRD_1=((uint32_t)0x00000002)
   FMC_SDTR1_TMRD_2=((uint32_t)0x00000004)
   FMC_SDTR1_TMRD_3=((uint32_t)0x00000008)
   FMC_SDTR1_TRAS=((uint32_t)0x00000F00)
   FMC_SDTR1_TRAS_0=((uint32_t)0x00000100)
   FMC_SDTR1_TRAS_1=((uint32_t)0x00000200)
   FMC_SDTR1_TRAS_2=((uint32_t)0x00000400)
   FMC_SDTR1_TRAS_3=((uint32_t)0x00000800)
   FMC_SDTR1_TRC=((uint32_t)0x0000F000)
   FMC_SDTR1_TRCD=((uint32_t)0x0F000000)
   FMC_SDTR1_TRCD_0=((uint32_t)0x01000000)
   FMC_SDTR1_TRCD_1=((uint32_t)0x02000000)
   FMC_SDTR1_TRCD_2=((uint32_t)0x04000000)
   FMC_SDTR1_TRC_0=((uint32_t)0x00001000)
   FMC_SDTR1_TRC_1=((uint32_t)0x00002000)
   FMC_SDTR1_TRC_2=((uint32_t)0x00004000)
   FMC_SDTR1_TRP=((uint32_t)0x00F00000)
   FMC_SDTR1_TRP_0=((uint32_t)0x00100000)
   FMC_SDTR1_TRP_1=((uint32_t)0x00200000)
   FMC_SDTR1_TRP_2=((uint32_t)0x00400000)
   FMC_SDTR1_TWR=((uint32_t)0x000F0000)
   FMC_SDTR1_TWR_0=((uint32_t)0x00010000)
   FMC_SDTR1_TWR_1=((uint32_t)0x00020000)
   FMC_SDTR1_TWR_2=((uint32_t)0x00040000)
   FMC_SDTR1_TXSR=((uint32_t)0x000000F0)
   FMC_SDTR1_TXSR_0=((uint32_t)0x00000010)
   FMC_SDTR1_TXSR_1=((uint32_t)0x00000020)
   FMC_SDTR1_TXSR_2=((uint32_t)0x00000040)
   FMC_SDTR1_TXSR_3=((uint32_t)0x00000080)
   FMC_SDTR2_TMRD=((uint32_t)0x0000000F)
   FMC_SDTR2_TMRD_0=((uint32_t)0x00000001)
   FMC_SDTR2_TMRD_1=((uint32_t)0x00000002)
   FMC_SDTR2_TMRD_2=((uint32_t)0x00000004)
   FMC_SDTR2_TMRD_3=((uint32_t)0x00000008)
   FMC_SDTR2_TRAS=((uint32_t)0x00000F00)
   FMC_SDTR2_TRAS_0=((uint32_t)0x00000100)
   FMC_SDTR2_TRAS_1=((uint32_t)0x00000200)
   FMC_SDTR2_TRAS_2=((uint32_t)0x00000400)
   FMC_SDTR2_TRAS_3=((uint32_t)0x00000800)
   FMC_SDTR2_TRC=((uint32_t)0x0000F000)
   FMC_SDTR2_TRCD=((uint32_t)0x0F000000)
   FMC_SDTR2_TRCD_0=((uint32_t)0x01000000)
   FMC_SDTR2_TRCD_1=((uint32_t)0x02000000)
   FMC_SDTR2_TRCD_2=((uint32_t)0x04000000)
   FMC_SDTR2_TRC_0=((uint32_t)0x00001000)
   FMC_SDTR2_TRC_1=((uint32_t)0x00002000)
   FMC_SDTR2_TRC_2=((uint32_t)0x00004000)
   FMC_SDTR2_TRP=((uint32_t)0x00F00000)
   FMC_SDTR2_TRP_0=((uint32_t)0x00100000)
   FMC_SDTR2_TRP_1=((uint32_t)0x00200000)
   FMC_SDTR2_TRP_2=((uint32_t)0x00400000)
   FMC_SDTR2_TWR=((uint32_t)0x000F0000)
   FMC_SDTR2_TWR_0=((uint32_t)0x00010000)
   FMC_SDTR2_TWR_1=((uint32_t)0x00020000)
   FMC_SDTR2_TWR_2=((uint32_t)0x00040000)
   FMC_SDTR2_TXSR=((uint32_t)0x000000F0)
   FMC_SDTR2_TXSR_0=((uint32_t)0x00000010)
   FMC_SDTR2_TXSR_1=((uint32_t)0x00000020)
   FMC_SDTR2_TXSR_2=((uint32_t)0x00000040)
   FMC_SDTR2_TXSR_3=((uint32_t)0x00000080)
   FMC_SR_FEMPT=((uint32_t)0x40)
   FMC_SR_IFEN=((uint32_t)0x20)
   FMC_SR_IFS=((uint32_t)0x04)
   FMC_SR_ILEN=((uint32_t)0x10)
   FMC_SR_ILS=((uint32_t)0x02)
   FMC_SR_IREN=((uint32_t)0x08)
   FMC_SR_IRS=((uint32_t)0x01)
   FMC_WAIT_SIGNAL_DISABLE=((uint32_t)0x00000000)
   FMC_WAIT_SIGNAL_ENABLE=((uint32_t)0x00002000)
   FMC_WAIT_SIGNAL_POLARITY_HIGH=((uint32_t)0x00000200)
   FMC_WAIT_SIGNAL_POLARITY_LOW=((uint32_t)0x00000000)
   FMC_WAIT_TIMING_BEFORE_WS=((uint32_t)0x00000000)
   FMC_WAIT_TIMING_DURING_WS=((uint32_t)0x00000800)
   FMC_WRAP_MODE_DISABLE=((uint32_t)0x00000000)
   FMC_WRAP_MODE_ENABLE=((uint32_t)0x00000400)
   FMC_WRITE_BURST_DISABLE=((uint32_t)0x00000000)
   FMC_WRITE_BURST_ENABLE=((uint32_t)0x00080000)
   FMC_WRITE_FIFO_DISABLE=((uint32_t)0x00000000)
   FMC_WRITE_FIFO_ENABLE=((uint32_t)FMC_BCR1_WFDIS)
   FMC_WRITE_OPERATION_DISABLE=((uint32_t)0x00000000)
   FMC_WRITE_OPERATION_ENABLE=((uint32_t)0x00001000)
   FONTMANAGER_HPP=
   FONT_HPP=
   FONT_LOCATION_FLASH_ATTRIBUTE=__attribute__ ((section ("FontFlashSection"))) __attribute__ ((aligned(4)))
   FONT_LOCATION_FLASH_PRAGMA=
   FOPEN_MAX=20
   FORCE_INLINE_FUNCTION=__attribute__((always_inline)) inline
   FORMAT_BCD=RTC_FORMAT_BCD
   FORMAT_BIN=RTC_FORMAT_BIN
   fpclassify(__x)=(__builtin_fpclassify (FP_NAN, FP_INFINITE, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, __x))
   FPDS_BitNumber=FPDS_BIT_NUMBER
   FPDS_BIT_NUMBER=POSITION_VAL(PWR_CR_FPDS)
   FPU=((FPU_Type *) FPU_BASE )
   FPU_BASE=(SCS_BASE + 0x0F30UL)
   FPU_FPCAR_ADDRESS_Msk=(0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)
   FPU_FPCAR_ADDRESS_Pos=3
   FPU_FPCCR_ASPEN_Msk=(1UL << FPU_FPCCR_ASPEN_Pos)
   FPU_FPCCR_ASPEN_Pos=31
   FPU_FPCCR_BFRDY_Msk=(1UL << FPU_FPCCR_BFRDY_Pos)
   FPU_FPCCR_BFRDY_Pos=6
   FPU_FPCCR_HFRDY_Msk=(1UL << FPU_FPCCR_HFRDY_Pos)
   FPU_FPCCR_HFRDY_Pos=4
   FPU_FPCCR_LSPACT_Msk=(1UL )
   FPU_FPCCR_LSPACT_Pos=0
   FPU_FPCCR_LSPEN_Msk=(1UL << FPU_FPCCR_LSPEN_Pos)
   FPU_FPCCR_LSPEN_Pos=30
   FPU_FPCCR_MMRDY_Msk=(1UL << FPU_FPCCR_MMRDY_Pos)
   FPU_FPCCR_MMRDY_Pos=5
   FPU_FPCCR_MONRDY_Msk=(1UL << FPU_FPCCR_MONRDY_Pos)
   FPU_FPCCR_MONRDY_Pos=8
   FPU_FPCCR_THREAD_Msk=(1UL << FPU_FPCCR_THREAD_Pos)
   FPU_FPCCR_THREAD_Pos=3
   FPU_FPCCR_USER_Msk=(1UL << FPU_FPCCR_USER_Pos)
   FPU_FPCCR_USER_Pos=1
   FPU_FPDSCR_AHP_Msk=(1UL << FPU_FPDSCR_AHP_Pos)
   FPU_FPDSCR_AHP_Pos=26
   FPU_FPDSCR_DN_Msk=(1UL << FPU_FPDSCR_DN_Pos)
   FPU_FPDSCR_DN_Pos=25
   FPU_FPDSCR_FZ_Msk=(1UL << FPU_FPDSCR_FZ_Pos)
   FPU_FPDSCR_FZ_Pos=24
   FPU_FPDSCR_RMode_Msk=(3UL << FPU_FPDSCR_RMode_Pos)
   FPU_FPDSCR_RMode_Pos=22
   FPU_MVFR0_A_SIMD_registers_Msk=(0xFUL )
   FPU_MVFR0_A_SIMD_registers_Pos=0
   FPU_MVFR0_Divide_Msk=(0xFUL << FPU_MVFR0_Divide_Pos)
   FPU_MVFR0_Divide_Pos=16
   FPU_MVFR0_Double_precision_Msk=(0xFUL << FPU_MVFR0_Double_precision_Pos)
   FPU_MVFR0_Double_precision_Pos=8
   FPU_MVFR0_FP_excep_trapping_Msk=(0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)
   FPU_MVFR0_FP_excep_trapping_Pos=12
   FPU_MVFR0_FP_rounding_modes_Msk=(0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)
   FPU_MVFR0_FP_rounding_modes_Pos=28
   FPU_MVFR0_Short_vectors_Msk=(0xFUL << FPU_MVFR0_Short_vectors_Pos)
   FPU_MVFR0_Short_vectors_Pos=24
   FPU_MVFR0_Single_precision_Msk=(0xFUL << FPU_MVFR0_Single_precision_Pos)
   FPU_MVFR0_Single_precision_Pos=4
   FPU_MVFR0_Square_root_Msk=(0xFUL << FPU_MVFR0_Square_root_Pos)
   FPU_MVFR0_Square_root_Pos=20
   FPU_MVFR1_D_NaN_mode_Msk=(0xFUL << FPU_MVFR1_D_NaN_mode_Pos)
   FPU_MVFR1_D_NaN_mode_Pos=4
   FPU_MVFR1_FP_fused_MAC_Msk=(0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)
   FPU_MVFR1_FP_fused_MAC_Pos=28
   FPU_MVFR1_FP_HPFP_Msk=(0xFUL << FPU_MVFR1_FP_HPFP_Pos)
   FPU_MVFR1_FP_HPFP_Pos=24
   FPU_MVFR1_FtZ_mode_Msk=(0xFUL )
   FPU_MVFR1_FtZ_mode_Pos=0
   FP_ILOGB0=(-__INT_MAX__)
   FP_ILOGBNAN=__INT_MAX__
   FP_INFINITE=1
   FP_NAN=0
   FP_NORMAL=4
   FP_SUBNORMAL=3
   FP_ZERO=2
   FRONTENDAPPLICATIONBASE_HPP=
   FRONTENDAPPLICATION_HPP=
   FRONTENDHEAPBASE_HPP=
   FRONTENDHEAP_HPP=
   fropen(__cookie,__fn)=funopen(__cookie, __fn, (int (*)())0, (fpos_t (*)())0, (int (*)())0)
   FSMC_NORSRAM_EXTENDED_TYPEDEF=FSMC_NORSRAM_EXTENDED_TypeDef
   FSMC_NORSRAM_TYPEDEF=FSMC_NORSRAM_TypeDef
   fwopen(__cookie,__fn)=funopen(__cookie, (int (*)())0, __fn, (fpos_t (*)())0, (int (*)())0)
   GESTUREEVENT_HPP=
   GESTURES_HPP=
   GET_GPIO_INDEX=GPIO_GET_INDEX
   GET_GPIO_SOURCE=GPIO_GET_INDEX
   GPIOA=((GPIO_TypeDef *) GPIOA_BASE)
   GPIOA_BASE=(AHB1PERIPH_BASE + 0x0000)
   GPIOB=((GPIO_TypeDef *) GPIOB_BASE)
   GPIOB_BASE=(AHB1PERIPH_BASE + 0x0400)
   GPIOC=((GPIO_TypeDef *) GPIOC_BASE)
   GPIOC_BASE=(AHB1PERIPH_BASE + 0x0800)
   GPIOD=((GPIO_TypeDef *) GPIOD_BASE)
   GPIOD_BASE=(AHB1PERIPH_BASE + 0x0C00)
   GPIOE=((GPIO_TypeDef *) GPIOE_BASE)
   GPIOE_BASE=(AHB1PERIPH_BASE + 0x1000)
   GPIOF=((GPIO_TypeDef *) GPIOF_BASE)
   GPIOF_BASE=(AHB1PERIPH_BASE + 0x1400)
   GPIOG=((GPIO_TypeDef *) GPIOG_BASE)
   GPIOG_BASE=(AHB1PERIPH_BASE + 0x1800)
   GPIOH=((GPIO_TypeDef *) GPIOH_BASE)
   GPIOH_BASE=(AHB1PERIPH_BASE + 0x1C00)
   GPIOI=((GPIO_TypeDef *) GPIOI_BASE)
   GPIOI_BASE=(AHB1PERIPH_BASE + 0x2000)
   GPIOJ=((GPIO_TypeDef *) GPIOJ_BASE)
   GPIOJ_BASE=(AHB1PERIPH_BASE + 0x2400)
   GPIOK=((GPIO_TypeDef *) GPIOK_BASE)
   GPIOK_BASE=(AHB1PERIPH_BASE + 0x2800)
   GPIO_AF0_LPTIM=GPIO_AF0_LPTIM1
   GPIO_AF0_MCO=((uint8_t)0x00)
   GPIO_AF0_RTC_50Hz=((uint8_t)0x00)
   GPIO_AF0_SWJ=((uint8_t)0x00)
   GPIO_AF0_TAMPER=((uint8_t)0x00)
   GPIO_AF0_TRACE=((uint8_t)0x00)
   GPIO_AF10_OTG_FS=((uint8_t)0xA)
   GPIO_AF10_OTG_HS=((uint8_t)0xA)
   GPIO_AF10_QSPI=((uint8_t)0xA)
   GPIO_AF11_ETH=((uint8_t)0x0B)
   GPIO_AF12_FMC=((uint8_t)0xC)
   GPIO_AF12_OTG_HS_FS=((uint8_t)0xC)
   GPIO_AF12_SDIO=((uint8_t)0xC)
   GPIO_AF12_SDMMC1=GPIO_AF12_SDIO
   GPIO_AF12_SDMMC=GPIO_AF12_SDIO
   GPIO_AF13_DCMI=((uint8_t)0x0D)
   GPIO_AF13_DSI=((uint8_t)0x0D)
   GPIO_AF14_LTDC=((uint8_t)0x0E)
   GPIO_AF15_EVENTOUT=((uint8_t)0x0F)
   GPIO_AF1_LPTIM=GPIO_AF1_LPTIM1
   GPIO_AF1_TIM1=((uint8_t)0x01)
   GPIO_AF1_TIM2=((uint8_t)0x01)
   GPIO_AF2_LPTIM=GPIO_AF2_LPTIM1
   GPIO_AF2_TIM3=((uint8_t)0x02)
   GPIO_AF2_TIM4=((uint8_t)0x02)
   GPIO_AF2_TIM5=((uint8_t)0x02)
   GPIO_AF3_TIM10=((uint8_t)0x03)
   GPIO_AF3_TIM11=((uint8_t)0x03)
   GPIO_AF3_TIM8=((uint8_t)0x03)
   GPIO_AF3_TIM9=((uint8_t)0x03)
   GPIO_AF4_I2C1=((uint8_t)0x04)
   GPIO_AF4_I2C2=((uint8_t)0x04)
   GPIO_AF4_I2C3=((uint8_t)0x04)
   GPIO_AF5_I2S3ext=((uint8_t)0x05)
   GPIO_AF5_SPI1=((uint8_t)0x05)
   GPIO_AF5_SPI2=((uint8_t)0x05)
   GPIO_AF5_SPI3=((uint8_t)0x05)
   GPIO_AF5_SPI4=((uint8_t)0x05)
   GPIO_AF5_SPI5=((uint8_t)0x05)
   GPIO_AF5_SPI6=((uint8_t)0x05)
   GPIO_AF6_I2S2ext=((uint8_t)0x06)
   GPIO_AF6_SAI1=((uint8_t)0x06)
   GPIO_AF6_SPI3=((uint8_t)0x06)
   GPIO_AF7_I2S3ext=((uint8_t)0x07)
   GPIO_AF7_USART1=((uint8_t)0x07)
   GPIO_AF7_USART2=((uint8_t)0x07)
   GPIO_AF7_USART3=((uint8_t)0x07)
   GPIO_AF8_UART4=((uint8_t)0x08)
   GPIO_AF8_UART5=((uint8_t)0x08)
   GPIO_AF8_UART7=((uint8_t)0x08)
   GPIO_AF8_UART8=((uint8_t)0x08)
   GPIO_AF8_USART6=((uint8_t)0x08)
   GPIO_AF9_CAN1=((uint8_t)0x09)
   GPIO_AF9_CAN2=((uint8_t)0x09)
   GPIO_AF9_LTDC=((uint8_t)0x09)
   GPIO_AF9_QSPI=((uint8_t)0x09)
   GPIO_AF9_TIM12=((uint8_t)0x09)
   GPIO_AF9_TIM13=((uint8_t)0x09)
   GPIO_AF9_TIM14=((uint8_t)0x09)
   GPIO_BSRR_BR_0=((uint32_t)0x00010000)
   GPIO_BSRR_BR_10=((uint32_t)0x04000000)
   GPIO_BSRR_BR_11=((uint32_t)0x08000000)
   GPIO_BSRR_BR_12=((uint32_t)0x10000000)
   GPIO_BSRR_BR_13=((uint32_t)0x20000000)
   GPIO_BSRR_BR_14=((uint32_t)0x40000000)
   GPIO_BSRR_BR_15=((uint32_t)0x80000000)
   GPIO_BSRR_BR_1=((uint32_t)0x00020000)
   GPIO_BSRR_BR_2=((uint32_t)0x00040000)
   GPIO_BSRR_BR_3=((uint32_t)0x00080000)
   GPIO_BSRR_BR_4=((uint32_t)0x00100000)
   GPIO_BSRR_BR_5=((uint32_t)0x00200000)
   GPIO_BSRR_BR_6=((uint32_t)0x00400000)
   GPIO_BSRR_BR_7=((uint32_t)0x00800000)
   GPIO_BSRR_BR_8=((uint32_t)0x01000000)
   GPIO_BSRR_BR_9=((uint32_t)0x02000000)
   GPIO_BSRR_BS_0=((uint32_t)0x00000001)
   GPIO_BSRR_BS_10=((uint32_t)0x00000400)
   GPIO_BSRR_BS_11=((uint32_t)0x00000800)
   GPIO_BSRR_BS_12=((uint32_t)0x00001000)
   GPIO_BSRR_BS_13=((uint32_t)0x00002000)
   GPIO_BSRR_BS_14=((uint32_t)0x00004000)
   GPIO_BSRR_BS_15=((uint32_t)0x00008000)
   GPIO_BSRR_BS_1=((uint32_t)0x00000002)
   GPIO_BSRR_BS_2=((uint32_t)0x00000004)
   GPIO_BSRR_BS_3=((uint32_t)0x00000008)
   GPIO_BSRR_BS_4=((uint32_t)0x00000010)
   GPIO_BSRR_BS_5=((uint32_t)0x00000020)
   GPIO_BSRR_BS_6=((uint32_t)0x00000040)
   GPIO_BSRR_BS_7=((uint32_t)0x00000080)
   GPIO_BSRR_BS_8=((uint32_t)0x00000100)
   GPIO_BSRR_BS_9=((uint32_t)0x00000200)
   GPIO_GET_INDEX(__GPIOx__)=(uint8_t)(((__GPIOx__) == (GPIOA))? 0U : ((__GPIOx__) == (GPIOB))? 1U : ((__GPIOx__) == (GPIOC))? 2U : ((__GPIOx__) == (GPIOD))? 3U : ((__GPIOx__) == (GPIOE))? 4U : ((__GPIOx__) == (GPIOF))? 5U : ((__GPIOx__) == (GPIOG))? 6U : ((__GPIOx__) == (GPIOH))? 7U : ((__GPIOx__) == (GPIOI))? 8U : ((__GPIOx__) == (GPIOJ))? 9U : 10U)
   GPIO_HPP=
   GPIO_IDR_IDR_0=((uint32_t)0x00000001)
   GPIO_IDR_IDR_10=((uint32_t)0x00000400)
   GPIO_IDR_IDR_11=((uint32_t)0x00000800)
   GPIO_IDR_IDR_12=((uint32_t)0x00001000)
   GPIO_IDR_IDR_13=((uint32_t)0x00002000)
   GPIO_IDR_IDR_14=((uint32_t)0x00004000)
   GPIO_IDR_IDR_15=((uint32_t)0x00008000)
   GPIO_IDR_IDR_1=((uint32_t)0x00000002)
   GPIO_IDR_IDR_2=((uint32_t)0x00000004)
   GPIO_IDR_IDR_3=((uint32_t)0x00000008)
   GPIO_IDR_IDR_4=((uint32_t)0x00000010)
   GPIO_IDR_IDR_5=((uint32_t)0x00000020)
   GPIO_IDR_IDR_6=((uint32_t)0x00000040)
   GPIO_IDR_IDR_7=((uint32_t)0x00000080)
   GPIO_IDR_IDR_8=((uint32_t)0x00000100)
   GPIO_IDR_IDR_9=((uint32_t)0x00000200)
   GPIO_LCKR_LCK0=((uint32_t)0x00000001)
   GPIO_LCKR_LCK10=((uint32_t)0x00000400)
   GPIO_LCKR_LCK11=((uint32_t)0x00000800)
   GPIO_LCKR_LCK12=((uint32_t)0x00001000)
   GPIO_LCKR_LCK13=((uint32_t)0x00002000)
   GPIO_LCKR_LCK14=((uint32_t)0x00004000)
   GPIO_LCKR_LCK15=((uint32_t)0x00008000)
   GPIO_LCKR_LCK1=((uint32_t)0x00000002)
   GPIO_LCKR_LCK2=((uint32_t)0x00000004)
   GPIO_LCKR_LCK3=((uint32_t)0x00000008)
   GPIO_LCKR_LCK4=((uint32_t)0x00000010)
   GPIO_LCKR_LCK5=((uint32_t)0x00000020)
   GPIO_LCKR_LCK6=((uint32_t)0x00000040)
   GPIO_LCKR_LCK7=((uint32_t)0x00000080)
   GPIO_LCKR_LCK8=((uint32_t)0x00000100)
   GPIO_LCKR_LCK9=((uint32_t)0x00000200)
   GPIO_LCKR_LCKK=((uint32_t)0x00010000)
   GPIO_MODER_MODER0=((uint32_t)0x00000003)
   GPIO_MODER_MODER0_0=((uint32_t)0x00000001)
   GPIO_MODER_MODER0_1=((uint32_t)0x00000002)
   GPIO_MODER_MODER10=((uint32_t)0x00300000)
   GPIO_MODER_MODER10_0=((uint32_t)0x00100000)
   GPIO_MODER_MODER10_1=((uint32_t)0x00200000)
   GPIO_MODER_MODER11=((uint32_t)0x00C00000)
   GPIO_MODER_MODER11_0=((uint32_t)0x00400000)
   GPIO_MODER_MODER11_1=((uint32_t)0x00800000)
   GPIO_MODER_MODER12=((uint32_t)0x03000000)
   GPIO_MODER_MODER12_0=((uint32_t)0x01000000)
   GPIO_MODER_MODER12_1=((uint32_t)0x02000000)
   GPIO_MODER_MODER13=((uint32_t)0x0C000000)
   GPIO_MODER_MODER13_0=((uint32_t)0x04000000)
   GPIO_MODER_MODER13_1=((uint32_t)0x08000000)
   GPIO_MODER_MODER14=((uint32_t)0x30000000)
   GPIO_MODER_MODER14_0=((uint32_t)0x10000000)
   GPIO_MODER_MODER14_1=((uint32_t)0x20000000)
   GPIO_MODER_MODER15=((uint32_t)0xC0000000)
   GPIO_MODER_MODER15_0=((uint32_t)0x40000000)
   GPIO_MODER_MODER15_1=((uint32_t)0x80000000)
   GPIO_MODER_MODER1=((uint32_t)0x0000000C)
   GPIO_MODER_MODER1_0=((uint32_t)0x00000004)
   GPIO_MODER_MODER1_1=((uint32_t)0x00000008)
   GPIO_MODER_MODER2=((uint32_t)0x00000030)
   GPIO_MODER_MODER2_0=((uint32_t)0x00000010)
   GPIO_MODER_MODER2_1=((uint32_t)0x00000020)
   GPIO_MODER_MODER3=((uint32_t)0x000000C0)
   GPIO_MODER_MODER3_0=((uint32_t)0x00000040)
   GPIO_MODER_MODER3_1=((uint32_t)0x00000080)
   GPIO_MODER_MODER4=((uint32_t)0x00000300)
   GPIO_MODER_MODER4_0=((uint32_t)0x00000100)
   GPIO_MODER_MODER4_1=((uint32_t)0x00000200)
   GPIO_MODER_MODER5=((uint32_t)0x00000C00)
   GPIO_MODER_MODER5_0=((uint32_t)0x00000400)
   GPIO_MODER_MODER5_1=((uint32_t)0x00000800)
   GPIO_MODER_MODER6=((uint32_t)0x00003000)
   GPIO_MODER_MODER6_0=((uint32_t)0x00001000)
   GPIO_MODER_MODER6_1=((uint32_t)0x00002000)
   GPIO_MODER_MODER7=((uint32_t)0x0000C000)
   GPIO_MODER_MODER7_0=((uint32_t)0x00004000)
   GPIO_MODER_MODER7_1=((uint32_t)0x00008000)
   GPIO_MODER_MODER8=((uint32_t)0x00030000)
   GPIO_MODER_MODER8_0=((uint32_t)0x00010000)
   GPIO_MODER_MODER8_1=((uint32_t)0x00020000)
   GPIO_MODER_MODER9=((uint32_t)0x000C0000)
   GPIO_MODER_MODER9_0=((uint32_t)0x00040000)
   GPIO_MODER_MODER9_1=((uint32_t)0x00080000)
   GPIO_MODE_AF_OD=((uint32_t)0x00000012)
   GPIO_MODE_AF_PP=((uint32_t)0x00000002)
   GPIO_MODE_ANALOG=((uint32_t)0x00000003)
   GPIO_MODE_EVT_FALLING=((uint32_t)0x10220000)
   GPIO_MODE_EVT_RISING=((uint32_t)0x10120000)
   GPIO_MODE_EVT_RISING_FALLING=((uint32_t)0x10320000)
   GPIO_MODE_INPUT=((uint32_t)0x00000000)
   GPIO_MODE_IT_FALLING=((uint32_t)0x10210000)
   GPIO_MODE_IT_RISING=((uint32_t)0x10110000)
   GPIO_MODE_IT_RISING_FALLING=((uint32_t)0x10310000)
   GPIO_MODE_OUTPUT_OD=((uint32_t)0x00000011)
   GPIO_MODE_OUTPUT_PP=((uint32_t)0x00000001)
   GPIO_NOPULL=((uint32_t)0x00000000)
   GPIO_ODR_ODR_0=((uint32_t)0x00000001)
   GPIO_ODR_ODR_10=((uint32_t)0x00000400)
   GPIO_ODR_ODR_11=((uint32_t)0x00000800)
   GPIO_ODR_ODR_12=((uint32_t)0x00001000)
   GPIO_ODR_ODR_13=((uint32_t)0x00002000)
   GPIO_ODR_ODR_14=((uint32_t)0x00004000)
   GPIO_ODR_ODR_15=((uint32_t)0x00008000)
   GPIO_ODR_ODR_1=((uint32_t)0x00000002)
   GPIO_ODR_ODR_2=((uint32_t)0x00000004)
   GPIO_ODR_ODR_3=((uint32_t)0x00000008)
   GPIO_ODR_ODR_4=((uint32_t)0x00000010)
   GPIO_ODR_ODR_5=((uint32_t)0x00000020)
   GPIO_ODR_ODR_6=((uint32_t)0x00000040)
   GPIO_ODR_ODR_7=((uint32_t)0x00000080)
   GPIO_ODR_ODR_8=((uint32_t)0x00000100)
   GPIO_ODR_ODR_9=((uint32_t)0x00000200)
   GPIO_OSPEEDER_OSPEEDR0=((uint32_t)0x00000003)
   GPIO_OSPEEDER_OSPEEDR0_0=((uint32_t)0x00000001)
   GPIO_OSPEEDER_OSPEEDR0_1=((uint32_t)0x00000002)
   GPIO_OSPEEDER_OSPEEDR10=((uint32_t)0x00300000)
   GPIO_OSPEEDER_OSPEEDR10_0=((uint32_t)0x00100000)
   GPIO_OSPEEDER_OSPEEDR10_1=((uint32_t)0x00200000)
   GPIO_OSPEEDER_OSPEEDR11=((uint32_t)0x00C00000)
   GPIO_OSPEEDER_OSPEEDR11_0=((uint32_t)0x00400000)
   GPIO_OSPEEDER_OSPEEDR11_1=((uint32_t)0x00800000)
   GPIO_OSPEEDER_OSPEEDR12=((uint32_t)0x03000000)
   GPIO_OSPEEDER_OSPEEDR12_0=((uint32_t)0x01000000)
   GPIO_OSPEEDER_OSPEEDR12_1=((uint32_t)0x02000000)
   GPIO_OSPEEDER_OSPEEDR13=((uint32_t)0x0C000000)
   GPIO_OSPEEDER_OSPEEDR13_0=((uint32_t)0x04000000)
   GPIO_OSPEEDER_OSPEEDR13_1=((uint32_t)0x08000000)
   GPIO_OSPEEDER_OSPEEDR14=((uint32_t)0x30000000)
   GPIO_OSPEEDER_OSPEEDR14_0=((uint32_t)0x10000000)
   GPIO_OSPEEDER_OSPEEDR14_1=((uint32_t)0x20000000)
   GPIO_OSPEEDER_OSPEEDR15=((uint32_t)0xC0000000)
   GPIO_OSPEEDER_OSPEEDR15_0=((uint32_t)0x40000000)
   GPIO_OSPEEDER_OSPEEDR15_1=((uint32_t)0x80000000)
   GPIO_OSPEEDER_OSPEEDR1=((uint32_t)0x0000000C)
   GPIO_OSPEEDER_OSPEEDR1_0=((uint32_t)0x00000004)
   GPIO_OSPEEDER_OSPEEDR1_1=((uint32_t)0x00000008)
   GPIO_OSPEEDER_OSPEEDR2=((uint32_t)0x00000030)
   GPIO_OSPEEDER_OSPEEDR2_0=((uint32_t)0x00000010)
   GPIO_OSPEEDER_OSPEEDR2_1=((uint32_t)0x00000020)
   GPIO_OSPEEDER_OSPEEDR3=((uint32_t)0x000000C0)
   GPIO_OSPEEDER_OSPEEDR3_0=((uint32_t)0x00000040)
   GPIO_OSPEEDER_OSPEEDR3_1=((uint32_t)0x00000080)
   GPIO_OSPEEDER_OSPEEDR4=((uint32_t)0x00000300)
   GPIO_OSPEEDER_OSPEEDR4_0=((uint32_t)0x00000100)
   GPIO_OSPEEDER_OSPEEDR4_1=((uint32_t)0x00000200)
   GPIO_OSPEEDER_OSPEEDR5=((uint32_t)0x00000C00)
   GPIO_OSPEEDER_OSPEEDR5_0=((uint32_t)0x00000400)
   GPIO_OSPEEDER_OSPEEDR5_1=((uint32_t)0x00000800)
   GPIO_OSPEEDER_OSPEEDR6=((uint32_t)0x00003000)
   GPIO_OSPEEDER_OSPEEDR6_0=((uint32_t)0x00001000)
   GPIO_OSPEEDER_OSPEEDR6_1=((uint32_t)0x00002000)
   GPIO_OSPEEDER_OSPEEDR7=((uint32_t)0x0000C000)
   GPIO_OSPEEDER_OSPEEDR7_0=((uint32_t)0x00004000)
   GPIO_OSPEEDER_OSPEEDR7_1=((uint32_t)0x00008000)
   GPIO_OSPEEDER_OSPEEDR8=((uint32_t)0x00030000)
   GPIO_OSPEEDER_OSPEEDR8_0=((uint32_t)0x00010000)
   GPIO_OSPEEDER_OSPEEDR8_1=((uint32_t)0x00020000)
   GPIO_OSPEEDER_OSPEEDR9=((uint32_t)0x000C0000)
   GPIO_OSPEEDER_OSPEEDR9_0=((uint32_t)0x00040000)
   GPIO_OSPEEDER_OSPEEDR9_1=((uint32_t)0x00080000)
   GPIO_OTYPER_IDR_0=GPIO_IDR_IDR_0
   GPIO_OTYPER_IDR_10=GPIO_IDR_IDR_10
   GPIO_OTYPER_IDR_11=GPIO_IDR_IDR_11
   GPIO_OTYPER_IDR_12=GPIO_IDR_IDR_12
   GPIO_OTYPER_IDR_13=GPIO_IDR_IDR_13
   GPIO_OTYPER_IDR_14=GPIO_IDR_IDR_14
   GPIO_OTYPER_IDR_15=GPIO_IDR_IDR_15
   GPIO_OTYPER_IDR_1=GPIO_IDR_IDR_1
   GPIO_OTYPER_IDR_2=GPIO_IDR_IDR_2
   GPIO_OTYPER_IDR_3=GPIO_IDR_IDR_3
   GPIO_OTYPER_IDR_4=GPIO_IDR_IDR_4
   GPIO_OTYPER_IDR_5=GPIO_IDR_IDR_5
   GPIO_OTYPER_IDR_6=GPIO_IDR_IDR_6
   GPIO_OTYPER_IDR_7=GPIO_IDR_IDR_7
   GPIO_OTYPER_IDR_8=GPIO_IDR_IDR_8
   GPIO_OTYPER_IDR_9=GPIO_IDR_IDR_9
   GPIO_OTYPER_ODR_0=GPIO_ODR_ODR_0
   GPIO_OTYPER_ODR_10=GPIO_ODR_ODR_10
   GPIO_OTYPER_ODR_11=GPIO_ODR_ODR_11
   GPIO_OTYPER_ODR_12=GPIO_ODR_ODR_12
   GPIO_OTYPER_ODR_13=GPIO_ODR_ODR_13
   GPIO_OTYPER_ODR_14=GPIO_ODR_ODR_14
   GPIO_OTYPER_ODR_15=GPIO_ODR_ODR_15
   GPIO_OTYPER_ODR_1=GPIO_ODR_ODR_1
   GPIO_OTYPER_ODR_2=GPIO_ODR_ODR_2
   GPIO_OTYPER_ODR_3=GPIO_ODR_ODR_3
   GPIO_OTYPER_ODR_4=GPIO_ODR_ODR_4
   GPIO_OTYPER_ODR_5=GPIO_ODR_ODR_5
   GPIO_OTYPER_ODR_6=GPIO_ODR_ODR_6
   GPIO_OTYPER_ODR_7=GPIO_ODR_ODR_7
   GPIO_OTYPER_ODR_8=GPIO_ODR_ODR_8
   GPIO_OTYPER_ODR_9=GPIO_ODR_ODR_9
   GPIO_OTYPER_OT_0=((uint32_t)0x00000001)
   GPIO_OTYPER_OT_10=((uint32_t)0x00000400)
   GPIO_OTYPER_OT_11=((uint32_t)0x00000800)
   GPIO_OTYPER_OT_12=((uint32_t)0x00001000)
   GPIO_OTYPER_OT_13=((uint32_t)0x00002000)
   GPIO_OTYPER_OT_14=((uint32_t)0x00004000)
   GPIO_OTYPER_OT_15=((uint32_t)0x00008000)
   GPIO_OTYPER_OT_1=((uint32_t)0x00000002)
   GPIO_OTYPER_OT_2=((uint32_t)0x00000004)
   GPIO_OTYPER_OT_3=((uint32_t)0x00000008)
   GPIO_OTYPER_OT_4=((uint32_t)0x00000010)
   GPIO_OTYPER_OT_5=((uint32_t)0x00000020)
   GPIO_OTYPER_OT_6=((uint32_t)0x00000040)
   GPIO_OTYPER_OT_7=((uint32_t)0x00000080)
   GPIO_OTYPER_OT_8=((uint32_t)0x00000100)
   GPIO_OTYPER_OT_9=((uint32_t)0x00000200)
   GPIO_PIN_0=((uint16_t)0x0001)
   GPIO_PIN_10=((uint16_t)0x0400)
   GPIO_PIN_11=((uint16_t)0x0800)
   GPIO_PIN_12=((uint16_t)0x1000)
   GPIO_PIN_13=((uint16_t)0x2000)
   GPIO_PIN_14=((uint16_t)0x4000)
   GPIO_PIN_15=((uint16_t)0x8000)
   GPIO_PIN_1=((uint16_t)0x0002)
   GPIO_PIN_2=((uint16_t)0x0004)
   GPIO_PIN_3=((uint16_t)0x0008)
   GPIO_PIN_4=((uint16_t)0x0010)
   GPIO_PIN_5=((uint16_t)0x0020)
   GPIO_PIN_6=((uint16_t)0x0040)
   GPIO_PIN_7=((uint16_t)0x0080)
   GPIO_PIN_8=((uint16_t)0x0100)
   GPIO_PIN_9=((uint16_t)0x0200)
   GPIO_PIN_All=((uint16_t)0xFFFF)
   GPIO_PIN_MASK=((uint32_t)0x0000FFFF)
   GPIO_PULLDOWN=((uint32_t)0x00000002)
   GPIO_PULLUP=((uint32_t)0x00000001)
   GPIO_PUPDR_PUPDR0=((uint32_t)0x00000003)
   GPIO_PUPDR_PUPDR0_0=((uint32_t)0x00000001)
   GPIO_PUPDR_PUPDR0_1=((uint32_t)0x00000002)
   GPIO_PUPDR_PUPDR10=((uint32_t)0x00300000)
   GPIO_PUPDR_PUPDR10_0=((uint32_t)0x00100000)
   GPIO_PUPDR_PUPDR10_1=((uint32_t)0x00200000)
   GPIO_PUPDR_PUPDR11=((uint32_t)0x00C00000)
   GPIO_PUPDR_PUPDR11_0=((uint32_t)0x00400000)
   GPIO_PUPDR_PUPDR11_1=((uint32_t)0x00800000)
   GPIO_PUPDR_PUPDR12=((uint32_t)0x03000000)
   GPIO_PUPDR_PUPDR12_0=((uint32_t)0x01000000)
   GPIO_PUPDR_PUPDR12_1=((uint32_t)0x02000000)
   GPIO_PUPDR_PUPDR13=((uint32_t)0x0C000000)
   GPIO_PUPDR_PUPDR13_0=((uint32_t)0x04000000)
   GPIO_PUPDR_PUPDR13_1=((uint32_t)0x08000000)
   GPIO_PUPDR_PUPDR14=((uint32_t)0x30000000)
   GPIO_PUPDR_PUPDR14_0=((uint32_t)0x10000000)
   GPIO_PUPDR_PUPDR14_1=((uint32_t)0x20000000)
   GPIO_PUPDR_PUPDR15=((uint32_t)0xC0000000)
   GPIO_PUPDR_PUPDR15_0=((uint32_t)0x40000000)
   GPIO_PUPDR_PUPDR15_1=((uint32_t)0x80000000)
   GPIO_PUPDR_PUPDR1=((uint32_t)0x0000000C)
   GPIO_PUPDR_PUPDR1_0=((uint32_t)0x00000004)
   GPIO_PUPDR_PUPDR1_1=((uint32_t)0x00000008)
   GPIO_PUPDR_PUPDR2=((uint32_t)0x00000030)
   GPIO_PUPDR_PUPDR2_0=((uint32_t)0x00000010)
   GPIO_PUPDR_PUPDR2_1=((uint32_t)0x00000020)
   GPIO_PUPDR_PUPDR3=((uint32_t)0x000000C0)
   GPIO_PUPDR_PUPDR3_0=((uint32_t)0x00000040)
   GPIO_PUPDR_PUPDR3_1=((uint32_t)0x00000080)
   GPIO_PUPDR_PUPDR4=((uint32_t)0x00000300)
   GPIO_PUPDR_PUPDR4_0=((uint32_t)0x00000100)
   GPIO_PUPDR_PUPDR4_1=((uint32_t)0x00000200)
   GPIO_PUPDR_PUPDR5=((uint32_t)0x00000C00)
   GPIO_PUPDR_PUPDR5_0=((uint32_t)0x00000400)
   GPIO_PUPDR_PUPDR5_1=((uint32_t)0x00000800)
   GPIO_PUPDR_PUPDR6=((uint32_t)0x00003000)
   GPIO_PUPDR_PUPDR6_0=((uint32_t)0x00001000)
   GPIO_PUPDR_PUPDR6_1=((uint32_t)0x00002000)
   GPIO_PUPDR_PUPDR7=((uint32_t)0x0000C000)
   GPIO_PUPDR_PUPDR7_0=((uint32_t)0x00004000)
   GPIO_PUPDR_PUPDR7_1=((uint32_t)0x00008000)
   GPIO_PUPDR_PUPDR8=((uint32_t)0x00030000)
   GPIO_PUPDR_PUPDR8_0=((uint32_t)0x00010000)
   GPIO_PUPDR_PUPDR8_1=((uint32_t)0x00020000)
   GPIO_PUPDR_PUPDR9=((uint32_t)0x000C0000)
   GPIO_PUPDR_PUPDR9_0=((uint32_t)0x00040000)
   GPIO_PUPDR_PUPDR9_1=((uint32_t)0x00080000)
   GPIO_SPEED_FAST=GPIO_SPEED_FREQ_HIGH
   GPIO_SPEED_FREQ_HIGH=((uint32_t)0x00000002)
   GPIO_SPEED_FREQ_LOW=((uint32_t)0x00000000)
   GPIO_SPEED_FREQ_MEDIUM=((uint32_t)0x00000001)
   GPIO_SPEED_FREQ_VERY_HIGH=((uint32_t)0x00000003)
   GPIO_SPEED_HIGH=GPIO_SPEED_FREQ_VERY_HIGH
   GPIO_SPEED_LOW=GPIO_SPEED_FREQ_LOW
   GPIO_SPEED_MEDIUM=GPIO_SPEED_FREQ_MEDIUM
   HAL_ADC_EnableBufferSensor_Cmd(cmd)=(((cmd)==ENABLE) ? HAL_ADCEx_EnableVREFINTTempSensor() : HAL_ADCEx_DisableVREFINTTempSensor())
   HAL_ADC_EnableBuffer_Cmd(cmd)=(((cmd)==ENABLE) ? HAL_ADCEx_EnableVREFINT() : HAL_ADCEx_DisableVREFINT())
   HAL_CORTEX_MODULE_ENABLED=
   HAL_CRYP_ComputationCpltCallback=HAL_CRYPEx_ComputationCpltCallback
   HAL_DATA_EEPROMEx_Erase=HAL_FLASHEx_DATAEEPROM_Erase
   HAL_DATA_EEPROMEx_Lock=HAL_FLASHEx_DATAEEPROM_Lock
   HAL_DATA_EEPROMEx_Program=HAL_FLASHEx_DATAEEPROM_Program
   HAL_DATA_EEPROMEx_Unlock=HAL_FLASHEx_DATAEEPROM_Unlock
   HAL_DBG_LowPowerConfig(Periph,cmd)=(((cmd)==ENABLE)? HAL_DBGMCU_DBG_EnableLowPowerConfig(Periph) : HAL_DBGMCU_DBG_DisableLowPowerConfig(Periph))
   HAL_DisableDBGSleepMode=HAL_DBGMCU_DisableDBGSleepMode
   HAL_DisableDBGStandbyMode=HAL_DBGMCU_DisableDBGStandbyMode
   HAL_DisableDBGStopMode=HAL_DBGMCU_DisableDBGStopMode
   HAL_DMA2D_ERROR_CE=((uint32_t)0x00000002)
   HAL_DMA2D_ERROR_NONE=((uint32_t)0x00000000)
   HAL_DMA2D_ERROR_TE=((uint32_t)0x00000001)
   HAL_DMA2D_ERROR_TIMEOUT=((uint32_t)0x00000020)
   HAL_DMA2D_MODULE_ENABLED=
   HAL_DMA_ERROR_DME=((uint32_t)0x00000004)
   HAL_DMA_ERROR_FE=((uint32_t)0x00000002)
   HAL_DMA_ERROR_NONE=((uint32_t)0x00000000)
   HAL_DMA_ERROR_TE=((uint32_t)0x00000001)
   HAL_DMA_ERROR_TIMEOUT=((uint32_t)0x00000020)
   HAL_DMA_MODULE_ENABLED=
   HAL_DSI_ERROR_ACK=((uint32_t)0x00000001)
   HAL_DSI_ERROR_CRC=((uint32_t)0x00000020)
   HAL_DSI_ERROR_ECC=((uint32_t)0x00000010)
   HAL_DSI_ERROR_EOT=((uint32_t)0x00000080)
   HAL_DSI_ERROR_GEN=((uint32_t)0x00000200)
   HAL_DSI_ERROR_NONE=0
   HAL_DSI_ERROR_OVF=((uint32_t)0x00000100)
   HAL_DSI_ERROR_PHY=((uint32_t)0x00000002)
   HAL_DSI_ERROR_PSE=((uint32_t)0x00000040)
   HAL_DSI_ERROR_RX=((uint32_t)0x00000008)
   HAL_DSI_ERROR_TX=((uint32_t)0x00000004)
   HAL_DSI_MODULE_ENABLED=
   HAL_EnableDBGSleepMode=HAL_DBGMCU_EnableDBGSleepMode
   HAL_EnableDBGStandbyMode=HAL_DBGMCU_EnableDBGStandbyMode
   HAL_EnableDBGStopMode=HAL_DBGMCU_EnableDBGStopMode
   HAL_FLASH_ERROR_NONE=((uint32_t)0x00000000)
   HAL_FLASH_ERROR_OPERATION=((uint32_t)0x00000020)
   HAL_FLASH_ERROR_PGA=((uint32_t)0x00000008)
   HAL_FLASH_ERROR_PGP=((uint32_t)0x00000004)
   HAL_FLASH_ERROR_PGS=((uint32_t)0x00000002)
   HAL_FLASH_ERROR_RD=((uint32_t)0x00000001)
   HAL_FLASH_ERROR_WRP=((uint32_t)0x00000010)
   HAL_FLASH_MODULE_ENABLED=
   HAL_FLASH_TIMEOUT_VALUE=FLASH_TIMEOUT_VALUE
   HAL_GPIO_MODULE_ENABLED=
   HAL_HMAC_MD5_Finish=HAL_HASH_MD5_Finish
   HAL_HMAC_SHA1_Finish=HAL_HASH_SHA1_Finish
   HAL_HMAC_SHA224_Finish=HAL_HASH_SHA224_Finish
   HAL_HMAC_SHA256_Finish=HAL_HASH_SHA256_Finish
   HAL_HPP=
   HAL_I2CEx_AnalogFilter_Config=HAL_I2CEx_ConfigAnalogFilter
   HAL_I2CEx_DigitalFilter_Config=HAL_I2CEx_ConfigDigitalFilter
   HAL_I2CFastModePlusConfig(SYSCFG_I2CFastModePlus,cmd)=(((cmd)==ENABLE)? HAL_I2CEx_EnableFastModePlus(SYSCFG_I2CFastModePlus): HAL_I2CEx_DisableFastModePlus(SYSCFG_I2CFastModePlus))
   HAL_I2C_ERROR_AF=((uint32_t)0x00000004)
   HAL_I2C_ERROR_ARLO=((uint32_t)0x00000002)
   HAL_I2C_ERROR_BERR=((uint32_t)0x00000001)
   HAL_I2C_ERROR_DMA=((uint32_t)0x00000010)
   HAL_I2C_ERROR_NONE=((uint32_t)0x00000000)
   HAL_I2C_ERROR_OVR=((uint32_t)0x00000008)
   HAL_I2C_ERROR_TIMEOUT=((uint32_t)0x00000020)
   HAL_I2C_MODULE_ENABLED=
   HAL_IS_BIT_CLR(REG,BIT)=(((REG) & (BIT)) == RESET)
   HAL_IS_BIT_SET(REG,BIT)=(((REG) & (BIT)) != RESET)
   HAL_Lock_Cmd(cmd)=(((cmd)==ENABLE) ? HAL_SYSCFG_Enable_Lock_VREFINT() : HAL_SYSCFG_Disable_Lock_VREFINT())
   HAL_LTDC_ERROR_FU=((uint32_t)0x00000002)
   HAL_LTDC_ERROR_NONE=((uint32_t)0x00000000)
   HAL_LTDC_ERROR_TE=((uint32_t)0x00000001)
   HAL_LTDC_ERROR_TIMEOUT=((uint32_t)0x00000020)
   HAL_LTDC_LineEvenCallback=HAL_LTDC_LineEventCallback
   HAL_LTDC_MODULE_ENABLED=
   HAL_MAX_DELAY=0xFFFFFFFF
   HAL_MODULE_ENABLED=
   HAL_PCD_ActiveRemoteWakeup=HAL_PCD_ActivateRemoteWakeup
   HAL_PCD_DeActiveRemoteWakeup=HAL_PCD_DeActivateRemoteWakeup
   HAL_PCD_SetRxFiFo=HAL_PCDEx_SetRxFiFo
   HAL_PCD_SetTxFiFo=HAL_PCDEx_SetTxFiFo
   HAL_PWREx_ActivateOverDrive=HAL_PWREx_EnableOverDrive
   HAL_PWREx_DeactivateOverDrive=HAL_PWREx_DisableOverDrive
   HAL_PWREx_DisableSDADCAnalog=HAL_PWREx_DisableSDADC
   HAL_PWREx_EnableSDADCAnalog=HAL_PWREx_EnableSDADC
   HAL_PWREx_PVMConfig=HAL_PWREx_ConfigPVM
   HAL_PWR_DisableBkUpReg=HAL_PWREx_DisableBkUpReg
   HAL_PWR_DisableFlashPowerDown=HAL_PWREx_DisableFlashPowerDown
   HAL_PWR_DisableVddio2Monitor=HAL_PWREx_DisableVddio2Monitor
   HAL_PWR_EnableBkUpReg=HAL_PWREx_EnableBkUpReg
   HAL_PWR_EnableFlashPowerDown=HAL_PWREx_EnableFlashPowerDown
   HAL_PWR_EnableVddio2Monitor=HAL_PWREx_EnableVddio2Monitor
   HAL_PWR_MODULE_ENABLED=
   HAL_PWR_PVDConfig=HAL_PWR_ConfigPVD
   HAL_PWR_PVDLevelConfig=HAL_PWR_ConfigPVD
   HAL_PWR_PVD_PVM_IRQHandler=HAL_PWREx_PVD_PVM_IRQHandler
   HAL_PWR_Vddio2MonitorCallback=HAL_PWREx_Vddio2MonitorCallback
   HAL_PWR_Vddio2Monitor_IRQHandler=HAL_PWREx_Vddio2Monitor_IRQHandler
   HAL_QPSI_TIMEOUT_DEFAULT_VALUE=((uint32_t)5000)
   HAL_QSPI_ERROR_DMA=((uint32_t)0x00000004)
   HAL_QSPI_ERROR_NONE=((uint32_t)0x00000000)
   HAL_QSPI_ERROR_TIMEOUT=((uint32_t)0x00000001)
   HAL_QSPI_ERROR_TRANSFER=((uint32_t)0x00000002)
   HAL_QSPI_MODULE_ENABLED=
   HAL_RC48_EnableBuffer_Cmd(cmd)=(((cmd)==ENABLE) ? HAL_RCCEx_EnableHSI48_VREFINT() : HAL_RCCEx_DisableHSI48_VREFINT())
   HAL_RCC_CCSCallback=HAL_RCC_CSSCallback
   HAL_RCC_MODULE_ENABLED=
   HAL_REMAPDMA_ADC_DMA_CH2=DMA_REMAP_ADC_DMA_CH2
   HAL_REMAPDMA_I2C1_DMA_CH76=DMA_REMAP_I2C1_DMA_CH76
   HAL_REMAPDMA_SPI2_DMA_CH67=DMA_REMAP_SPI2_DMA_CH67
   HAL_REMAPDMA_TIM16_DMA_CH4=DMA_REMAP_TIM16_DMA_CH4
   HAL_REMAPDMA_TIM16_DMA_CH6=DMA_REMAP_TIM16_DMA_CH6
   HAL_REMAPDMA_TIM17_DMA_CH2=DMA_REMAP_TIM17_DMA_CH2
   HAL_REMAPDMA_TIM17_DMA_CH7=DMA_REMAP_TIM17_DMA_CH7
   HAL_REMAPDMA_TIM1_DMA_CH6=DMA_REMAP_TIM1_DMA_CH6
   HAL_REMAPDMA_TIM2_DMA_CH7=DMA_REMAP_TIM2_DMA_CH7
   HAL_REMAPDMA_TIM3_DMA_CH6=DMA_REMAP_TIM3_DMA_CH6
   HAL_REMAPDMA_USART1_RX_DMA_CH5=DMA_REMAP_USART1_RX_DMA_CH5
   HAL_REMAPDMA_USART1_TX_DMA_CH4=DMA_REMAP_USART1_TX_DMA_CH4
   HAL_REMAPDMA_USART2_DMA_CH67=DMA_REMAP_USART2_DMA_CH67
   HAL_REMAPDMA_USART3_DMA_CH32=DMA_REMAP_USART3_DMA_CH32
   HAL_RNG_ReadyCallback(__HANDLE__)=HAL_RNG_ReadyDataCallback((__HANDLE__), uint32_t random32bit)
   HAL_SDRAM_MODULE_ENABLED=
   HAL_SMBUS_SlaveAddrCallback=HAL_SMBUS_AddrCallback
   HAL_SMBUS_SlaveListenCpltCallback=HAL_SMBUS_ListenCpltCallback
   HAL_SMBUS_Slave_Listen_IT=HAL_SMBUS_EnableListen_IT
   HAL_SMBUS_STATE_SLAVE_LISTEN=HAL_SMBUS_STATE_LISTEN
   HAL_SPI_FlushRxFifo=HAL_SPIEx_FlushRxFifo
   HAL_SRAM_MODULE_ENABLED=
   HAL_SYSCFG_FASTMODEPLUS_I2C1=I2C_FASTMODEPLUS_I2C1
   HAL_SYSCFG_FASTMODEPLUS_I2C2=I2C_FASTMODEPLUS_I2C2
   HAL_SYSCFG_FASTMODEPLUS_I2C3=I2C_FASTMODEPLUS_I2C3
   HAL_SYSCFG_FASTMODEPLUS_I2C_PA10=I2C_FASTMODEPLUS_PA10
   HAL_SYSCFG_FASTMODEPLUS_I2C_PA9=I2C_FASTMODEPLUS_PA9
   HAL_SYSCFG_FASTMODEPLUS_I2C_PB6=I2C_FASTMODEPLUS_PB6
   HAL_SYSCFG_FASTMODEPLUS_I2C_PB7=I2C_FASTMODEPLUS_PB7
   HAL_SYSCFG_FASTMODEPLUS_I2C_PB8=I2C_FASTMODEPLUS_PB8
   HAL_SYSCFG_FASTMODEPLUS_I2C_PB9=I2C_FASTMODEPLUS_PB9
   HAL_TIMEx_DMACommutationCplt=TIMEx_DMACommutationCplt
   HAL_TIM_DMACaptureCplt=TIM_DMACaptureCplt
   HAL_TIM_DMADelayPulseCplt=TIM_DMADelayPulseCplt
   HAL_TIM_DMAError=TIM_DMAError
   HAL_UART_ERROR_DMA=((uint32_t)0x00000010)
   HAL_UART_ERROR_FE=((uint32_t)0x00000004)
   HAL_UART_ERROR_NE=((uint32_t)0x00000002)
   HAL_UART_ERROR_NONE=((uint32_t)0x00000000)
   HAL_UART_ERROR_ORE=((uint32_t)0x00000008)
   HAL_UART_ERROR_PE=((uint32_t)0x00000001)
   HAL_UART_MODULE_ENABLED=
   HAL_UART_WakeupCallback=HAL_UARTEx_WakeupCallback
   HAL_VREFINT_Cmd(cmd)=(((cmd)==ENABLE)? HAL_SYSCFG_EnableVREFINT() : HAL_SYSCFG_DisableVREFINT())
   HAL_VREFINT_OutputSelect=HAL_SYSCFG_VREFINT_OutputSelect
   HASH_AlgoMode_HASH=HASH_ALGOMODE_HASH
   HASH_AlgoMode_HMAC=HASH_ALGOMODE_HMAC
   HASH_AlgoSelection_MD5=HASH_ALGOSELECTION_MD5
   HASH_AlgoSelection_SHA1=HASH_ALGOSELECTION_SHA1
   HASH_AlgoSelection_SHA224=HASH_ALGOSELECTION_SHA224
   HASH_AlgoSelection_SHA256=HASH_ALGOSELECTION_SHA256
   HASH_HMACKeyType_LongKey=HASH_HMAC_KEYTYPE_LONGKEY
   HASH_HMACKeyType_ShortKey=HASH_HMAC_KEYTYPE_SHORTKEY
   HAVE_INITFINI_ARRAY=1
   HOMESCREEN_PRESENTER_HPP=
   HOMESCREEN_VIEW_BASE_HPP=
   HOMESCREEN_VIEW_HPP=
   HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV68=HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6
   HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV79=HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7
   HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV68=HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV6
   HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV79=HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7
   HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_DEEV79=HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_DEEV7
   HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_EEV68=HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_EEV6
   HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_DEEV79=HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_DEEV7
   HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_EEV68=HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_EEV6
   HRTIM_TIMDELAYEDPROTECTION_DISABLED=HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED
   HSEON_BitNumber=RCC_HSEON_BIT_NUMBER
   HSE_STARTUP_TIMEOUT=((uint32_t)5000)
   HSE_TIMEOUT_VALUE=HSE_STARTUP_TIMEOUT
   HSE_VALUE=((uint32_t)8000000)
   HSION_BitNumber=RCC_HSION_BIT_NUMBER
   HSI_TIMEOUT_VALUE=((uint32_t)100)
   HSI_VALUE=((uint32_t)16000000)
   HUGE_VAL=(__builtin_huge_val())
   HUGE_VALF=(__builtin_huge_valf())
   HUGE_VALL=(__builtin_huge_vall())
   I2C1=((I2C_TypeDef *) I2C1_BASE)
   I2C1_BASE=(APB1PERIPH_BASE + 0x5400)
   I2C1_SCL_FREQ_KHZ=400000
   I2C2=((I2C_TypeDef *) I2C2_BASE)
   I2C2_BASE=(APB1PERIPH_BASE + 0x5800)
   I2C2_SCL_FREQ_KHZ=100000
   I2C3=((I2C_TypeDef *) I2C3_BASE)
   I2C3_BASE=(APB1PERIPH_BASE + 0x5C00)
   I2C_10BIT_ADDRESS(__ADDRESS__)=((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)(0x00FF))))
   I2C_10BIT_HEADER_READ(__ADDRESS__)=((uint8_t)((uint16_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)(0x0300))) >> 7) | (uint16_t)(0xF1))))
   I2C_10BIT_HEADER_WRITE(__ADDRESS__)=((uint8_t)((uint16_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)(0x0300))) >> 7) | (uint16_t)(0xF0))))
   I2C_7BIT_ADD_READ(__ADDRESS__)=((uint8_t)((__ADDRESS__) | I2C_OAR1_ADD0))
   I2C_7BIT_ADD_WRITE(__ADDRESS__)=((uint8_t)((__ADDRESS__) & (~I2C_OAR1_ADD0)))
   I2C_ADDRESSINGMODE_10BIT=(I2C_OAR1_ADDMODE | ((uint32_t)0x00004000))
   I2C_ADDRESSINGMODE_7BIT=((uint32_t)0x00004000)
   I2C_ANALOGFILTER_DISABLE=I2C_FLTR_ANOFF
   I2C_ANALOGFILTER_DISABLED=I2C_ANALOGFILTER_DISABLE
   I2C_ANALOGFILTER_ENABLE=((uint32_t)0x00000000)
   I2C_ANALOGFILTER_ENABLED=I2C_ANALOGFILTER_ENABLE
   I2C_CCR_CCR=((uint32_t)0x00000FFF)
   I2C_CCR_DUTY=((uint32_t)0x00004000)
   I2C_CCR_FS=((uint32_t)0x00008000)
   I2C_CR1_ACK=((uint32_t)0x00000400)
   I2C_CR1_ALERT=((uint32_t)0x00002000)
   I2C_CR1_ENARP=((uint32_t)0x00000010)
   I2C_CR1_ENGC=((uint32_t)0x00000040)
   I2C_CR1_ENPEC=((uint32_t)0x00000020)
   I2C_CR1_NOSTRETCH=((uint32_t)0x00000080)
   I2C_CR1_PE=((uint32_t)0x00000001)
   I2C_CR1_PEC=((uint32_t)0x00001000)
   I2C_CR1_POS=((uint32_t)0x00000800)
   I2C_CR1_SMBTYPE=((uint32_t)0x00000008)
   I2C_CR1_SMBUS=((uint32_t)0x00000002)
   I2C_CR1_START=((uint32_t)0x00000100)
   I2C_CR1_STOP=((uint32_t)0x00000200)
   I2C_CR1_SWRST=((uint32_t)0x00008000)
   I2C_CR2_DMAEN=((uint32_t)0x00000800)
   I2C_CR2_FREQ=((uint32_t)0x0000003F)
   I2C_CR2_FREQ_0=((uint32_t)0x00000001)
   I2C_CR2_FREQ_1=((uint32_t)0x00000002)
   I2C_CR2_FREQ_2=((uint32_t)0x00000004)
   I2C_CR2_FREQ_3=((uint32_t)0x00000008)
   I2C_CR2_FREQ_4=((uint32_t)0x00000010)
   I2C_CR2_FREQ_5=((uint32_t)0x00000020)
   I2C_CR2_ITBUFEN=((uint32_t)0x00000400)
   I2C_CR2_ITERREN=((uint32_t)0x00000100)
   I2C_CR2_ITEVTEN=((uint32_t)0x00000200)
   I2C_CR2_LAST=((uint32_t)0x00001000)
   I2C_DR_DR=((uint32_t)0x000000FF)
   I2C_DUALADDRESS_DISABLE=((uint32_t)0x00000000)
   I2C_DUALADDRESS_DISABLED=I2C_DUALADDRESS_DISABLE
   I2C_DUALADDRESS_ENABLE=I2C_OAR2_ENDUAL
   I2C_DUALADDRESS_ENABLED=I2C_DUALADDRESS_ENABLE
   I2C_DUTYCYCLE_16_9=I2C_CCR_DUTY
   I2C_DUTYCYCLE_2=((uint32_t)0x00000000)
   I2C_FLAG_ADD10=((uint32_t)0x00010008)
   I2C_FLAG_ADDR=((uint32_t)0x00010002)
   I2C_FLAG_AF=((uint32_t)0x00010400)
   I2C_FLAG_ARLO=((uint32_t)0x00010200)
   I2C_FLAG_BERR=((uint32_t)0x00010100)
   I2C_FLAG_BTF=((uint32_t)0x00010004)
   I2C_FLAG_BUSY=((uint32_t)0x00100002)
   I2C_FLAG_DUALF=((uint32_t)0x00100080)
   I2C_FLAG_GENCALL=((uint32_t)0x00100010)
   I2C_FLAG_MASK=((uint32_t)0x0000FFFF)
   I2C_FLAG_MSL=((uint32_t)0x00100001)
   I2C_FLAG_OVR=((uint32_t)0x00010800)
   I2C_FLAG_PECERR=((uint32_t)0x00011000)
   I2C_FLAG_RXNE=((uint32_t)0x00010040)
   I2C_FLAG_SB=((uint32_t)0x00010001)
   I2C_FLAG_SMBALERT=((uint32_t)0x00018000)
   I2C_FLAG_SMBDEFAULT=((uint32_t)0x00100020)
   I2C_FLAG_SMBHOST=((uint32_t)0x00100040)
   I2C_FLAG_STOPF=((uint32_t)0x00010010)
   I2C_FLAG_TIMEOUT=((uint32_t)0x00014000)
   I2C_FLAG_TRA=((uint32_t)0x00100004)
   I2C_FLAG_TXE=((uint32_t)0x00010080)
   I2C_FLTR_ANOFF=((uint32_t)0x00000010)
   I2C_FLTR_DNF=((uint32_t)0x0000000F)
   I2C_FREQRANGE(__PCLK__)=((__PCLK__)/1000000)
   I2C_GENERALCALL_DISABLE=((uint32_t)0x00000000)
   I2C_GENERALCALL_DISABLED=I2C_GENERALCALL_DISABLE
   I2C_GENERALCALL_ENABLE=I2C_CR1_ENGC
   I2C_GENERALCALL_ENABLED=I2C_GENERALCALL_ENABLE
   I2C_IT_BUF=I2C_CR2_ITBUFEN
   I2C_IT_ERR=I2C_CR2_ITERREN
   I2C_IT_EVT=I2C_CR2_ITEVTEN
   I2C_MEMADD_SIZE_16BIT=((uint32_t)0x00000010)
   I2C_MEMADD_SIZE_8BIT=((uint32_t)0x00000001)
   I2C_MEM_ADD_LSB(__ADDRESS__)=((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)(0x00FF))))
   I2C_MEM_ADD_MSB(__ADDRESS__)=((uint8_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)(0xFF00))) >> 8)))
   I2C_NOSTRETCH_DISABLE=((uint32_t)0x00000000)
   I2C_NOSTRETCH_DISABLED=I2C_NOSTRETCH_DISABLE
   I2C_NOSTRETCH_ENABLE=I2C_CR1_NOSTRETCH
   I2C_NOSTRETCH_ENABLED=I2C_NOSTRETCH_ENABLE
   I2C_OAR1_ADD0=((uint32_t)0x00000001)
   I2C_OAR1_ADD1=((uint32_t)0x00000002)
   I2C_OAR1_ADD1_7=((uint32_t)0x000000FE)
   I2C_OAR1_ADD2=((uint32_t)0x00000004)
   I2C_OAR1_ADD3=((uint32_t)0x00000008)
   I2C_OAR1_ADD4=((uint32_t)0x00000010)
   I2C_OAR1_ADD5=((uint32_t)0x00000020)
   I2C_OAR1_ADD6=((uint32_t)0x00000040)
   I2C_OAR1_ADD7=((uint32_t)0x00000080)
   I2C_OAR1_ADD8=((uint32_t)0x00000100)
   I2C_OAR1_ADD8_9=((uint32_t)0x00000300)
   I2C_OAR1_ADD9=((uint32_t)0x00000200)
   I2C_OAR1_ADDMODE=((uint32_t)0x00008000)
   I2C_OAR2_ADD2=((uint32_t)0x000000FE)
   I2C_OAR2_ENDUAL=((uint32_t)0x00000001)
   I2C_RISE_TIME(__FREQRANGE__,__SPEED__)=(((__SPEED__) <= 100000) ? ((__FREQRANGE__) + 1) : ((((__FREQRANGE__) * 300) / 1000) + 1))
   I2C_SPEED(__PCLK__,__SPEED__,__DUTYCYCLE__)=(((__SPEED__) <= 100000)? (I2C_SPEED_STANDARD((__PCLK__), (__SPEED__))) : ((I2C_SPEED_FAST((__PCLK__), (__SPEED__), (__DUTYCYCLE__)) & I2C_CCR_CCR) == 0)? 1 : ((I2C_SPEED_FAST((__PCLK__), (__SPEED__), (__DUTYCYCLE__))) | I2C_CCR_FS))
   I2C_SPEED_FAST(__PCLK__,__SPEED__,__DUTYCYCLE__)=(((__DUTYCYCLE__) == I2C_DUTYCYCLE_2)? ((__PCLK__) / ((__SPEED__) * 3)) : (((__PCLK__) / ((__SPEED__) * 25)) | I2C_DUTYCYCLE_16_9))
   I2C_SPEED_STANDARD(__PCLK__,__SPEED__)=(((((__PCLK__)/((__SPEED__) << 1)) & I2C_CCR_CCR) < 4)? 4:((__PCLK__) / ((__SPEED__) << 1)))
   I2C_SR1_ADD10=((uint32_t)0x00000008)
   I2C_SR1_ADDR=((uint32_t)0x00000002)
   I2C_SR1_AF=((uint32_t)0x00000400)
   I2C_SR1_ARLO=((uint32_t)0x00000200)
   I2C_SR1_BERR=((uint32_t)0x00000100)
   I2C_SR1_BTF=((uint32_t)0x00000004)
   I2C_SR1_OVR=((uint32_t)0x00000800)
   I2C_SR1_PECERR=((uint32_t)0x00001000)
   I2C_SR1_RXNE=((uint32_t)0x00000040)
   I2C_SR1_SB=((uint32_t)0x00000001)
   I2C_SR1_SMBALERT=((uint32_t)0x00008000)
   I2C_SR1_STOPF=((uint32_t)0x00000010)
   I2C_SR1_TIMEOUT=((uint32_t)0x00004000)
   I2C_SR1_TXE=((uint32_t)0x00000080)
   I2C_SR2_BUSY=((uint32_t)0x00000002)
   I2C_SR2_DUALF=((uint32_t)0x00000080)
   I2C_SR2_GENCALL=((uint32_t)0x00000010)
   I2C_SR2_MSL=((uint32_t)0x00000001)
   I2C_SR2_PEC=((uint32_t)0x0000FF00)
   I2C_SR2_SMBDEFAULT=((uint32_t)0x00000020)
   I2C_SR2_SMBHOST=((uint32_t)0x00000040)
   I2C_SR2_TRA=((uint32_t)0x00000004)
   I2C_TRISE_TRISE=((uint32_t)0x0000003F)
   I2S2ext=((SPI_TypeDef *) I2S2ext_BASE)
   I2S2ext_BASE=(APB1PERIPH_BASE + 0x3400)
   I2S3ext=((SPI_TypeDef *) I2S3ext_BASE)
   I2S3ext_BASE=(APB1PERIPH_BASE + 0x4000)
   I2SSRC_BitNumber=RCC_I2SSRC_BIT_NUMBER
   I2S_STANDARD_PHILLIPS=I2S_STANDARD_PHILIPS
   IMAGE_HPP=
   INAK_TIMEOUT=CAN_TIMEOUT_VALUE
   INFINITY=(__builtin_inff())
   INJECTED_CHANNELS=ADC_INJECTED_CHANNELS
   INJECTED_GROUP=ADC_INJECTED_GROUP
   INSTRUCTION_CACHE_ENABLE=1
   INT16_C(x)=__INT16_C(x)
   INT16_MAX=(__INT16_MAX__)
   INT16_MIN=(-__INT16_MAX__ - 1)
   INT32_C(x)=__INT32_C(x)
   INT32_MAX=(__INT32_MAX__)
   INT32_MIN=(-__INT32_MAX__ - 1)
   INT64_C(x)=__INT64_C(x)
   INT64_MAX=(__INT64_MAX__)
   INT64_MIN=(-__INT64_MAX__ - 1)
   INT8_C(x)=__INT8_C(x)
   INT8_MAX=(__INT8_MAX__)
   INT8_MIN=(-__INT8_MAX__ - 1)
   int=+2
   INTMAX_C(x)=__INTMAX_C(x)
   INTMAX_MAX=(__INTMAX_MAX__)
   INTMAX_MIN=(-INTMAX_MAX - 1)
   INTPTR_MAX=(__INTPTR_MAX__)
   INTPTR_MIN=(-__INTPTR_MAX__ - 1)
   INT_FAST16_MAX=(__INT_FAST16_MAX__)
   INT_FAST16_MIN=(-__INT_FAST16_MAX__ - 1)
   INT_FAST32_MAX=(__INT_FAST32_MAX__)
   INT_FAST32_MIN=(-__INT_FAST32_MAX__ - 1)
   INT_FAST64_MAX=(__INT_FAST64_MAX__)
   INT_FAST64_MIN=(-__INT_FAST64_MAX__ - 1)
   INT_FAST8_MAX=(__INT_FAST8_MAX__)
   INT_FAST8_MIN=(-__INT_FAST8_MAX__ - 1)
   INT_LEAST16_MAX=(__INT_LEAST16_MAX__)
   INT_LEAST16_MIN=(-__INT_LEAST16_MAX__ - 1)
   INT_LEAST32_MAX=(__INT_LEAST32_MAX__)
   INT_LEAST32_MIN=(-__INT_LEAST32_MAX__ - 1)
   INT_LEAST64_MAX=(__INT_LEAST64_MAX__)
   INT_LEAST64_MIN=(-__INT_LEAST64_MAX__ - 1)
   INT_LEAST8_MAX=(__INT_LEAST8_MAX__)
   INT_LEAST8_MIN=(-__INT_LEAST8_MAX__ - 1)
   IOPAMP_INVERTINGINPUT_VM0=OPAMP_INVERTINGINPUT_IO0
   IOPAMP_INVERTINGINPUT_VM1=OPAMP_INVERTINGINPUT_IO1
   IPSR_ISR_Msk=(0x1FFUL )
   IPSR_ISR_Pos=0
   IRDA_ONE_BIT_SAMPLE_DISABLED=IRDA_ONE_BIT_SAMPLE_DISABLE
   IRDA_ONE_BIT_SAMPLE_ENABLED=IRDA_ONE_BIT_SAMPLE_ENABLE
   isfinite(__x)=(__builtin_isfinite (__x))
   isgreater(__x,__y)=(__builtin_isgreater (__x, __y))
   isgreaterequal(__x,__y)=(__builtin_isgreaterequal (__x, __y))
   isinf(__x)=(__builtin_isinf_sign (__x))
   isless(__x,__y)=(__builtin_isless (__x, __y))
   islessequal(__x,__y)=(__builtin_islessequal (__x, __y))
   islessgreater(__x,__y)=(__builtin_islessgreater (__x, __y))
   isnan(__x)=(__builtin_isnan (__x))
   isnormal(__x)=(__builtin_isnormal (__x))
   isunordered(__x,__y)=(__builtin_isunordered (__x, __y))
   IS_ADC_ALL_INSTANCE(INSTANCE)=(((INSTANCE) == ADC1) || ((INSTANCE) == ADC2) || ((INSTANCE) == ADC3))
   IS_ALARM=IS_RTC_ALARM
   IS_ALARM_MASK=IS_RTC_ALARM_MASK
   IS_CAN_ALL_INSTANCE(INSTANCE)=(((INSTANCE) == CAN1) || ((INSTANCE) == CAN2))
   IS_CRC_ALL_INSTANCE(INSTANCE)=((INSTANCE) == CRC)
   IS_DAC_ALL_INSTANCE(INSTANCE)=((INSTANCE) == DAC)
   IS_DAC_GENERATE_WAVE=IS_DAC_WAVE
   IS_DAC_WAVE(WAVE)=(((WAVE) == DAC_WAVE_NONE) || ((WAVE) == DAC_WAVE_NOISE)|| ((WAVE) == DAC_WAVE_TRIANGLE))
   IS_DCMI_ALL_INSTANCE(INSTANCE)=((INSTANCE) == DCMI)
   IS_DMA2D_ALL_INSTANCE(INSTANCE)=((INSTANCE) == DMA2D)
   IS_DMA2D_ALPHA_MODE(AlphaMode)=(((AlphaMode) == DMA2D_NO_MODIF_ALPHA) || ((AlphaMode) == DMA2D_REPLACE_ALPHA) || ((AlphaMode) == DMA2D_COMBINE_ALPHA))
   IS_DMA2D_CLUT_CM(CLUT_CM)=(((CLUT_CM) == DMA2D_CCM_ARGB8888) || ((CLUT_CM) == DMA2D_CCM_RGB888))
   IS_DMA2D_CLUT_SIZE(CLUT_SIZE)=((CLUT_SIZE) <= DMA2D_CLUT_SIZE)
   IS_DMA2D_CMODE(MODE_ARGB)=(((MODE_ARGB) == DMA2D_ARGB8888) || ((MODE_ARGB) == DMA2D_RGB888) || ((MODE_ARGB) == DMA2D_RGB565) || ((MODE_ARGB) == DMA2D_ARGB1555) || ((MODE_ARGB) == DMA2D_ARGB4444))
   IS_DMA2D_COLOR(COLOR)=((COLOR) <= COLOR_VALUE)
   IS_DMA2D_INPUT_COLOR_MODE(INPUT_CM)=(((INPUT_CM) == CM_ARGB8888) || ((INPUT_CM) == CM_RGB888) || ((INPUT_CM) == CM_RGB565) || ((INPUT_CM) == CM_ARGB1555) || ((INPUT_CM) == CM_ARGB4444) || ((INPUT_CM) == CM_L8) || ((INPUT_CM) == CM_AL44) || ((INPUT_CM) == CM_AL88) || ((INPUT_CM) == CM_L4) || ((INPUT_CM) == CM_A8) || ((INPUT_CM) == CM_A4))
   IS_DMA2D_LAYER(LAYER)=((LAYER) <= MAX_DMA2D_LAYER)
   IS_DMA2D_LINE(LINE)=((LINE) <= DMA2D_LINE)
   IS_DMA2D_LineWatermark(LineWatermark)=((LineWatermark) <= LINE_WATERMARK)
   IS_DMA2D_MODE(MODE)=(((MODE) == DMA2D_M2M) || ((MODE) == DMA2D_M2M_PFC) || ((MODE) == DMA2D_M2M_BLEND) || ((MODE) == DMA2D_R2M))
   IS_DMA2D_OFFSET(OOFFSET)=((OOFFSET) <= DMA2D_OFFSET)
   IS_DMA2D_PIXEL(PIXEL)=((PIXEL) <= DMA2D_PIXEL)
   IS_DMA_BUFFER_SIZE(SIZE)=(((SIZE) >= 0x1) && ((SIZE) < 0x10000))
   IS_DMA_CHANNEL(CHANNEL)=(((CHANNEL) == DMA_CHANNEL_0) || ((CHANNEL) == DMA_CHANNEL_1) || ((CHANNEL) == DMA_CHANNEL_2) || ((CHANNEL) == DMA_CHANNEL_3) || ((CHANNEL) == DMA_CHANNEL_4) || ((CHANNEL) == DMA_CHANNEL_5) || ((CHANNEL) == DMA_CHANNEL_6) || ((CHANNEL) == DMA_CHANNEL_7))
   IS_DMA_DIRECTION(DIRECTION)=(((DIRECTION) == DMA_PERIPH_TO_MEMORY ) || ((DIRECTION) == DMA_MEMORY_TO_PERIPH) || ((DIRECTION) == DMA_MEMORY_TO_MEMORY))
   IS_DMA_FIFO_MODE_STATE(STATE)=(((STATE) == DMA_FIFOMODE_DISABLE ) || ((STATE) == DMA_FIFOMODE_ENABLE))
   IS_DMA_FIFO_THRESHOLD(THRESHOLD)=(((THRESHOLD) == DMA_FIFO_THRESHOLD_1QUARTERFULL ) || ((THRESHOLD) == DMA_FIFO_THRESHOLD_HALFFULL) || ((THRESHOLD) == DMA_FIFO_THRESHOLD_3QUARTERSFULL) || ((THRESHOLD) == DMA_FIFO_THRESHOLD_FULL))
   IS_DMA_MEMORY_BURST(BURST)=(((BURST) == DMA_MBURST_SINGLE) || ((BURST) == DMA_MBURST_INC4) || ((BURST) == DMA_MBURST_INC8) || ((BURST) == DMA_MBURST_INC16))
   IS_DMA_MEMORY_DATA_SIZE(SIZE)=(((SIZE) == DMA_MDATAALIGN_BYTE) || ((SIZE) == DMA_MDATAALIGN_HALFWORD) || ((SIZE) == DMA_MDATAALIGN_WORD ))
   IS_DMA_MEMORY_INC_STATE(STATE)=(((STATE) == DMA_MINC_ENABLE) || ((STATE) == DMA_MINC_DISABLE))
   IS_DMA_MODE(MODE)=(((MODE) == DMA_NORMAL ) || ((MODE) == DMA_CIRCULAR) || ((MODE) == DMA_PFCTRL))
   IS_DMA_PERIPHERAL_BURST(BURST)=(((BURST) == DMA_PBURST_SINGLE) || ((BURST) == DMA_PBURST_INC4) || ((BURST) == DMA_PBURST_INC8) || ((BURST) == DMA_PBURST_INC16))
   IS_DMA_PERIPHERAL_DATA_SIZE(SIZE)=(((SIZE) == DMA_PDATAALIGN_BYTE) || ((SIZE) == DMA_PDATAALIGN_HALFWORD) || ((SIZE) == DMA_PDATAALIGN_WORD))
   IS_DMA_PERIPHERAL_INC_STATE(STATE)=(((STATE) == DMA_PINC_ENABLE) || ((STATE) == DMA_PINC_DISABLE))
   IS_DMA_PRIORITY(PRIORITY)=(((PRIORITY) == DMA_PRIORITY_LOW ) || ((PRIORITY) == DMA_PRIORITY_MEDIUM) || ((PRIORITY) == DMA_PRIORITY_HIGH) || ((PRIORITY) == DMA_PRIORITY_VERY_HIGH))
   IS_DMA_STREAM_ALL_INSTANCE(INSTANCE)=(((INSTANCE) == DMA1_Stream0) || ((INSTANCE) == DMA1_Stream1) || ((INSTANCE) == DMA1_Stream2) || ((INSTANCE) == DMA1_Stream3) || ((INSTANCE) == DMA1_Stream4) || ((INSTANCE) == DMA1_Stream5) || ((INSTANCE) == DMA1_Stream6) || ((INSTANCE) == DMA1_Stream7) || ((INSTANCE) == DMA2_Stream0) || ((INSTANCE) == DMA2_Stream1) || ((INSTANCE) == DMA2_Stream2) || ((INSTANCE) == DMA2_Stream3) || ((INSTANCE) == DMA2_Stream4) || ((INSTANCE) == DMA2_Stream5) || ((INSTANCE) == DMA2_Stream6) || ((INSTANCE) == DMA2_Stream7))
   IS_DSI_ACK_REQUEST(AcknowledgeRequest)=(((AcknowledgeRequest) == DSI_ACKNOWLEDGE_DISABLE) || ((AcknowledgeRequest) == DSI_ACKNOWLEDGE_ENABLE))
   IS_DSI_AUTOMATIC_REFRESH(AutomaticRefresh)=(((AutomaticRefresh) == DSI_AR_DISABLE) || ((AutomaticRefresh) == DSI_AR_ENABLE))
   IS_DSI_AUTO_CLKLANE_CONTROL(AutoClkLane)=(((AutoClkLane) == DSI_AUTO_CLK_LANE_CTRL_DISABLE) || ((AutoClkLane) == DSI_AUTO_CLK_LANE_CTRL_ENABLE))
   IS_DSI_COLOR_CODING(ColorCoding)=((ColorCoding) <= 5)
   IS_DSI_COLOR_MODE(ColorMode)=(((ColorMode) == DSI_COLOR_MODE_FULL) || ((ColorMode) == DSI_COLOR_MODE_EIGHT))
   IS_DSI_COMMUNICATION_DELAY(CommDelay)=(((CommDelay) == DSI_SLEW_RATE_HSTX) || ((CommDelay) == DSI_SLEW_RATE_LPTX) || ((CommDelay) == DSI_HS_DELAY))
   IS_DSI_CUSTOM_LANE(CustomLane)=(((CustomLane) == DSI_SWAP_LANE_PINS) || ((CustomLane) == DSI_INVERT_HS_SIGNAL))
   IS_DSI_DE_POLARITY(DataEnable)=(((DataEnable) == DSI_DATA_ENABLE_ACTIVE_HIGH) || ((DataEnable) == DSI_DATA_ENABLE_ACTIVE_LOW))
   IS_DSI_FBTAA(FrameBTAAcknowledge)=(((FrameBTAAcknowledge) == DSI_FBTAA_DISABLE) || ((FrameBTAAcknowledge) == DSI_FBTAA_ENABLE))
   IS_DSI_FLOW_CONTROL(FlowControl)=(((FlowControl) | DSI_FLOW_CONTROL_ALL) == DSI_FLOW_CONTROL_ALL)
   IS_DSI_HSYNC_POLARITY(HSYNC)=(((HSYNC) == DSI_HSYNC_ACTIVE_HIGH) || ((HSYNC) == DSI_HSYNC_ACTIVE_LOW))
   IS_DSI_LANE(Lane)=(((Lane) == DSI_CLOCK_LANE) || ((Lane) == DSI_DATA_LANE0) || ((Lane) == DSI_DATA_LANE1))
   IS_DSI_LANE_GROUP(Lane)=(((Lane) == DSI_CLOCK_LANE) || ((Lane) == DSI_DATA_LANES))
   IS_DSI_LONG_WRITE_PACKET_TYPE(MODE)=(((MODE) == DSI_DCS_LONG_PKT_WRITE) || ((MODE) == DSI_GEN_LONG_PKT_WRITE))
   IS_DSI_LOOSELY_PACKED(LooselyPacked)=(((LooselyPacked) == DSI_LOOSELY_PACKED_ENABLE) || ((LooselyPacked) == DSI_LOOSELY_PACKED_DISABLE))
   IS_DSI_LP_COMMAND(LPCommand)=(((LPCommand) == DSI_LP_COMMAND_DISABLE) || ((LPCommand) == DSI_LP_COMMAND_ENABLE))
   IS_DSI_LP_DLW(LP_DLW)=(((LP_DLW) == DSI_LP_DLW_DISABLE) || ((LP_DLW) == DSI_LP_DLW_ENABLE))
   IS_DSI_LP_DSR0P(LP_DSR0P)=(((LP_DSR0P) == DSI_LP_DSR0P_DISABLE) || ((LP_DSR0P) == DSI_LP_DSR0P_ENABLE))
   IS_DSI_LP_DSW0P(LP_DSW0P)=(((LP_DSW0P) == DSI_LP_DSW0P_DISABLE) || ((LP_DSW0P) == DSI_LP_DSW0P_ENABLE))
   IS_DSI_LP_DSW1P(LP_DSW1P)=(((LP_DSW1P) == DSI_LP_DSW1P_DISABLE) || ((LP_DSW1P) == DSI_LP_DSW1P_ENABLE))
   IS_DSI_LP_GLW(LP_GLW)=(((LP_GLW) == DSI_LP_GLW_DISABLE) || ((LP_GLW) == DSI_LP_GLW_ENABLE))
   IS_DSI_LP_GSR0P(LP_GSR0P)=(((LP_GSR0P) == DSI_LP_GSR0P_DISABLE) || ((LP_GSR0P) == DSI_LP_GSR0P_ENABLE))
   IS_DSI_LP_GSR1P(LP_GSR1P)=(((LP_GSR1P) == DSI_LP_GSR1P_DISABLE) || ((LP_GSR1P) == DSI_LP_GSR1P_ENABLE))
   IS_DSI_LP_GSR2P(LP_GSR2P)=(((LP_GSR2P) == DSI_LP_GSR2P_DISABLE) || ((LP_GSR2P) == DSI_LP_GSR2P_ENABLE))
   IS_DSI_LP_GSW0P(LP_GSW0P)=(((LP_GSW0P) == DSI_LP_GSW0P_DISABLE) || ((LP_GSW0P) == DSI_LP_GSW0P_ENABLE))
   IS_DSI_LP_GSW1P(LP_GSW1P)=(((LP_GSW1P) == DSI_LP_GSW1P_DISABLE) || ((LP_GSW1P) == DSI_LP_GSW1P_ENABLE))
   IS_DSI_LP_GSW2P(LP_GSW2P)=(((LP_GSW2P) == DSI_LP_GSW2P_DISABLE) || ((LP_GSW2P) == DSI_LP_GSW2P_ENABLE))
   IS_DSI_LP_HBP(LPHBP)=(((LPHBP) == DSI_LP_HBP_DISABLE) || ((LPHBP) == DSI_LP_HBP_ENABLE))
   IS_DSI_LP_HFP(LPHFP)=(((LPHFP) == DSI_LP_HFP_DISABLE) || ((LPHFP) == DSI_LP_HFP_ENABLE))
   IS_DSI_LP_MRDP(LP_MRDP)=(((LP_MRDP) == DSI_LP_MRDP_DISABLE) || ((LP_MRDP) == DSI_LP_MRDP_ENABLE))
   IS_DSI_LP_VACTIVE(LPVActive)=(((LPVActive) == DSI_LP_VACT_DISABLE) || ((LPVActive) == DSI_LP_VACT_ENABLE))
   IS_DSI_LP_VBP(LPVBP)=(((LPVBP) == DSI_LP_VBP_DISABLE) || ((LPVBP) == DSI_LP_VBP_ENABLE))
   IS_DSI_LP_VFP(LPVFP)=(((LPVFP) == DSI_LP_VFP_DISABLE) || ((LPVFP) == DSI_LP_VFP_ENABLE))
   IS_DSI_LP_VSYNC(LPVSYNC)=(((LPVSYNC) == DSI_LP_VSYNC_DISABLE) || ((LPVSYNC) == DSI_LP_VSYNC_ENABLE))
   IS_DSI_NUMBER_OF_LANES(NumberOfLanes)=(((NumberOfLanes) == DSI_ONE_DATA_LANE) || ((NumberOfLanes) == DSI_TWO_DATA_LANES))
   IS_DSI_PHY_TIMING(Timing)=(((Timing) == DSI_TCLK_POST ) || ((Timing) == DSI_TLPX_CLK ) || ((Timing) == DSI_THS_EXIT ) || ((Timing) == DSI_TLPX_DATA ) || ((Timing) == DSI_THS_ZERO ) || ((Timing) == DSI_THS_TRAIL ) || ((Timing) == DSI_THS_PREPARE ) || ((Timing) == DSI_TCLK_ZERO ) || ((Timing) == DSI_TCLK_PREPARE))
   IS_DSI_PLL_IDF(IDF)=(((IDF) == DSI_PLL_IN_DIV1) || ((IDF) == DSI_PLL_IN_DIV2) || ((IDF) == DSI_PLL_IN_DIV3) || ((IDF) == DSI_PLL_IN_DIV4) || ((IDF) == DSI_PLL_IN_DIV5) || ((IDF) == DSI_PLL_IN_DIV6) || ((IDF) == DSI_PLL_IN_DIV7))
   IS_DSI_PLL_NDIV(NDIV)=((10 <= (NDIV)) && ((NDIV) <= 125))
   IS_DSI_PLL_ODF(ODF)=(((ODF) == DSI_PLL_OUT_DIV1) || ((ODF) == DSI_PLL_OUT_DIV2) || ((ODF) == DSI_PLL_OUT_DIV4) || ((ODF) == DSI_PLL_OUT_DIV8))
   IS_DSI_READ_PACKET_TYPE(MODE)=(((MODE) == DSI_DCS_SHORT_PKT_READ) || ((MODE) == DSI_GEN_SHORT_PKT_READ_P0) || ((MODE) == DSI_GEN_SHORT_PKT_READ_P1) || ((MODE) == DSI_GEN_SHORT_PKT_READ_P2))
   IS_DSI_SHORT_WRITE_PACKET_TYPE(MODE)=(((MODE) == DSI_DCS_SHORT_PKT_WRITE_P0) || ((MODE) == DSI_DCS_SHORT_PKT_WRITE_P1) || ((MODE) == DSI_GEN_SHORT_PKT_WRITE_P0) || ((MODE) == DSI_GEN_SHORT_PKT_WRITE_P1) || ((MODE) == DSI_GEN_SHORT_PKT_WRITE_P2))
   IS_DSI_SHUT_DOWN(ShutDown)=(((ShutDown) == DSI_DISPLAY_ON) || ((ShutDown) == DSI_DISPLAY_OFF))
   IS_DSI_TE_ACK_REQUEST(TEAcknowledgeRequest)=(((TEAcknowledgeRequest) == DSI_TE_ACKNOWLEDGE_DISABLE) || ((TEAcknowledgeRequest) == DSI_TE_ACKNOWLEDGE_ENABLE))
   IS_DSI_TE_POLARITY(TEPolarity)=(((TEPolarity) == DSI_TE_RISING_EDGE) || ((TEPolarity) == DSI_TE_FALLING_EDGE))
   IS_DSI_TE_SOURCE(TESource)=(((TESource) == DSI_TE_DSILINK) || ((TESource) == DSI_TE_EXTERNAL))
   IS_DSI_VIDEO_MODE_TYPE(VideoModeType)=(((VideoModeType) == DSI_VID_MODE_NB_PULSES) || ((VideoModeType) == DSI_VID_MODE_NB_EVENTS) || ((VideoModeType) == DSI_VID_MODE_BURST))
   IS_DSI_VSYNC_POLARITY(VSYNC)=(((VSYNC) == DSI_VSYNC_ACTIVE_HIGH) || ((VSYNC) == DSI_VSYNC_ACTIVE_LOW))
   IS_DSI_VS_POLARITY(VSPolarity)=(((VSPolarity) == DSI_VSYNC_FALLING) || ((VSPolarity) == DSI_VSYNC_RISING))
   IS_ETH_PROMISCIOUS_MODE=IS_ETH_PROMISCUOUS_MODE
   IS_FLASH_ADDRESS(ADDRESS)=(((ADDRESS) >= FLASH_BASE) && ((ADDRESS) <= FLASH_END))
   IS_FLASH_BANK(BANK)=(((BANK) == FLASH_BANK_1) || ((BANK) == FLASH_BANK_2) || ((BANK) == FLASH_BANK_BOTH))
   IS_FLASH_LATENCY(LATENCY)=(((LATENCY) == FLASH_LATENCY_0) || ((LATENCY) == FLASH_LATENCY_1) || ((LATENCY) == FLASH_LATENCY_2) || ((LATENCY) == FLASH_LATENCY_3) || ((LATENCY) == FLASH_LATENCY_4) || ((LATENCY) == FLASH_LATENCY_5) || ((LATENCY) == FLASH_LATENCY_6) || ((LATENCY) == FLASH_LATENCY_7) || ((LATENCY) == FLASH_LATENCY_8) || ((LATENCY) == FLASH_LATENCY_9) || ((LATENCY) == FLASH_LATENCY_10) || ((LATENCY) == FLASH_LATENCY_11) || ((LATENCY) == FLASH_LATENCY_12) || ((LATENCY) == FLASH_LATENCY_13) || ((LATENCY) == FLASH_LATENCY_14) || ((LATENCY) == FLASH_LATENCY_15))
   IS_FLASH_NBSECTORS(NBSECTORS)=(((NBSECTORS) != 0) && ((NBSECTORS) <= FLASH_SECTOR_TOTAL))
   IS_FLASH_SECTOR(SECTOR)=( ((SECTOR) == FLASH_SECTOR_0) || ((SECTOR) == FLASH_SECTOR_1) || ((SECTOR) == FLASH_SECTOR_2) || ((SECTOR) == FLASH_SECTOR_3) || ((SECTOR) == FLASH_SECTOR_4) || ((SECTOR) == FLASH_SECTOR_5) || ((SECTOR) == FLASH_SECTOR_6) || ((SECTOR) == FLASH_SECTOR_7) || ((SECTOR) == FLASH_SECTOR_8) || ((SECTOR) == FLASH_SECTOR_9) || ((SECTOR) == FLASH_SECTOR_10) || ((SECTOR) == FLASH_SECTOR_11) || ((SECTOR) == FLASH_SECTOR_12) || ((SECTOR) == FLASH_SECTOR_13) || ((SECTOR) == FLASH_SECTOR_14) || ((SECTOR) == FLASH_SECTOR_15) || ((SECTOR) == FLASH_SECTOR_16) || ((SECTOR) == FLASH_SECTOR_17) || ((SECTOR) == FLASH_SECTOR_18) || ((SECTOR) == FLASH_SECTOR_19) || ((SECTOR) == FLASH_SECTOR_20) || ((SECTOR) == FLASH_SECTOR_21) || ((SECTOR) == FLASH_SECTOR_22) || ((SECTOR) == FLASH_SECTOR_23))
   IS_FLASH_TYPEERASE(VALUE)=(((VALUE) == FLASH_TYPEERASE_SECTORS) || ((VALUE) == FLASH_TYPEERASE_MASSERASE))
   IS_FLASH_TYPEPROGRAM(VALUE)=(((VALUE) == FLASH_TYPEPROGRAM_BYTE) || ((VALUE) == FLASH_TYPEPROGRAM_HALFWORD) || ((VALUE) == FLASH_TYPEPROGRAM_WORD) || ((VALUE) == FLASH_TYPEPROGRAM_DOUBLEWORD))
   IS_FMC_ACCESS_MODE(__MODE__)=(((__MODE__) == FMC_ACCESS_MODE_A) || ((__MODE__) == FMC_ACCESS_MODE_B) || ((__MODE__) == FMC_ACCESS_MODE_C) || ((__MODE__) == FMC_ACCESS_MODE_D))
   IS_FMC_ADDRESS_HOLD_TIME(__TIME__)=(((__TIME__) > 0) && ((__TIME__) <= 15))
   IS_FMC_ADDRESS_SETUP_TIME(__TIME__)=((__TIME__) <= 15)
   IS_FMC_ASYNWAIT(__STATE__)=(((__STATE__) == FMC_ASYNCHRONOUS_WAIT_DISABLE) || ((__STATE__) == FMC_ASYNCHRONOUS_WAIT_ENABLE))
   IS_FMC_AUTOREFRESH_NUMBER(NUMBER)=(((NUMBER) > 0) && ((NUMBER) <= 16))
   IS_FMC_BURSTMODE(__STATE__)=(((__STATE__) == FMC_BURST_ACCESS_MODE_DISABLE) || ((__STATE__) == FMC_BURST_ACCESS_MODE_ENABLE))
   IS_FMC_CAS_LATENCY(LATENCY)=(((LATENCY) == FMC_SDRAM_CAS_LATENCY_1) || ((LATENCY) == FMC_SDRAM_CAS_LATENCY_2) || ((LATENCY) == FMC_SDRAM_CAS_LATENCY_3))
   IS_FMC_CLK_DIV(DIV)=(((DIV) > 1) && ((DIV) <= 16))
   IS_FMC_COLUMNBITS_NUMBER(COLUMN)=(((COLUMN) == FMC_SDRAM_COLUMN_BITS_NUM_8) || ((COLUMN) == FMC_SDRAM_COLUMN_BITS_NUM_9) || ((COLUMN) == FMC_SDRAM_COLUMN_BITS_NUM_10) || ((COLUMN) == FMC_SDRAM_COLUMN_BITS_NUM_11))
   IS_FMC_COMMAND_MODE(COMMAND)=(((COMMAND) == FMC_SDRAM_CMD_NORMAL_MODE) || ((COMMAND) == FMC_SDRAM_CMD_CLK_ENABLE) || ((COMMAND) == FMC_SDRAM_CMD_PALL) || ((COMMAND) == FMC_SDRAM_CMD_AUTOREFRESH_MODE) || ((COMMAND) == FMC_SDRAM_CMD_LOAD_MODE) || ((COMMAND) == FMC_SDRAM_CMD_SELFREFRESH_MODE) || ((COMMAND) == FMC_SDRAM_CMD_POWERDOWN_MODE))
   IS_FMC_COMMAND_TARGET(TARGET)=(((TARGET) == FMC_SDRAM_CMD_TARGET_BANK1) || ((TARGET) == FMC_SDRAM_CMD_TARGET_BANK2) || ((TARGET) == FMC_SDRAM_CMD_TARGET_BANK1_2))
   IS_FMC_CONTINOUS_CLOCK(CCLOCK)=(((CCLOCK) == FMC_CONTINUOUS_CLOCK_SYNC_ONLY) || ((CCLOCK) == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC))
   IS_FMC_DATASETUP_TIME(__TIME__)=(((__TIME__) > 0) && ((__TIME__) <= 255))
   IS_FMC_DATA_LATENCY(__LATENCY__)=(((__LATENCY__) > 1) && ((__LATENCY__) <= 17))
   IS_FMC_ECCPAGE_SIZE(SIZE)=(((SIZE) == FMC_NAND_ECC_PAGE_SIZE_256BYTE) || ((SIZE) == FMC_NAND_ECC_PAGE_SIZE_512BYTE) || ((SIZE) == FMC_NAND_ECC_PAGE_SIZE_1024BYTE) || ((SIZE) == FMC_NAND_ECC_PAGE_SIZE_2048BYTE) || ((SIZE) == FMC_NAND_ECC_PAGE_SIZE_4096BYTE) || ((SIZE) == FMC_NAND_ECC_PAGE_SIZE_8192BYTE))
   IS_FMC_ECC_STATE(STATE)=(((STATE) == FMC_NAND_ECC_DISABLE) || ((STATE) == FMC_NAND_ECC_ENABLE))
   IS_FMC_EXITSELFREFRESH_DELAY(DELAY)=(((DELAY) > 0) && ((DELAY) <= 16))
   IS_FMC_EXTENDED_MODE(__MODE__)=(((__MODE__) == FMC_EXTENDED_MODE_DISABLE) || ((__MODE__) == FMC_EXTENDED_MODE_ENABLE))
   IS_FMC_HIZ_TIME(TIME)=((TIME) <= 255)
   IS_FMC_HOLD_TIME(TIME)=((TIME) <= 255)
   IS_FMC_INTERNALBANK_NUMBER(NUMBER)=(((NUMBER) == FMC_SDRAM_INTERN_BANKS_NUM_2) || ((NUMBER) == FMC_SDRAM_INTERN_BANKS_NUM_4))
   IS_FMC_LOADTOACTIVE_DELAY(DELAY)=(((DELAY) > 0) && ((DELAY) <= 16))
   IS_FMC_MEMORY(__MEMORY__)=(((__MEMORY__) == FMC_MEMORY_TYPE_SRAM) || ((__MEMORY__) == FMC_MEMORY_TYPE_PSRAM)|| ((__MEMORY__) == FMC_MEMORY_TYPE_NOR))
   IS_FMC_MODE_REGISTER(CONTENT)=((CONTENT) <= 8191)
   IS_FMC_MUX(__MUX__)=(((__MUX__) == FMC_DATA_ADDRESS_MUX_DISABLE) || ((__MUX__) == FMC_DATA_ADDRESS_MUX_ENABLE))
   IS_FMC_NAND_BANK(BANK)=(((BANK) == FMC_NAND_BANK2) || ((BANK) == FMC_NAND_BANK3))
   IS_FMC_NAND_DEVICE(__INSTANCE__)=((__INSTANCE__) == FMC_NAND_DEVICE)
   IS_FMC_NAND_MEMORY_WIDTH(WIDTH)=(((WIDTH) == FMC_NAND_PCC_MEM_BUS_WIDTH_8) || ((WIDTH) == FMC_NAND_PCC_MEM_BUS_WIDTH_16))
   IS_FMC_NORSRAM_BANK(BANK)=(((BANK) == FMC_NORSRAM_BANK1) || ((BANK) == FMC_NORSRAM_BANK2) || ((BANK) == FMC_NORSRAM_BANK3) || ((BANK) == FMC_NORSRAM_BANK4))
   IS_FMC_NORSRAM_DEVICE(__INSTANCE__)=((__INSTANCE__) == FMC_NORSRAM_DEVICE)
   IS_FMC_NORSRAM_EXTENDED_DEVICE(__INSTANCE__)=((__INSTANCE__) == FMC_NORSRAM_EXTENDED_DEVICE)
   IS_FMC_NORSRAM_MEMORY_WIDTH(__WIDTH__)=(((__WIDTH__) == FMC_NORSRAM_MEM_BUS_WIDTH_8) || ((__WIDTH__) == FMC_NORSRAM_MEM_BUS_WIDTH_16) || ((__WIDTH__) == FMC_NORSRAM_MEM_BUS_WIDTH_32))
   IS_FMC_PAGESIZE(SIZE)=(((SIZE) == FMC_PAGE_SIZE_NONE) || ((SIZE) == FMC_PAGE_SIZE_128) || ((SIZE) == FMC_PAGE_SIZE_256) || ((SIZE) == FMC_PAGE_SIZE_1024))
   IS_FMC_PCCARD_DEVICE(__INSTANCE__)=((__INSTANCE__) == FMC_PCCARD_DEVICE)
   IS_FMC_RCD_DELAY(DELAY)=(((DELAY) > 0) && ((DELAY) <= 16))
   IS_FMC_READPIPE_DELAY(DELAY)=(((DELAY) == FMC_SDRAM_RPIPE_DELAY_0) || ((DELAY) == FMC_SDRAM_RPIPE_DELAY_1) || ((DELAY) == FMC_SDRAM_RPIPE_DELAY_2))
   IS_FMC_READ_BURST(RBURST)=(((RBURST) == FMC_SDRAM_RBURST_DISABLE) || ((RBURST) == FMC_SDRAM_RBURST_ENABLE))
   IS_FMC_REFRESH_RATE(RATE)=((RATE) <= 8191)
   IS_FMC_ROWBITS_NUMBER(ROW)=(((ROW) == FMC_SDRAM_ROW_BITS_NUM_11) || ((ROW) == FMC_SDRAM_ROW_BITS_NUM_12) || ((ROW) == FMC_SDRAM_ROW_BITS_NUM_13))
   IS_FMC_ROWCYCLE_DELAY(DELAY)=(((DELAY) > 0) && ((DELAY) <= 16))
   IS_FMC_RP_DELAY(DELAY)=(((DELAY) > 0) && ((DELAY) <= 16))
   IS_FMC_SDCLOCK_PERIOD(PERIOD)=(((PERIOD) == FMC_SDRAM_CLOCK_DISABLE) || ((PERIOD) == FMC_SDRAM_CLOCK_PERIOD_2) || ((PERIOD) == FMC_SDRAM_CLOCK_PERIOD_3))
   IS_FMC_SDMEMORY_WIDTH(WIDTH)=(((WIDTH) == FMC_SDRAM_MEM_BUS_WIDTH_8) || ((WIDTH) == FMC_SDRAM_MEM_BUS_WIDTH_16) || ((WIDTH) == FMC_SDRAM_MEM_BUS_WIDTH_32))
   IS_FMC_SDRAM_BANK(BANK)=(((BANK) == FMC_SDRAM_BANK1) || ((BANK) == FMC_SDRAM_BANK2))
   IS_FMC_SDRAM_DEVICE(INSTANCE)=((INSTANCE) == FMC_SDRAM_DEVICE)
   IS_FMC_SELFREFRESH_TIME(TIME)=(((TIME) > 0) && ((TIME) <= 16))
   IS_FMC_SETUP_TIME(TIME)=((TIME) <= 255)
   IS_FMC_TAR_TIME(TIME)=((TIME) <= 255)
   IS_FMC_TCLR_TIME(TIME)=((TIME) <= 255)
   IS_FMC_TURNAROUND_TIME(__TIME__)=((__TIME__) <= 15)
   IS_FMC_WAITE_SIGNAL(__SIGNAL__)=(((__SIGNAL__) == FMC_WAIT_SIGNAL_DISABLE) || ((__SIGNAL__) == FMC_WAIT_SIGNAL_ENABLE))
   IS_FMC_WAIT_FEATURE(FEATURE)=(((FEATURE) == FMC_NAND_PCC_WAIT_FEATURE_DISABLE) || ((FEATURE) == FMC_NAND_PCC_WAIT_FEATURE_ENABLE))
   IS_FMC_WAIT_POLARITY(__POLARITY__)=(((__POLARITY__) == FMC_WAIT_SIGNAL_POLARITY_LOW) || ((__POLARITY__) == FMC_WAIT_SIGNAL_POLARITY_HIGH))
   IS_FMC_WAIT_SIGNAL_ACTIVE(__ACTIVE__)=(((__ACTIVE__) == FMC_WAIT_TIMING_BEFORE_WS) || ((__ACTIVE__) == FMC_WAIT_TIMING_DURING_WS))
   IS_FMC_WAIT_TIME(TIME)=((TIME) <= 255)
   IS_FMC_WRITE_BURST(__BURST__)=(((__BURST__) == FMC_WRITE_BURST_DISABLE) || ((__BURST__) == FMC_WRITE_BURST_ENABLE))
   IS_FMC_WRITE_FIFO(FIFO)=(((FIFO) == FMC_WRITE_FIFO_DISABLE) || ((FIFO) == FMC_WRITE_FIFO_ENABLE))
   IS_FMC_WRITE_OPERATION(__OPERATION__)=(((__OPERATION__) == FMC_WRITE_OPERATION_DISABLE) || ((__OPERATION__) == FMC_WRITE_OPERATION_ENABLE))
   IS_FMC_WRITE_PROTECTION(WRITE)=(((WRITE) == FMC_SDRAM_WRITE_PROTECTION_DISABLE) || ((WRITE) == FMC_SDRAM_WRITE_PROTECTION_ENABLE))
   IS_FMC_WRITE_RECOVERY_TIME(TIME)=(((TIME) > 0) && ((TIME) <= 16))
   IS_FUNCTIONAL_STATE(STATE)=(((STATE) == DISABLE) || ((STATE) == ENABLE))
   IS_GPIO_AF(AF)=(((AF) == GPIO_AF0_RTC_50Hz) || ((AF) == GPIO_AF9_TIM14) || ((AF) == GPIO_AF0_MCO) || ((AF) == GPIO_AF0_TAMPER) || ((AF) == GPIO_AF0_SWJ) || ((AF) == GPIO_AF0_TRACE) || ((AF) == GPIO_AF1_TIM1) || ((AF) == GPIO_AF1_TIM2) || ((AF) == GPIO_AF2_TIM3) || ((AF) == GPIO_AF2_TIM4) || ((AF) == GPIO_AF2_TIM5) || ((AF) == GPIO_AF3_TIM8) || ((AF) == GPIO_AF4_I2C1) || ((AF) == GPIO_AF4_I2C2) || ((AF) == GPIO_AF4_I2C3) || ((AF) == GPIO_AF5_SPI1) || ((AF) == GPIO_AF5_SPI2) || ((AF) == GPIO_AF9_TIM13) || ((AF) == GPIO_AF6_SPI3) || ((AF) == GPIO_AF9_TIM12) || ((AF) == GPIO_AF7_USART1) || ((AF) == GPIO_AF7_USART2) || ((AF) == GPIO_AF7_USART3) || ((AF) == GPIO_AF8_UART4) || ((AF) == GPIO_AF8_UART5) || ((AF) == GPIO_AF8_USART6) || ((AF) == GPIO_AF9_CAN1) || ((AF) == GPIO_AF9_CAN2) || ((AF) == GPIO_AF10_OTG_FS) || ((AF) == GPIO_AF10_OTG_HS) || ((AF) == GPIO_AF11_ETH) || ((AF) == GPIO_AF12_OTG_HS_FS) || ((AF) == GPIO_AF12_SDIO) || ((AF) == GPIO_AF13_DCMI) || ((AF) == GPIO_AF15_EVENTOUT) || ((AF) == GPIO_AF5_SPI4) || ((AF) == GPIO_AF5_SPI5) || ((AF) == GPIO_AF5_SPI6) || ((AF) == GPIO_AF8_UART7) || ((AF) == GPIO_AF8_UART8) || ((AF) == GPIO_AF12_FMC) || ((AF) == GPIO_AF6_SAI1) || ((AF) == GPIO_AF14_LTDC) || ((AF) == GPIO_AF13_DSI) || ((AF) == GPIO_AF9_QSPI) || ((AF) == GPIO_AF10_QSPI))
   IS_GPIO_ALL_INSTANCE(INSTANCE)=(((INSTANCE) == GPIOA) || ((INSTANCE) == GPIOB) || ((INSTANCE) == GPIOC) || ((INSTANCE) == GPIOD) || ((INSTANCE) == GPIOE) || ((INSTANCE) == GPIOF) || ((INSTANCE) == GPIOG) || ((INSTANCE) == GPIOH) || ((INSTANCE) == GPIOI) || ((INSTANCE) == GPIOJ) || ((INSTANCE) == GPIOK))
   IS_GPIO_MODE(MODE)=(((MODE) == GPIO_MODE_INPUT) || ((MODE) == GPIO_MODE_OUTPUT_PP) || ((MODE) == GPIO_MODE_OUTPUT_OD) || ((MODE) == GPIO_MODE_AF_PP) || ((MODE) == GPIO_MODE_AF_OD) || ((MODE) == GPIO_MODE_IT_RISING) || ((MODE) == GPIO_MODE_IT_FALLING) || ((MODE) == GPIO_MODE_IT_RISING_FALLING) || ((MODE) == GPIO_MODE_EVT_RISING) || ((MODE) == GPIO_MODE_EVT_FALLING) || ((MODE) == GPIO_MODE_EVT_RISING_FALLING) || ((MODE) == GPIO_MODE_ANALOG))
   IS_GPIO_PIN(PIN)=(((PIN) & GPIO_PIN_MASK ) != (uint32_t)0x00)
   IS_GPIO_PIN_ACTION(ACTION)=(((ACTION) == GPIO_PIN_RESET) || ((ACTION) == GPIO_PIN_SET))
   IS_GPIO_PULL(PULL)=(((PULL) == GPIO_NOPULL) || ((PULL) == GPIO_PULLUP) || ((PULL) == GPIO_PULLDOWN))
   IS_GPIO_SPEED(SPEED)=(((SPEED) == GPIO_SPEED_FREQ_LOW) || ((SPEED) == GPIO_SPEED_FREQ_MEDIUM) || ((SPEED) == GPIO_SPEED_FREQ_HIGH) || ((SPEED) == GPIO_SPEED_FREQ_VERY_HIGH))
   IS_HAL_REMAPDMA=IS_DMA_REMAP
   IS_I2C_ADDRESSING_MODE(ADDRESS)=(((ADDRESS) == I2C_ADDRESSINGMODE_7BIT) || ((ADDRESS) == I2C_ADDRESSINGMODE_10BIT))
   IS_I2C_ALL_INSTANCE(INSTANCE)=(((INSTANCE) == I2C1) || ((INSTANCE) == I2C2) || ((INSTANCE) == I2C3))
   IS_I2C_ANALOG_FILTER(FILTER)=(((FILTER) == I2C_ANALOGFILTER_ENABLE) || ((FILTER) == I2C_ANALOGFILTER_DISABLE))
   IS_I2C_CLOCK_SPEED(SPEED)=(((SPEED) > 0) && ((SPEED) <= 400000))
   IS_I2C_DIGITAL_FILTER(FILTER)=((FILTER) <= 0x0000000F)
   IS_I2C_DUAL_ADDRESS(ADDRESS)=(((ADDRESS) == I2C_DUALADDRESS_DISABLE) || ((ADDRESS) == I2C_DUALADDRESS_ENABLE))
   IS_I2C_DUTY_CYCLE(CYCLE)=(((CYCLE) == I2C_DUTYCYCLE_2) || ((CYCLE) == I2C_DUTYCYCLE_16_9))
   IS_I2C_GENERAL_CALL(CALL)=(((CALL) == I2C_GENERALCALL_DISABLE) || ((CALL) == I2C_GENERALCALL_ENABLE))
   IS_I2C_MEMADD_SIZE(SIZE)=(((SIZE) == I2C_MEMADD_SIZE_8BIT) || ((SIZE) == I2C_MEMADD_SIZE_16BIT))
   IS_I2C_NO_STRETCH(STRETCH)=(((STRETCH) == I2C_NOSTRETCH_DISABLE) || ((STRETCH) == I2C_NOSTRETCH_ENABLE))
   IS_I2C_OWN_ADDRESS1(ADDRESS1)=(((ADDRESS1) & (uint32_t)(0xFFFFFC00)) == 0)
   IS_I2C_OWN_ADDRESS2(ADDRESS2)=(((ADDRESS2) & (uint32_t)(0xFFFFFF01)) == 0)
   IS_I2S_ALL_INSTANCE(INSTANCE)=(((INSTANCE) == SPI2) || ((INSTANCE) == SPI3))
   IS_I2S_ALL_INSTANCE_EXT(PERIPH)=(((INSTANCE) == SPI2) || ((INSTANCE) == SPI3) || ((INSTANCE) == I2S2ext) || ((INSTANCE) == I2S3ext))
   IS_I2S_INSTANCE=IS_I2S_ALL_INSTANCE
   IS_I2S_INSTANCE_EXT=IS_I2S_ALL_INSTANCE_EXT
   IS_IRDA_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3) || ((INSTANCE) == UART4) || ((INSTANCE) == UART5) || ((INSTANCE) == USART6) || ((INSTANCE) == UART7) || ((INSTANCE) == UART8))
   IS_IRDA_ONEBIT_SAMPLE=IS_IRDA_ONE_BIT_SAMPLE
   IS_IWDG_ALL_INSTANCE(INSTANCE)=((INSTANCE) == IWDG)
   IS_LTDC_AAH(AAH)=((AAH) <= LTDC_VERTICALSYNC)
   IS_LTDC_AAW(AAW)=((AAW) <= LTDC_HORIZONTALSYNC)
   IS_LTDC_AHBP(AHBP)=((AHBP) <= LTDC_HORIZONTALSYNC)
   IS_LTDC_ALL_INSTANCE(INSTANCE)=((INSTANCE) == LTDC)
   IS_LTDC_ALPHA(ALPHA)=((ALPHA) <= LTDC_ALPHA)
   IS_LTDC_AVBP(AVBP)=((AVBP) <= LTDC_VERTICALSYNC)
   IS_LTDC_BLENDING_FACTOR1(BlendingFactor1)=(((BlendingFactor1) == LTDC_BLENDING_FACTOR1_CA) || ((BlendingFactor1) == LTDC_BLENDING_FACTOR1_PAxCA))
   IS_LTDC_BLENDING_FACTOR2(BlendingFactor2)=(((BlendingFactor2) == LTDC_BLENDING_FACTOR2_CA) || ((BlendingFactor2) == LTDC_BLENDING_FACTOR2_PAxCA))
   IS_LTDC_BLUEVALUE(BBLUE)=((BBLUE) <= LTDC_COLOR)
   IS_LTDC_CFBLL(CFBLL)=((CFBLL) <= LTDC_COLOR_FRAME_BUFFER)
   IS_LTDC_CFBLNBR(CFBLNBR)=((CFBLNBR) <= LTDC_LINE_NUMBER)
   IS_LTDC_CFBP(CFBP)=((CFBP) <= LTDC_COLOR_FRAME_BUFFER)
   IS_LTDC_DEPOL(DEPOL)=(((DEPOL) == LTDC_DEPOLARITY_AL) || ((DEPOL) == LTDC_DEPOLARITY_AH))
   IS_LTDC_GREENVALUE(BGREEN)=((BGREEN) <= LTDC_COLOR)
   IS_LTDC_HCONFIGSP(HCONFIGSP)=((HCONFIGSP) <= LTDC_STOPPOSITION)
   IS_LTDC_HCONFIGST(HCONFIGST)=((HCONFIGST) <= LTDC_STARTPOSITION)
   IS_LTDC_HSPOL(HSPOL)=(((HSPOL) == LTDC_HSPOLARITY_AL) || ((HSPOL) == LTDC_HSPOLARITY_AH))
   IS_LTDC_HSYNC(HSYNC)=((HSYNC) <= LTDC_HORIZONTALSYNC)
   IS_LTDC_LAYER(LAYER)=((LAYER) <= MAX_LAYER)
   IS_LTDC_LIPOS(LIPOS)=((LIPOS) <= 0x7FF)
   IS_LTDC_PCPOL(PCPOL)=(((PCPOL) == LTDC_PCPOLARITY_IPC) || ((PCPOL) == LTDC_PCPOLARITY_IIPC))
   IS_LTDC_PIXEL_FORMAT(Pixelformat)=(((Pixelformat) == LTDC_PIXEL_FORMAT_ARGB8888) || ((Pixelformat) == LTDC_PIXEL_FORMAT_RGB888) || ((Pixelformat) == LTDC_PIXEL_FORMAT_RGB565) || ((Pixelformat) == LTDC_PIXEL_FORMAT_ARGB1555) || ((Pixelformat) == LTDC_PIXEL_FORMAT_ARGB4444) || ((Pixelformat) == LTDC_PIXEL_FORMAT_L8) || ((Pixelformat) == LTDC_PIXEL_FORMAT_AL44) || ((Pixelformat) == LTDC_PIXEL_FORMAT_AL88))
   IS_LTDC_REDVALUE(BRED)=((BRED) <= LTDC_COLOR)
   IS_LTDC_TOTALH(TOTALH)=((TOTALH) <= LTDC_VERTICALSYNC)
   IS_LTDC_TOTALW(TOTALW)=((TOTALW) <= LTDC_HORIZONTALSYNC)
   IS_LTDC_VCONFIGSP(VCONFIGSP)=((VCONFIGSP) <= LTDC_STOPPOSITION)
   IS_LTDC_VCONFIGST(VCONFIGST)=((VCONFIGST) <= LTDC_STARTPOSITION)
   IS_LTDC_VSPOL(VSPOL)=(((VSPOL) == LTDC_VSPOLARITY_AL) || ((VSPOL) == LTDC_VSPOLARITY_AH))
   IS_LTDC_VSYNC(VSYNC)=((VSYNC) <= LTDC_VERTICALSYNC)
   IS_MPU_ACCESS_BUFFERABLE(STATE)=(((STATE) == MPU_ACCESS_BUFFERABLE) || ((STATE) == MPU_ACCESS_NOT_BUFFERABLE))
   IS_MPU_ACCESS_CACHEABLE(STATE)=(((STATE) == MPU_ACCESS_CACHEABLE) || ((STATE) == MPU_ACCESS_NOT_CACHEABLE))
   IS_MPU_ACCESS_SHAREABLE(STATE)=(((STATE) == MPU_ACCESS_SHAREABLE) || ((STATE) == MPU_ACCESS_NOT_SHAREABLE))
   IS_MPU_INSTRUCTION_ACCESS(STATE)=(((STATE) == MPU_INSTRUCTION_ACCESS_ENABLE) || ((STATE) == MPU_INSTRUCTION_ACCESS_DISABLE))
   IS_MPU_REGION_ENABLE(STATE)=(((STATE) == MPU_REGION_ENABLE) || ((STATE) == MPU_REGION_DISABLE))
   IS_MPU_REGION_NUMBER(NUMBER)=(((NUMBER) == MPU_REGION_NUMBER0) || ((NUMBER) == MPU_REGION_NUMBER1) || ((NUMBER) == MPU_REGION_NUMBER2) || ((NUMBER) == MPU_REGION_NUMBER3) || ((NUMBER) == MPU_REGION_NUMBER4) || ((NUMBER) == MPU_REGION_NUMBER5) || ((NUMBER) == MPU_REGION_NUMBER6) || ((NUMBER) == MPU_REGION_NUMBER7))
   IS_MPU_REGION_PERMISSION_ATTRIBUTE(TYPE)=(((TYPE) == MPU_REGION_NO_ACCESS) || ((TYPE) == MPU_REGION_PRIV_RW) || ((TYPE) == MPU_REGION_PRIV_RW_URO) || ((TYPE) == MPU_REGION_FULL_ACCESS) || ((TYPE) == MPU_REGION_PRIV_RO) || ((TYPE) == MPU_REGION_PRIV_RO_URO))
   IS_MPU_REGION_SIZE(SIZE)=(((SIZE) == MPU_REGION_SIZE_32B) || ((SIZE) == MPU_REGION_SIZE_64B) || ((SIZE) == MPU_REGION_SIZE_128B) || ((SIZE) == MPU_REGION_SIZE_256B) || ((SIZE) == MPU_REGION_SIZE_512B) || ((SIZE) == MPU_REGION_SIZE_1KB) || ((SIZE) == MPU_REGION_SIZE_2KB) || ((SIZE) == MPU_REGION_SIZE_4KB) || ((SIZE) == MPU_REGION_SIZE_8KB) || ((SIZE) == MPU_REGION_SIZE_16KB) || ((SIZE) == MPU_REGION_SIZE_32KB) || ((SIZE) == MPU_REGION_SIZE_64KB) || ((SIZE) == MPU_REGION_SIZE_128KB) || ((SIZE) == MPU_REGION_SIZE_256KB) || ((SIZE) == MPU_REGION_SIZE_512KB) || ((SIZE) == MPU_REGION_SIZE_1MB) || ((SIZE) == MPU_REGION_SIZE_2MB) || ((SIZE) == MPU_REGION_SIZE_4MB) || ((SIZE) == MPU_REGION_SIZE_8MB) || ((SIZE) == MPU_REGION_SIZE_16MB) || ((SIZE) == MPU_REGION_SIZE_32MB) || ((SIZE) == MPU_REGION_SIZE_64MB) || ((SIZE) == MPU_REGION_SIZE_128MB) || ((SIZE) == MPU_REGION_SIZE_256MB) || ((SIZE) == MPU_REGION_SIZE_512MB) || ((SIZE) == MPU_REGION_SIZE_1GB) || ((SIZE) == MPU_REGION_SIZE_2GB) || ((SIZE) == MPU_REGION_SIZE_4GB))
   IS_MPU_SUB_REGION_DISABLE(SUBREGION)=((SUBREGION) < (uint16_t)0x00FF)
   IS_MPU_TEX_LEVEL(TYPE)=(((TYPE) == MPU_TEX_LEVEL0) || ((TYPE) == MPU_TEX_LEVEL1) || ((TYPE) == MPU_TEX_LEVEL2))
   IS_NBSECTORS=IS_FLASH_NBSECTORS
   IS_NVIC_DEVICE_IRQ(IRQ)=((IRQ) >= 0x00)
   IS_NVIC_PREEMPTION_PRIORITY(PRIORITY)=((PRIORITY) < 0x10)
   IS_NVIC_PRIORITY_GROUP(GROUP)=(((GROUP) == NVIC_PRIORITYGROUP_0) || ((GROUP) == NVIC_PRIORITYGROUP_1) || ((GROUP) == NVIC_PRIORITYGROUP_2) || ((GROUP) == NVIC_PRIORITYGROUP_3) || ((GROUP) == NVIC_PRIORITYGROUP_4))
   IS_NVIC_SUB_PRIORITY(PRIORITY)=((PRIORITY) < 0x10)
   IS_OBEX(VALUE)=(((VALUE) == OPTIONBYTE_PCROP) || ((VALUE) == OPTIONBYTE_BOOTCONFIG))
   IS_OB_BOOT(BOOT)=(((BOOT) == OB_DUAL_BOOT_ENABLE) || ((BOOT) == OB_DUAL_BOOT_DISABLE))
   IS_OB_BOR_LEVEL(LEVEL)=(((LEVEL) == OB_BOR_LEVEL1) || ((LEVEL) == OB_BOR_LEVEL2) || ((LEVEL) == OB_BOR_LEVEL3) || ((LEVEL) == OB_BOR_OFF))
   IS_OB_IWDG_SOURCE(SOURCE)=(((SOURCE) == OB_IWDG_SW) || ((SOURCE) == OB_IWDG_HW))
   IS_OB_PCROP(SECTOR)=((((SECTOR) & (uint32_t)0xFFFFF000) == 0x00000000) && ((SECTOR) != 0x00000000))
   IS_OB_PCROP_SELECT(PCROP)=(((PCROP) == OB_PCROP_SELECTED) || ((PCROP) == OB_PCROP_DESELECTED))
   IS_OB_RDP_LEVEL(LEVEL)=(((LEVEL) == OB_RDP_LEVEL_0) || ((LEVEL) == OB_RDP_LEVEL_1) || ((LEVEL) == OB_RDP_LEVEL_2))
   IS_OB_SDADC12_VDD_MONITOR=IS_OB_SDACD_VDD_MONITOR
   IS_OB_STDBY_SOURCE(SOURCE)=(((SOURCE) == OB_STDBY_NO_RST) || ((SOURCE) == OB_STDBY_RST))
   IS_OB_STOP_SOURCE(SOURCE)=(((SOURCE) == OB_STOP_NO_RST) || ((SOURCE) == OB_STOP_RST))
   IS_OB_WDG_SOURCE=IS_OB_IWDG_SOURCE
   IS_OB_WRP_SECTOR(SECTOR)=((((SECTOR) & (uint32_t)0xFF000000) == 0x00000000) && ((SECTOR) != 0x00000000))
   IS_OPTIONBYTE(VALUE)=(((VALUE) <= (OPTIONBYTE_WRP|OPTIONBYTE_RDP|OPTIONBYTE_USER|OPTIONBYTE_BOR)))
   IS_PCROPSTATE(VALUE)=(((VALUE) == OB_PCROP_STATE_DISABLE) || ((VALUE) == OB_PCROP_STATE_ENABLE))
   IS_PWR_PVD_LEVEL(LEVEL)=(((LEVEL) == PWR_PVDLEVEL_0) || ((LEVEL) == PWR_PVDLEVEL_1)|| ((LEVEL) == PWR_PVDLEVEL_2) || ((LEVEL) == PWR_PVDLEVEL_3)|| ((LEVEL) == PWR_PVDLEVEL_4) || ((LEVEL) == PWR_PVDLEVEL_5)|| ((LEVEL) == PWR_PVDLEVEL_6) || ((LEVEL) == PWR_PVDLEVEL_7))
   IS_PWR_PVD_MODE(MODE)=(((MODE) == PWR_PVD_MODE_IT_RISING)|| ((MODE) == PWR_PVD_MODE_IT_FALLING) || ((MODE) == PWR_PVD_MODE_IT_RISING_FALLING) || ((MODE) == PWR_PVD_MODE_EVENT_RISING) || ((MODE) == PWR_PVD_MODE_EVENT_FALLING) || ((MODE) == PWR_PVD_MODE_EVENT_RISING_FALLING) || ((MODE) == PWR_PVD_MODE_NORMAL))
   IS_PWR_REGULATOR(REGULATOR)=(((REGULATOR) == PWR_MAINREGULATOR_ON) || ((REGULATOR) == PWR_LOWPOWERREGULATOR_ON))
   IS_PWR_REGULATOR_UNDERDRIVE(REGULATOR)=(((REGULATOR) == PWR_MAINREGULATOR_UNDERDRIVE_ON) || ((REGULATOR) == PWR_LOWPOWERREGULATOR_UNDERDRIVE_ON))
   IS_PWR_SLEEP_ENTRY(ENTRY)=(((ENTRY) == PWR_SLEEPENTRY_WFI) || ((ENTRY) == PWR_SLEEPENTRY_WFE))
   IS_PWR_STOP_ENTRY(ENTRY)=(((ENTRY) == PWR_STOPENTRY_WFI) || ((ENTRY) == PWR_STOPENTRY_WFE))
   IS_PWR_VOLTAGE_SCALING_RANGE(VOLTAGE)=(((VOLTAGE) == PWR_REGULATOR_VOLTAGE_SCALE1) || ((VOLTAGE) == PWR_REGULATOR_VOLTAGE_SCALE2) || ((VOLTAGE) == PWR_REGULATOR_VOLTAGE_SCALE3))
   IS_PWR_WAKEUP_PIN(PIN)=((PIN) == PWR_WAKEUP_PIN1)
   IS_QSPI_ADDRESS_MODE(MODE)=(((MODE) == QSPI_ADDRESS_NONE) || ((MODE) == QSPI_ADDRESS_1_LINE) || ((MODE) == QSPI_ADDRESS_2_LINES) || ((MODE) == QSPI_ADDRESS_4_LINES))
   IS_QSPI_ADDRESS_SIZE(ADDR_SIZE)=(((ADDR_SIZE) == QSPI_ADDRESS_8_BITS) || ((ADDR_SIZE) == QSPI_ADDRESS_16_BITS) || ((ADDR_SIZE) == QSPI_ADDRESS_24_BITS) || ((ADDR_SIZE) == QSPI_ADDRESS_32_BITS))
   IS_QSPI_ALL_INSTANCE(__INSTANCE__)=((__INSTANCE__) == QUADSPI)
   IS_QSPI_ALTERNATE_BYTES_MODE(MODE)=(((MODE) == QSPI_ALTERNATE_BYTES_NONE) || ((MODE) == QSPI_ALTERNATE_BYTES_1_LINE) || ((MODE) == QSPI_ALTERNATE_BYTES_2_LINES) || ((MODE) == QSPI_ALTERNATE_BYTES_4_LINES))
   IS_QSPI_ALTERNATE_BYTES_SIZE(SIZE)=(((SIZE) == QSPI_ALTERNATE_BYTES_8_BITS) || ((SIZE) == QSPI_ALTERNATE_BYTES_16_BITS) || ((SIZE) == QSPI_ALTERNATE_BYTES_24_BITS) || ((SIZE) == QSPI_ALTERNATE_BYTES_32_BITS))
   IS_QSPI_AUTOMATIC_STOP(APMS)=(((APMS) == QSPI_AUTOMATIC_STOP_DISABLE) || ((APMS) == QSPI_AUTOMATIC_STOP_ENABLE))
   IS_QSPI_CLOCK_MODE(CLKMODE)=(((CLKMODE) == QSPI_CLOCK_MODE_0) || ((CLKMODE) == QSPI_CLOCK_MODE_3))
   IS_QSPI_CLOCK_PRESCALER(PRESCALER)=((PRESCALER) <= 0xFF)
   IS_QSPI_CS_HIGH_TIME(CSHTIME)=(((CSHTIME) == QSPI_CS_HIGH_TIME_1_CYCLE) || ((CSHTIME) == QSPI_CS_HIGH_TIME_2_CYCLE) || ((CSHTIME) == QSPI_CS_HIGH_TIME_3_CYCLE) || ((CSHTIME) == QSPI_CS_HIGH_TIME_4_CYCLE) || ((CSHTIME) == QSPI_CS_HIGH_TIME_5_CYCLE) || ((CSHTIME) == QSPI_CS_HIGH_TIME_6_CYCLE) || ((CSHTIME) == QSPI_CS_HIGH_TIME_7_CYCLE) || ((CSHTIME) == QSPI_CS_HIGH_TIME_8_CYCLE))
   IS_QSPI_DATA_MODE(MODE)=(((MODE) == QSPI_DATA_NONE) || ((MODE) == QSPI_DATA_1_LINE) || ((MODE) == QSPI_DATA_2_LINES) || ((MODE) == QSPI_DATA_4_LINES))
   IS_QSPI_DDR_HHC(DDR_HHC)=(((DDR_HHC) == QSPI_DDR_HHC_ANALOG_DELAY) || ((DDR_HHC) == QSPI_DDR_HHC_HALF_CLK_DELAY))
   IS_QSPI_DDR_MODE(DDR_MODE)=(((DDR_MODE) == QSPI_DDR_MODE_DISABLE) || ((DDR_MODE) == QSPI_DDR_MODE_ENABLE))
   IS_QSPI_DUAL_FLASH_MODE(MODE)=(((MODE) == QSPI_DUALFLASH_ENABLE) || ((MODE) == QSPI_DUALFLASH_DISABLE))
   IS_QSPI_DUMMY_CYCLES(DCY)=((DCY) <= 31)
   IS_QSPI_FIFO_THRESHOLD(THR)=(((THR) > 0) && ((THR) <= 32))
   IS_QSPI_FLASH_ID(FLA)=(((FLA) == QSPI_FLASH_ID_1) || ((FLA) == QSPI_FLASH_ID_2))
   IS_QSPI_FLASH_SIZE(FSIZE)=(((FSIZE) <= 31))
   IS_QSPI_GET_FLAG(FLAG)=(((FLAG) == QSPI_FLAG_BUSY) || ((FLAG) == QSPI_FLAG_TO) || ((FLAG) == QSPI_FLAG_SM) || ((FLAG) == QSPI_FLAG_FT) || ((FLAG) == QSPI_FLAG_TC) || ((FLAG) == QSPI_FLAG_TE))
   IS_QSPI_INSTRUCTION(INSTRUCTION)=((INSTRUCTION) <= 0xFF)
   IS_QSPI_INSTRUCTION_MODE(MODE)=(((MODE) == QSPI_INSTRUCTION_NONE) || ((MODE) == QSPI_INSTRUCTION_1_LINE) || ((MODE) == QSPI_INSTRUCTION_2_LINES) || ((MODE) == QSPI_INSTRUCTION_4_LINES))
   IS_QSPI_INTERVAL(INTERVAL)=((INTERVAL) <= QUADSPI_PIR_INTERVAL)
   IS_QSPI_IT(IT)=((((IT) & (uint32_t)0xFFE0FFFF) == 0x00000000) && ((IT) != 0x00000000))
   IS_QSPI_MATCH_MODE(MODE)=(((MODE) == QSPI_MATCH_MODE_AND) || ((MODE) == QSPI_MATCH_MODE_OR))
   IS_QSPI_SIOO_MODE(SIOO_MODE)=(((SIOO_MODE) == QSPI_SIOO_INST_EVERY_CMD) || ((SIOO_MODE) == QSPI_SIOO_INST_ONLY_FIRST_CMD))
   IS_QSPI_SSHIFT(SSHIFT)=(((SSHIFT) == QSPI_SAMPLE_SHIFTING_NONE) || ((SSHIFT) == QSPI_SAMPLE_SHIFTING_HALFCYCLE))
   IS_QSPI_STATUS_BYTES_SIZE(SIZE)=(((SIZE) >= 1) && ((SIZE) <= 4))
   IS_QSPI_TIMEOUT_ACTIVATION(TCEN)=(((TCEN) == QSPI_TIMEOUT_COUNTER_DISABLE) || ((TCEN) == QSPI_TIMEOUT_COUNTER_ENABLE))
   IS_QSPI_TIMEOUT_PERIOD(PERIOD)=((PERIOD) <= 0xFFFF)
   IS_RCC_CALIBRATION_VALUE(VALUE)=((VALUE) <= 0x1F)
   IS_RCC_CK48CLKSOURCE(SOURCE)=(((SOURCE) == RCC_CK48CLKSOURCE_PLLQ) || ((SOURCE) == RCC_CK48CLKSOURCE_PLLSAIP))
   IS_RCC_CLOCKTYPE(CLK)=((1 <= (CLK)) && ((CLK) <= 15))
   IS_RCC_DSIBYTELANECLKSOURCE(SOURCE)=(((SOURCE) == RCC_DSICLKSOURCE_PLLR) || ((SOURCE) == RCC_DSICLKSOURCE_DSIPHY))
   IS_RCC_HCLK(HCLK)=(((HCLK) == RCC_SYSCLK_DIV1) || ((HCLK) == RCC_SYSCLK_DIV2) || ((HCLK) == RCC_SYSCLK_DIV4) || ((HCLK) == RCC_SYSCLK_DIV8) || ((HCLK) == RCC_SYSCLK_DIV16) || ((HCLK) == RCC_SYSCLK_DIV64) || ((HCLK) == RCC_SYSCLK_DIV128) || ((HCLK) == RCC_SYSCLK_DIV256) || ((HCLK) == RCC_SYSCLK_DIV512))
   IS_RCC_HCLK_DIV=IS_RCC_PCLK
   IS_RCC_HSE(HSE)=(((HSE) == RCC_HSE_OFF) || ((HSE) == RCC_HSE_ON) || ((HSE) == RCC_HSE_BYPASS))
   IS_RCC_HSI(HSI)=(((HSI) == RCC_HSI_OFF) || ((HSI) == RCC_HSI_ON))
   IS_RCC_LSE(LSE)=(((LSE) == RCC_LSE_OFF) || ((LSE) == RCC_LSE_ON) || ((LSE) == RCC_LSE_BYPASS))
   IS_RCC_LSE_MODE(MODE)=(((MODE) == RCC_LSE_LOWPOWER_MODE) || ((MODE) == RCC_LSE_HIGHDRIVE_MODE))
   IS_RCC_LSI(LSI)=(((LSI) == RCC_LSI_OFF) || ((LSI) == RCC_LSI_ON))
   IS_RCC_MCO(MCOx)=(((MCOx) == RCC_MCO1) || ((MCOx) == RCC_MCO2))
   IS_RCC_MCO1SOURCE(SOURCE)=(((SOURCE) == RCC_MCO1SOURCE_HSI) || ((SOURCE) == RCC_MCO1SOURCE_LSE) || ((SOURCE) == RCC_MCO1SOURCE_HSE) || ((SOURCE) == RCC_MCO1SOURCE_PLLCLK))
   IS_RCC_MCO2SOURCE(SOURCE)=(((SOURCE) == RCC_MCO2SOURCE_SYSCLK) || ((SOURCE) == RCC_MCO2SOURCE_PLLI2SCLK)|| ((SOURCE) == RCC_MCO2SOURCE_HSE) || ((SOURCE) == RCC_MCO2SOURCE_PLLCLK))
   IS_RCC_MCODIV(DIV)=(((DIV) == RCC_MCODIV_1) || ((DIV) == RCC_MCODIV_2) || ((DIV) == RCC_MCODIV_3) || ((DIV) == RCC_MCODIV_4) || ((DIV) == RCC_MCODIV_5))
   IS_RCC_MCOSOURCE=IS_RCC_MCO1SOURCE
   IS_RCC_MSIRANGE=IS_RCC_MSI_CLOCK_RANGE
   IS_RCC_OSCILLATORTYPE(OSCILLATOR)=((OSCILLATOR) <= 15)
   IS_RCC_PCLK(PCLK)=(((PCLK) == RCC_HCLK_DIV1) || ((PCLK) == RCC_HCLK_DIV2) || ((PCLK) == RCC_HCLK_DIV4) || ((PCLK) == RCC_HCLK_DIV8) || ((PCLK) == RCC_HCLK_DIV16))
   IS_RCC_PERIPHCLOCK(SELECTION)=((1 <= (SELECTION)) && ((SELECTION) <= 0x000001FF))
   IS_RCC_PLL(PLL)=(((PLL) == RCC_PLL_NONE) ||((PLL) == RCC_PLL_OFF) || ((PLL) == RCC_PLL_ON))
   IS_RCC_PLLI2SN_VALUE(VALUE)=((192 <= (VALUE)) && ((VALUE) <= 432))
   IS_RCC_PLLI2SQ_VALUE(VALUE)=((2 <= (VALUE)) && ((VALUE) <= 15))
   IS_RCC_PLLI2SR_VALUE(VALUE)=((2 <= (VALUE)) && ((VALUE) <= 7))
   IS_RCC_PLLI2S_DIVQ_VALUE(VALUE)=((1 <= (VALUE)) && ((VALUE) <= 32))
   IS_RCC_PLLM_VALUE(VALUE)=((VALUE) <= 63)
   IS_RCC_PLLN_VALUE(VALUE)=((192 <= (VALUE)) && ((VALUE) <= 432))
   IS_RCC_PLLP_VALUE(VALUE)=(((VALUE) == 2) || ((VALUE) == 4) || ((VALUE) == 6) || ((VALUE) == 8))
   IS_RCC_PLLQ_VALUE(VALUE)=((4 <= (VALUE)) && ((VALUE) <= 15))
   IS_RCC_PLLR_VALUE(VALUE)=((2 <= (VALUE)) && ((VALUE) <= 7))
   IS_RCC_PLLSAIN_VALUE(VALUE)=((49 <= (VALUE)) && ((VALUE) <= 432))
   IS_RCC_PLLSAIP_VALUE(VALUE)=(((VALUE) == RCC_PLLSAIP_DIV2) || ((VALUE) == RCC_PLLSAIP_DIV4) || ((VALUE) == RCC_PLLSAIP_DIV6) || ((VALUE) == RCC_PLLSAIP_DIV8))
   IS_RCC_PLLSAIQ_VALUE(VALUE)=((2 <= (VALUE)) && ((VALUE) <= 15))
   IS_RCC_PLLSAIR_VALUE(VALUE)=((2 <= (VALUE)) && ((VALUE) <= 7))
   IS_RCC_PLLSAI_DIVQ_VALUE(VALUE)=((1 <= (VALUE)) && ((VALUE) <= 32))
   IS_RCC_PLLSAI_DIVR_VALUE(VALUE)=(((VALUE) == RCC_PLLSAIDIVR_2) || ((VALUE) == RCC_PLLSAIDIVR_4) || ((VALUE) == RCC_PLLSAIDIVR_8) || ((VALUE) == RCC_PLLSAIDIVR_16))
   IS_RCC_PLLSOURCE(SOURCE)=(((SOURCE) == RCC_PLLSOURCE_HSI) || ((SOURCE) == RCC_PLLSOURCE_HSE))
   IS_RCC_RTCCLK_SOURCE=IS_RCC_RTCCLKSOURCE
   IS_RCC_SDIOCLKSOURCE(SOURCE)=(((SOURCE) == RCC_SDIOCLKSOURCE_CK48) || ((SOURCE) == RCC_SDIOCLKSOURCE_SYSCLK))
   IS_RCC_SYSCLKSOURCE(SOURCE)=(((SOURCE) == RCC_SYSCLKSOURCE_HSI) || ((SOURCE) == RCC_SYSCLKSOURCE_HSE) || ((SOURCE) == RCC_SYSCLKSOURCE_PLLCLK) || ((SOURCE) == RCC_SYSCLKSOURCE_PLLRCLK))
   IS_RCC_SYSCLK_DIV=IS_RCC_HCLK
   IS_RNG_ALL_INSTANCE(INSTANCE)=((INSTANCE) == RNG)
   IS_RTC_ALL_INSTANCE(INSTANCE)=((INSTANCE) == RTC)
   IS_SAI_BLOCK_MONO_STREO_MODE=IS_SAI_BLOCK_MONO_STEREO_MODE
   IS_SAI_BLOCK_PERIPH(PERIPH)=(((PERIPH) == SAI1_Block_A) || ((PERIPH) == SAI1_Block_B))
   IS_SDIO_ALL_INSTANCE(INSTANCE)=((INSTANCE) == SDIO)
   IS_SMARTCARD_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3) || ((INSTANCE) == USART6))
   IS_SMARTCARD_ONEBIT_SAMPLING=IS_SMARTCARD_ONE_BIT_SAMPLE
   IS_SPI_ALL_INSTANCE(INSTANCE)=(((INSTANCE) == SPI1) || ((INSTANCE) == SPI2) || ((INSTANCE) == SPI3) || ((INSTANCE) == SPI4) || ((INSTANCE) == SPI5) || ((INSTANCE) == SPI6))
   IS_SPI_ALL_INSTANCE_EXT(INSTANCE)=(((INSTANCE) == SPI1) || ((INSTANCE) == SPI2) || ((INSTANCE) == SPI3) || ((INSTANCE) == SPI4) || ((INSTANCE) == SPI5) || ((INSTANCE) == SPI6) || ((INSTANCE) == I2S2ext) || ((INSTANCE) == I2S3ext))
   IS_SYSCFG_FASTMODEPLUS_CONFIG=IS_I2C_FASTMODEPLUS
   IS_SYSTICK_CLK_SOURCE(SOURCE)=(((SOURCE) == SYSTICK_CLKSOURCE_HCLK) || ((SOURCE) == SYSTICK_CLKSOURCE_HCLK_DIV8))
   IS_TAMPER=IS_RTC_TAMPER
   IS_TAMPER_ERASE_MODE=IS_RTC_TAMPER_ERASE_MODE
   IS_TAMPER_FILTER=IS_RTC_TAMPER_FILTER
   IS_TAMPER_INTERRUPT=IS_RTC_TAMPER_INTERRUPT
   IS_TAMPER_MASKFLAG_STATE=IS_RTC_TAMPER_MASKFLAG_STATE
   IS_TAMPER_PRECHARGE_DURATION=IS_RTC_TAMPER_PRECHARGE_DURATION
   IS_TAMPER_PULLUP_STATE=IS_RTC_TAMPER_PULLUP_STATE
   IS_TAMPER_SAMPLING_FREQ=IS_RTC_TAMPER_SAMPLING_FREQ
   IS_TAMPER_TIMESTAMPONTAMPER_DETECTION=IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION
   IS_TAMPER_TRIGGER=IS_RTC_TAMPER_TRIGGER
   IS_TIM_32B_COUNTER_INSTANCE(INSTANCE)=(((INSTANCE) == TIM2) || ((INSTANCE) == TIM5))
   IS_TIM_ADVANCED_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM8))
   IS_TIM_CC1_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM9) || ((INSTANCE) == TIM10) || ((INSTANCE) == TIM11) || ((INSTANCE) == TIM12) || ((INSTANCE) == TIM13) || ((INSTANCE) == TIM14))
   IS_TIM_CC2_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM9) || ((INSTANCE) == TIM12))
   IS_TIM_CC3_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM8))
   IS_TIM_CC4_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM8))
   IS_TIM_CCDMA_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM8))
   IS_TIM_CCXN_INSTANCE(INSTANCE,CHANNEL)=((((INSTANCE) == TIM1) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3))) || (((INSTANCE) == TIM8) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3))))
   IS_TIM_CCX_INSTANCE(INSTANCE,CHANNEL)=((((INSTANCE) == TIM1) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM2) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM3) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM4) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM5) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM8) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM9) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2))) || (((INSTANCE) == TIM10) && (((CHANNEL) == TIM_CHANNEL_1))) || (((INSTANCE) == TIM11) && (((CHANNEL) == TIM_CHANNEL_1))) || (((INSTANCE) == TIM12) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2))) || (((INSTANCE) == TIM13) && (((CHANNEL) == TIM_CHANNEL_1))) || (((INSTANCE) == TIM14) && (((CHANNEL) == TIM_CHANNEL_1))))
   IS_TIM_DMABURST_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM8))
   IS_TIM_DMA_CC_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM8))
   IS_TIM_DMA_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM6) || ((INSTANCE) == TIM7) || ((INSTANCE) == TIM8))
   IS_TIM_ETR_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM8))
   IS_TIM_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM6) || ((INSTANCE) == TIM7) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM9) || ((INSTANCE) == TIM10) || ((INSTANCE) == TIM11) || ((INSTANCE) == TIM12) || ((INSTANCE) == TIM13) || ((INSTANCE) == TIM14))
   IS_TIM_INTERNAL_TRIGGER_SELECTION(SELECTION)=(((SELECTION) == TIM_TS_ITR0) || ((SELECTION) == TIM_TS_ITR1) || ((SELECTION) == TIM_TS_ITR2) || ((SELECTION) == TIM_TS_ITR3))
   IS_TIM_MASTER_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM6) || ((INSTANCE) == TIM7) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM9) || ((INSTANCE) == TIM12))
   IS_TIM_OUTPUTN_STATE(STATE)=(((STATE) == TIM_OUTPUTNSTATE_DISABLE) || ((STATE) == TIM_OUTPUTNSTATE_ENABLE))
   IS_TIM_OUTPUT_STATE(STATE)=(((STATE) == TIM_OUTPUTSTATE_DISABLE) || ((STATE) == TIM_OUTPUTSTATE_ENABLE))
   IS_TIM_PWMI_CHANNELS(CHANNEL)=(((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2))
   IS_TIM_REMAP_INSTANCE(INSTANCE)=(((INSTANCE) == TIM2) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM11))
   IS_TIM_SLAVE_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM9) || ((INSTANCE) == TIM12))
   IS_TIM_XOR_INSTANCE(INSTANCE)=(((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM5) || ((INSTANCE) == TIM8))
   IS_TYPEERASE=IS_FLASH_TYPEERASE
   IS_TYPEPROGRAM=IS_FLASH_TYPEPROGRAM
   IS_TYPEPROGRAMFLASH=IS_FLASH_TYPEPROGRAM
   IS_UART_ADDRESS(ADDRESS)=((ADDRESS) <= 0xF)
   IS_UART_BAUDRATE(BAUDRATE)=((BAUDRATE) < 10500001)
   IS_UART_HARDWARE_FLOW_CONTROL(CONTROL)=(((CONTROL) == UART_HWCONTROL_NONE) || ((CONTROL) == UART_HWCONTROL_RTS) || ((CONTROL) == UART_HWCONTROL_CTS) || ((CONTROL) == UART_HWCONTROL_RTS_CTS))
   IS_UART_HWFLOW_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3) || ((INSTANCE) == USART6))
   IS_UART_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3) || ((INSTANCE) == UART4) || ((INSTANCE) == UART5) || ((INSTANCE) == USART6) || ((INSTANCE) == UART7) || ((INSTANCE) == UART8))
   IS_UART_LIN_BREAK_DETECT_LENGTH(LENGTH)=(((LENGTH) == UART_LINBREAKDETECTLENGTH_10B) || ((LENGTH) == UART_LINBREAKDETECTLENGTH_11B))
   IS_UART_LIN_OVERSAMPLING(SAMPLING)=(((SAMPLING) == UART_OVERSAMPLING_16))
   IS_UART_LIN_WORD_LENGTH(LENGTH)=(((LENGTH) == UART_WORDLENGTH_8B))
   IS_UART_MODE(MODE)=((((MODE) & (uint32_t)0x0000FFF3) == 0x00) && ((MODE) != (uint32_t)0x000000))
   IS_UART_ONEBIT_SAMPLE=IS_UART_ONE_BIT_SAMPLE
   IS_UART_ONEBIT_SAMPLING=IS_UART_ONE_BIT_SAMPLE
   IS_UART_OVERSAMPLING(SAMPLING)=(((SAMPLING) == UART_OVERSAMPLING_16) || ((SAMPLING) == UART_OVERSAMPLING_8))
   IS_UART_PARITY(PARITY)=(((PARITY) == UART_PARITY_NONE) || ((PARITY) == UART_PARITY_EVEN) || ((PARITY) == UART_PARITY_ODD))
   IS_UART_STATE(STATE)=(((STATE) == UART_STATE_DISABLE) || ((STATE) == UART_STATE_ENABLE))
   IS_UART_STOPBITS(STOPBITS)=(((STOPBITS) == UART_STOPBITS_1) || ((STOPBITS) == UART_STOPBITS_2))
   IS_UART_WAKEUPMETHOD(WAKEUP)=(((WAKEUP) == UART_WAKEUPMETHOD_IDLELINE) || ((WAKEUP) == UART_WAKEUPMETHOD_ADDRESSMARK))
   IS_UART_WAKEUPMETHODE=IS_UART_WAKEUPMETHOD
   IS_UART_WORD_LENGTH(LENGTH)=(((LENGTH) == UART_WORDLENGTH_8B) || ((LENGTH) == UART_WORDLENGTH_9B))
   IS_USART_INSTANCE(INSTANCE)=(((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3) || ((INSTANCE) == USART6))
   IS_VOLTAGERANGE(RANGE)=(((RANGE) == FLASH_VOLTAGE_RANGE_1) || ((RANGE) == FLASH_VOLTAGE_RANGE_2) || ((RANGE) == FLASH_VOLTAGE_RANGE_3) || ((RANGE) == FLASH_VOLTAGE_RANGE_4))
   IS_WAKEUP_CLOCK=IS_RTC_WAKEUP_CLOCK
   IS_WAKEUP_COUNTER=IS_RTC_WAKEUP_COUNTER
   IS_WRPAREA=IS_OB_WRPAREA
   IS_WRPSTATE(VALUE)=(((VALUE) == OB_WRPSTATE_DISABLE) || ((VALUE) == OB_WRPSTATE_ENABLE))
   IS_WWDG_ALL_INSTANCE(INSTANCE)=((INSTANCE) == WWDG)
   ITM=((ITM_Type *) ITM_BASE )
   ITM_BASE=(0xE0000000UL)
   ITM_IMCR_INTEGRATION_Msk=(1UL )
   ITM_IMCR_INTEGRATION_Pos=0
   ITM_IRR_ATREADYM_Msk=(1UL )
   ITM_IRR_ATREADYM_Pos=0
   ITM_IWR_ATVALIDM_Msk=(1UL )
   ITM_IWR_ATVALIDM_Pos=0
   ITM_LSR_Access_Msk=(1UL << ITM_LSR_Access_Pos)
   ITM_LSR_Access_Pos=1
   ITM_LSR_ByteAcc_Msk=(1UL << ITM_LSR_ByteAcc_Pos)
   ITM_LSR_ByteAcc_Pos=2
   ITM_LSR_Present_Msk=(1UL )
   ITM_LSR_Present_Pos=0
   ITM_RXBUFFER_EMPTY=0x5AA55AA5
   ITM_TCR_BUSY_Msk=(1UL << ITM_TCR_BUSY_Pos)
   ITM_TCR_BUSY_Pos=23
   ITM_TCR_DWTENA_Msk=(1UL << ITM_TCR_DWTENA_Pos)
   ITM_TCR_DWTENA_Pos=3
   ITM_TCR_GTSFREQ_Msk=(3UL << ITM_TCR_GTSFREQ_Pos)
   ITM_TCR_GTSFREQ_Pos=10
   ITM_TCR_ITMENA_Msk=(1UL )
   ITM_TCR_ITMENA_Pos=0
   ITM_TCR_SWOENA_Msk=(1UL << ITM_TCR_SWOENA_Pos)
   ITM_TCR_SWOENA_Pos=4
   ITM_TCR_SYNCENA_Msk=(1UL << ITM_TCR_SYNCENA_Pos)
   ITM_TCR_SYNCENA_Pos=2
   ITM_TCR_TraceBusID_Msk=(0x7FUL << ITM_TCR_TraceBusID_Pos)
   ITM_TCR_TraceBusID_Pos=16
   ITM_TCR_TSENA_Msk=(1UL << ITM_TCR_TSENA_Pos)
   ITM_TCR_TSENA_Pos=1
   ITM_TCR_TSPrescale_Msk=(3UL << ITM_TCR_TSPrescale_Pos)
   ITM_TCR_TSPrescale_Pos=8
   ITM_TPR_PRIVMASK_Msk=(0xFUL )
   ITM_TPR_PRIVMASK_Pos=0
   IWDG=((IWDG_TypeDef *) IWDG_BASE)
   IWDG_BASE=(APB1PERIPH_BASE + 0x3000)
   IWDG_KR_KEY=((uint32_t)0xFFFF)
   IWDG_PR_PR=((uint32_t)0x07)
   IWDG_PR_PR_0=((uint32_t)0x01)
   IWDG_PR_PR_1=((uint32_t)0x02)
   IWDG_PR_PR_2=((uint32_t)0x04)
   IWDG_RLR_RL=((uint32_t)0x0FFF)
   IWDG_SR_PVU=((uint32_t)0x01)
   IWDG_SR_RVU=((uint32_t)0x02)
   IWDG_STDBY_ACTIVE=OB_IWDG_STDBY_RUN
   IWDG_STDBY_FREEZE=OB_IWDG_STDBY_FREEZE
   IWDG_STOP_ACTIVE=OB_IWDG_STOP_RUN
   IWDG_STOP_FREEZE=OB_IWDG_STOP_FREEZE
   JOYSTICK_BASE_HPP=
   JOYSTICK_HPP=
   JQOVF_EVENT=ADC_JQOVF_EVENT
   JSMOCHELPER_HPP=
   JUMBO_FRAME_PAYLOAD=ETH_JUMBO_FRAME_PAYLOAD
   KEEP=
   KEYSAMPLER_HPP=
   KR_KEY_DWA=IWDG_KEY_WRITE_ACCESS_DISABLE
   KR_KEY_ENABLE=IWDG_KEY_ENABLE
   KR_KEY_EWA=IWDG_KEY_WRITE_ACCESS_ENABLE
   KR_KEY_RELOAD=IWDG_KEY_RELOAD
   LCD16BPP_HPP=
   LCD24BPP_HPP=
   LCD_COLOR_BLACK=((uint32_t) 0xFF000000)
   LCD_COLOR_BLUE=((uint32_t) 0xFF0000FF)
   LCD_COLOR_BROWN=((uint32_t) 0xFFA52A2A)
   LCD_COLOR_CYAN=((uint32_t) 0xFF00FFFF)
   LCD_COLOR_DARKBLUE=((uint32_t) 0xFF000080)
   LCD_COLOR_DARKCYAN=((uint32_t) 0xFF008080)
   LCD_COLOR_DARKGRAY=((uint32_t) 0xFF404040)
   LCD_COLOR_DARKGREEN=((uint32_t) 0xFF008000)
   LCD_COLOR_DARKMAGENTA=((uint32_t) 0xFF800080)
   LCD_COLOR_DARKRED=((uint32_t) 0xFF800000)
   LCD_COLOR_DARKYELLOW=((uint32_t) 0xFF808000)
   LCD_COLOR_GRAY=((uint32_t) 0xFF808080)
   LCD_COLOR_GREEN=((uint32_t) 0xFF00FF00)
   LCD_COLOR_LIGHTBLUE=((uint32_t) 0xFF8080FF)
   LCD_COLOR_LIGHTCYAN=((uint32_t) 0xFF80FFFF)
   LCD_COLOR_LIGHTGRAY=((uint32_t) 0xFFD3D3D3)
   LCD_COLOR_LIGHTGREEN=((uint32_t) 0xFF80FF80)
   LCD_COLOR_LIGHTMAGENTA=((uint32_t) 0xFFFF80FF)
   LCD_COLOR_LIGHTRED=((uint32_t) 0xFFFF8080)
   LCD_COLOR_LIGHTYELLOW=((uint32_t) 0xFFFFFF80)
   LCD_COLOR_MAGENTA=((uint32_t) 0xFFFF00FF)
   LCD_COLOR_ORANGE=((uint32_t) 0xFFFFA500)
   LCD_COLOR_RED=((uint32_t) 0xFFFF0000)
   LCD_COLOR_TRANSPARENT=((uint32_t) 0xFF000000)
   LCD_COLOR_WHITE=((uint32_t) 0xFFFFFFFF)
   LCD_COLOR_YELLOW=((uint32_t) 0xFFFFFF00)
   LCD_DEFAULT_FONT=Font24
   LCD_ERROR=0x01
   LCD_FB_START_ADDRESS=((uint32_t)0xC0000000)
   LCD_HPP=
   LCD_LayerCfgTypeDef=LTDC_LayerCfgTypeDef
   LCD_OK=0x00
   LCD_OTM8009A_ID=((uint32_t) 0)
   LCD_TIMEOUT=0x02
   LED1_GPIO_CLK_DISABLE()=__HAL_RCC_GPIOG_CLK_DISABLE()
   LED1_GPIO_CLK_ENABLE()=__HAL_RCC_GPIOG_CLK_ENABLE()
   LED1_GPIO_PORT=((GPIO_TypeDef*)GPIOG)
   LED1_PIN=((uint32_t)GPIO_PIN_6)
   LED2_GPIO_CLK_DISABLE()=__HAL_RCC_GPIOD_CLK_DISABLE()
   LED2_GPIO_CLK_ENABLE()=__HAL_RCC_GPIOD_CLK_ENABLE()
   LED2_GPIO_PORT=((GPIO_TypeDef*)GPIOD)
   LED2_PIN=((uint32_t)GPIO_PIN_4)
   LED3_GPIO_CLK_DISABLE()=__HAL_RCC_GPIOD_CLK_DISABLE()
   LED3_GPIO_CLK_ENABLE()=__HAL_RCC_GPIOD_CLK_ENABLE()
   LED3_GPIO_PORT=((GPIO_TypeDef*)GPIOD)
   LED3_PIN=((uint32_t)GPIO_PIN_5)
   LED4_GPIO_CLK_DISABLE()=__HAL_RCC_GPIOK_CLK_DISABLE()
   LED4_GPIO_CLK_ENABLE()=__HAL_RCC_GPIOK_CLK_ENABLE()
   LED4_GPIO_PORT=((GPIO_TypeDef*)GPIOK)
   LED4_PIN=((uint32_t)GPIO_PIN_3)
   LEDn=((uint8_t)4)
   LINE_WATERMARK=DMA2D_LWR_LW
   LITTLE_ENDIAN=_LITTLE_ENDIAN
   LOCATION_EXTFLASH_ATTRIBUTE=__attribute__ ((section ("ExtFlashSection"))) __attribute__ ((aligned(4)))
   LOCATION_EXTFLASH_PRAGMA=
   long=+4
   LPLVDS_BitNumber=LPLVDS_BIT_NUMBER
   LPLVDS_BIT_NUMBER=POSITION_VAL(PWR_CR_LPLVDS)
   LPTIM_CLOCKPOLARITY_BOTHEDGES=LPTIM_CLOCKPOLARITY_RISING_FALLING
   LPTIM_CLOCKPOLARITY_FALLINGEDGE=LPTIM_CLOCKPOLARITY_FALLING
   LPTIM_CLOCKPOLARITY_RISINGEDGE=LPTIM_CLOCKPOLARITY_RISING
   LPTIM_CLOCKSAMPLETIME_2TRANSISTIONS=LPTIM_CLOCKSAMPLETIME_2TRANSITIONS
   LPTIM_CLOCKSAMPLETIME_4TRANSISTIONS=LPTIM_CLOCKSAMPLETIME_4TRANSITIONS
   LPTIM_CLOCKSAMPLETIME_8TRANSISTIONS=LPTIM_CLOCKSAMPLETIME_8TRANSITIONS
   LPTIM_CLOCKSAMPLETIME_DIRECTTRANSISTION=LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION
   LPTIM_TRIGSAMPLETIME_2TRANSISTIONS=LPTIM_TRIGSAMPLETIME_2TRANSITIONS
   LPTIM_TRIGSAMPLETIME_2TRANSITION=LPTIM_TRIGSAMPLETIME_2TRANSITIONS
   LPTIM_TRIGSAMPLETIME_4TRANSISTIONS=LPTIM_TRIGSAMPLETIME_4TRANSITIONS
   LPTIM_TRIGSAMPLETIME_4TRANSITION=LPTIM_TRIGSAMPLETIME_4TRANSITIONS
   LPTIM_TRIGSAMPLETIME_8TRANSISTIONS=LPTIM_TRIGSAMPLETIME_8TRANSITIONS
   LPTIM_TRIGSAMPLETIME_8TRANSITION=LPTIM_TRIGSAMPLETIME_8TRANSITIONS
   LPTIM_TRIGSAMPLETIME_DIRECTTRANSISTION=LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION
   LSEBYP_BITNUMBER=RCC_LSEBYP_BIT_NUMBER
   LSEON_BitNumber=RCC_LSEON_BIT_NUMBER
   LSE_TIMEOUT_VALUE=RCC_LSE_TIMEOUT_VALUE
   LSE_VALUE=((uint32_t)32768)
   LSION_BitNumber=RCC_LSION_BIT_NUMBER
   LSI_TIMEOUT_VALUE=((uint32_t)100)
   LSI_VALUE=((uint32_t)32000)
   LTDC=((LTDC_TypeDef *)LTDC_BASE)
   LTDC_ACTIVE_LAYER_BACKGROUND=((uint32_t) 0)
   LTDC_ACTIVE_LAYER_FOREGROUND=((uint32_t) 1)
   LTDC_ALPHA=LTDC_LxCACR_CONSTA
   LTDC_AWCR_AAH=((uint32_t)0x000007FF)
   LTDC_AWCR_AAW=((uint32_t)0x0FFF0000)
   LTDC_BASE=(APB2PERIPH_BASE + 0x6800)
   LTDC_BCCR_BCBLUE=((uint32_t)0x000000FF)
   LTDC_BCCR_BCGREEN=((uint32_t)0x0000FF00)
   LTDC_BCCR_BCRED=((uint32_t)0x00FF0000)
   LTDC_BLENDING_FACTOR1_CA=((uint32_t)0x00000400)
   LTDC_BLENDING_FACTOR1_PAxCA=((uint32_t)0x00000600)
   LTDC_BLENDING_FACTOR2_CA=((uint32_t)0x00000005)
   LTDC_BLENDING_FACTOR2_PAxCA=((uint32_t)0x00000007)
   LTDC_BPCR_AHBP=((uint32_t)0x0FFF0000)
   LTDC_BPCR_AVBP=((uint32_t)0x000007FF)
   LTDC_CDSR_HDES=((uint32_t)0x00000002)
   LTDC_CDSR_HSYNCS=((uint32_t)0x00000008)
   LTDC_CDSR_VDES=((uint32_t)0x00000001)
   LTDC_CDSR_VSYNCS=((uint32_t)0x00000004)
   LTDC_COLOR=((uint32_t)0x000000FF)
   LTDC_COLOR_FRAME_BUFFER=LTDC_LxCFBLR_CFBLL
   LTDC_CPSR_CXPOS=((uint32_t)0xFFFF0000)
   LTDC_CPSR_CYPOS=((uint32_t)0x0000FFFF)
   LTDC_DEFAULT_ACTIVE_LAYER=LTDC_ACTIVE_LAYER_FOREGROUND
   LTDC_DEPOLARITY_AH=LTDC_GCR_DEPOL
   LTDC_DEPOLARITY_AL=((uint32_t)0x00000000)
   LTDC_FLAG_FU=LTDC_ISR_FUIF
   LTDC_FLAG_LI=LTDC_ISR_LIF
   LTDC_FLAG_RR=LTDC_ISR_RRIF
   LTDC_FLAG_TE=LTDC_ISR_TERRIF
   LTDC_GCR_DBW=((uint32_t)0x00000070)
   LTDC_GCR_DEPOL=((uint32_t)0x20000000)
   LTDC_GCR_DGW=((uint32_t)0x00000700)
   LTDC_GCR_DRW=((uint32_t)0x00007000)
   LTDC_GCR_DTEN=((uint32_t)0x00010000)
   LTDC_GCR_HSPOL=((uint32_t)0x80000000)
   LTDC_GCR_LTDCEN=((uint32_t)0x00000001)
   LTDC_GCR_PCPOL=((uint32_t)0x10000000)
   LTDC_GCR_VSPOL=((uint32_t)0x40000000)
   LTDC_HORIZONTALSYNC=(LTDC_SSCR_HSW >> 16)
   LTDC_HSPOLARITY_AH=LTDC_GCR_HSPOL
   LTDC_HSPOLARITY_AL=((uint32_t)0x00000000)
   LTDC_ICR_CFUIF=((uint32_t)0x00000002)
   LTDC_ICR_CLIF=((uint32_t)0x00000001)
   LTDC_ICR_CRRIF=((uint32_t)0x00000008)
   LTDC_ICR_CTERRIF=((uint32_t)0x00000004)
   LTDC_IER_FUIE=((uint32_t)0x00000002)
   LTDC_IER_LIE=((uint32_t)0x00000001)
   LTDC_IER_RRIE=((uint32_t)0x00000008)
   LTDC_IER_TERRIE=((uint32_t)0x00000004)
   LTDC_ISR_FUIF=((uint32_t)0x00000002)
   LTDC_ISR_LIF=((uint32_t)0x00000001)
   LTDC_ISR_RRIF=((uint32_t)0x00000008)
   LTDC_ISR_TERRIF=((uint32_t)0x00000004)
   LTDC_IT_FU=LTDC_IER_FUIE
   LTDC_IT_LI=LTDC_IER_LIE
   LTDC_IT_RR=LTDC_IER_RRIE
   LTDC_IT_TE=LTDC_IER_TERRIE
   LTDC_LAYER(__HANDLE__,__LAYER__)=((LTDC_Layer_TypeDef *)((uint32_t)(((uint32_t)((__HANDLE__)->Instance)) + 0x84 + (0x80*(__LAYER__)))))
   LTDC_Layer1=((LTDC_Layer_TypeDef *)LTDC_Layer1_BASE)
   LTDC_Layer1_BASE=(LTDC_BASE + 0x84)
   LTDC_Layer2=((LTDC_Layer_TypeDef *)LTDC_Layer2_BASE)
   LTDC_Layer2_BASE=(LTDC_BASE + 0x104)
   LTDC_LINE_NUMBER=LTDC_LxCFBLNR_CFBLNBR
   LTDC_LIPCR_LIPOS=((uint32_t)0x000007FF)
   LTDC_LxBFCR_BF1=((uint32_t)0x00000700)
   LTDC_LxBFCR_BF2=((uint32_t)0x00000007)
   LTDC_LxCACR_CONSTA=((uint32_t)0x000000FF)
   LTDC_LxCFBAR_CFBADD=((uint32_t)0xFFFFFFFF)
   LTDC_LxCFBLNR_CFBLNBR=((uint32_t)0x000007FF)
   LTDC_LxCFBLR_CFBLL=((uint32_t)0x00001FFF)
   LTDC_LxCFBLR_CFBP=((uint32_t)0x1FFF0000)
   LTDC_LxCKCR_CKBLUE=((uint32_t)0x000000FF)
   LTDC_LxCKCR_CKGREEN=((uint32_t)0x0000FF00)
   LTDC_LxCKCR_CKRED=((uint32_t)0x00FF0000)
   LTDC_LxCLUTWR_BLUE=((uint32_t)0x000000FF)
   LTDC_LxCLUTWR_CLUTADD=((uint32_t)0xFF000000)
   LTDC_LxCLUTWR_GREEN=((uint32_t)0x0000FF00)
   LTDC_LxCLUTWR_RED=((uint32_t)0x00FF0000)
   LTDC_LxCR_CLUTEN=((uint32_t)0x00000010)
   LTDC_LxCR_COLKEN=((uint32_t)0x00000002)
   LTDC_LxCR_LEN=((uint32_t)0x00000001)
   LTDC_LxDCCR_DCALPHA=((uint32_t)0xFF000000)
   LTDC_LxDCCR_DCBLUE=((uint32_t)0x000000FF)
   LTDC_LxDCCR_DCGREEN=((uint32_t)0x0000FF00)
   LTDC_LxDCCR_DCRED=((uint32_t)0x00FF0000)
   LTDC_LxPFCR_PF=((uint32_t)0x00000007)
   LTDC_LxWHPCR_WHSPPOS=((uint32_t)0xFFFF0000)
   LTDC_LxWHPCR_WHSTPOS=((uint32_t)0x00000FFF)
   LTDC_LxWVPCR_WVSPPOS=((uint32_t)0xFFFF0000)
   LTDC_LxWVPCR_WVSTPOS=((uint32_t)0x00000FFF)
   LTDC_MAX_LAYER_NUMBER=((uint32_t) 2)
   LTDC_NB_OF_LAYERS=((uint32_t) 2)
   LTDC_PCPOLARITY_IIPC=LTDC_GCR_PCPOL
   LTDC_PCPOLARITY_IPC=((uint32_t)0x00000000)
   LTDC_PIXEL_FORMAT_AL44=((uint32_t)0x00000006)
   LTDC_PIXEL_FORMAT_AL88=((uint32_t)0x00000007)
   LTDC_PIXEL_FORMAT_ARGB1555=((uint32_t)0x00000003)
   LTDC_PIXEL_FORMAT_ARGB4444=((uint32_t)0x00000004)
   LTDC_PIXEL_FORMAT_ARGB8888=((uint32_t)0x00000000)
   LTDC_PIXEL_FORMAT_L8=((uint32_t)0x00000005)
   LTDC_PIXEL_FORMAT_RGB565=((uint32_t)0x00000002)
   LTDC_PIXEL_FORMAT_RGB888=((uint32_t)0x00000001)
   LTDC_SRCR_IMR=((uint32_t)0x00000001)
   LTDC_SRCR_VBR=((uint32_t)0x00000002)
   LTDC_SSCR_HSW=((uint32_t)0x0FFF0000)
   LTDC_SSCR_VSH=((uint32_t)0x000007FF)
   LTDC_STARTPOSITION=LTDC_LxWHPCR_WHSTPOS
   LTDC_STOPPOSITION=(LTDC_LxWHPCR_WHSPPOS >> 16)
   LTDC_TWCR_TOTALH=((uint32_t)0x000007FF)
   LTDC_TWCR_TOTALW=((uint32_t)0x0FFF0000)
   LTDC_VERTICALSYNC=LTDC_SSCR_VSH
   LTDC_VSPOLARITY_AH=LTDC_GCR_VSPOL
   LTDC_VSPOLARITY_AL=((uint32_t)0x00000000)
   LT_OBJDIR=".libs/"
   L_ctermid=16
   L_tmpnam=FILENAME_MAX
   MACCR_CLEAR_MASK=ETH_MACCR_CLEAR_MASK
   MACFCR_CLEAR_MASK=ETH_MACFCR_CLEAR_MASK
   MACMIIAR_CR_MASK=ETH_MACMIIAR_CR_MASK
   MAC_ADDR0=2
   MAC_ADDR1=0
   MAC_ADDR2=0
   MAC_ADDR3=0
   MAC_ADDR4=0
   MAC_ADDR5=0
   MATH_ERREXCEPT=2
   math_errhandling=MATH_ERRNO
   MATH_ERRNO=1
   MAX(a,b)=(((a) > (b)) ? (a) : (b))
   MAXFLOAT=3.40282347e+38F
   MAX_DMA2D_LAYER=2
   MAX_ETH_PAYLOAD=ETH_MAX_ETH_PAYLOAD
   MAX_LAYER=2
   MB_CUR_MAX=__locale_mb_cur_max()
   MCUINSTRUMENTATION_HPP=
   META_HPP=
   MIN(a,b)=(((a) < (b)) ? (a) : (b))
   MINSIGSTKSZ=2048
   MIN_ETH_PAYLOAD=ETH_MIN_ETH_PAYLOAD
   MIN_SWIPE_VELOCITY=20
   MODELLISTENER_HPP=
   MODEL_HPP=
   MODIFY_REG(REG,CLEARMASK,SETMASK)=WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))
   MOUNTSCREEN_PRESENTER_HPP=
   MOUNTSCREEN_VIEW_BASE_HPP=
   MOUNTSCREEN_VIEW_HPP=
   MPU=((MPU_Type *) MPU_BASE )
   MPU_ACCESS_BUFFERABLE=((uint8_t)0x01)
   MPU_ACCESS_CACHEABLE=((uint8_t)0x01)
   MPU_ACCESS_NOT_BUFFERABLE=((uint8_t)0x00)
   MPU_ACCESS_NOT_CACHEABLE=((uint8_t)0x00)
   MPU_ACCESS_NOT_SHAREABLE=((uint8_t)0x00)
   MPU_ACCESS_SHAREABLE=((uint8_t)0x01)
   MPU_BASE=(SCS_BASE + 0x0D90UL)
   MPU_CTRL_ENABLE_Msk=(1UL )
   MPU_CTRL_ENABLE_Pos=0
   MPU_CTRL_HFNMIENA_Msk=(1UL << MPU_CTRL_HFNMIENA_Pos)
   MPU_CTRL_HFNMIENA_Pos=1
   MPU_CTRL_PRIVDEFENA_Msk=(1UL << MPU_CTRL_PRIVDEFENA_Pos)
   MPU_CTRL_PRIVDEFENA_Pos=2
   MPU_HARDFAULT_NMI=((uint32_t)0x00000002)
   MPU_HFNMI_PRIVDEF=((uint32_t)0x00000006)
   MPU_HFNMI_PRIVDEF_NONE=((uint32_t)0x00000000)
   MPU_INSTRUCTION_ACCESS_DISABLE=((uint8_t)0x01)
   MPU_INSTRUCTION_ACCESS_ENABLE=((uint8_t)0x00)
   MPU_PRIVILEGED_DEFAULT=((uint32_t)0x00000004)
   MPU_RASR_AP_Msk=(0x7UL << MPU_RASR_AP_Pos)
   MPU_RASR_AP_Pos=24
   MPU_RASR_ATTRS_Msk=(0xFFFFUL << MPU_RASR_ATTRS_Pos)
   MPU_RASR_ATTRS_Pos=16
   MPU_RASR_B_Msk=(1UL << MPU_RASR_B_Pos)
   MPU_RASR_B_Pos=16
   MPU_RASR_C_Msk=(1UL << MPU_RASR_C_Pos)
   MPU_RASR_C_Pos=17
   MPU_RASR_ENABLE_Msk=(1UL )
   MPU_RASR_ENABLE_Pos=0
   MPU_RASR_SIZE_Msk=(0x1FUL << MPU_RASR_SIZE_Pos)
   MPU_RASR_SIZE_Pos=1
   MPU_RASR_SRD_Msk=(0xFFUL << MPU_RASR_SRD_Pos)
   MPU_RASR_SRD_Pos=8
   MPU_RASR_S_Msk=(1UL << MPU_RASR_S_Pos)
   MPU_RASR_S_Pos=18
   MPU_RASR_TEX_Msk=(0x7UL << MPU_RASR_TEX_Pos)
   MPU_RASR_TEX_Pos=19
   MPU_RASR_XN_Msk=(1UL << MPU_RASR_XN_Pos)
   MPU_RASR_XN_Pos=28
   MPU_RBAR_ADDR_Msk=(0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)
   MPU_RBAR_ADDR_Pos=5
   MPU_RBAR_REGION_Msk=(0xFUL )
   MPU_RBAR_REGION_Pos=0
   MPU_RBAR_VALID_Msk=(1UL << MPU_RBAR_VALID_Pos)
   MPU_RBAR_VALID_Pos=4
   MPU_REGION_DISABLE=((uint8_t)0x00)
   MPU_REGION_ENABLE=((uint8_t)0x01)
   MPU_REGION_FULL_ACCESS=((uint8_t)0x03)
   MPU_REGION_NO_ACCESS=((uint8_t)0x00)
   MPU_REGION_NUMBER0=((uint8_t)0x00)
   MPU_REGION_NUMBER1=((uint8_t)0x01)
   MPU_REGION_NUMBER2=((uint8_t)0x02)
   MPU_REGION_NUMBER3=((uint8_t)0x03)
   MPU_REGION_NUMBER4=((uint8_t)0x04)
   MPU_REGION_NUMBER5=((uint8_t)0x05)
   MPU_REGION_NUMBER6=((uint8_t)0x06)
   MPU_REGION_NUMBER7=((uint8_t)0x07)
   MPU_REGION_PRIV_RO=((uint8_t)0x05)
   MPU_REGION_PRIV_RO_URO=((uint8_t)0x06)
   MPU_REGION_PRIV_RW=((uint8_t)0x01)
   MPU_REGION_PRIV_RW_URO=((uint8_t)0x02)
   MPU_REGION_SIZE_128B=((uint8_t)0x06)
   MPU_REGION_SIZE_128KB=((uint8_t)0x10)
   MPU_REGION_SIZE_128MB=((uint8_t)0x1A)
   MPU_REGION_SIZE_16KB=((uint8_t)0x0D)
   MPU_REGION_SIZE_16MB=((uint8_t)0x17)
   MPU_REGION_SIZE_1GB=((uint8_t)0x1D)
   MPU_REGION_SIZE_1KB=((uint8_t)0x09)
   MPU_REGION_SIZE_1MB=((uint8_t)0x13)
   MPU_REGION_SIZE_256B=((uint8_t)0x07)
   MPU_REGION_SIZE_256KB=((uint8_t)0x11)
   MPU_REGION_SIZE_256MB=((uint8_t)0x1B)
   MPU_REGION_SIZE_2GB=((uint8_t)0x1E)
   MPU_REGION_SIZE_2KB=((uint8_t)0x0A)
   MPU_REGION_SIZE_2MB=((uint8_t)0x14)
   MPU_REGION_SIZE_32B=((uint8_t)0x04)
   MPU_REGION_SIZE_32KB=((uint8_t)0x0E)
   MPU_REGION_SIZE_32MB=((uint8_t)0x18)
   MPU_REGION_SIZE_4GB=((uint8_t)0x1F)
   MPU_REGION_SIZE_4KB=((uint8_t)0x0B)
   MPU_REGION_SIZE_4MB=((uint8_t)0x15)
   MPU_REGION_SIZE_512B=((uint8_t)0x08)
   MPU_REGION_SIZE_512KB=((uint8_t)0x12)
   MPU_REGION_SIZE_512MB=((uint8_t)0x1C)
   MPU_REGION_SIZE_64B=((uint8_t)0x05)
   MPU_REGION_SIZE_64KB=((uint8_t)0x0F)
   MPU_REGION_SIZE_64MB=((uint8_t)0x19)
   MPU_REGION_SIZE_8KB=((uint8_t)0x0C)
   MPU_REGION_SIZE_8MB=((uint8_t)0x16)
   MPU_RNR_REGION_Msk=(0xFFUL )
   MPU_RNR_REGION_Pos=0
   MPU_TEX_LEVEL0=((uint8_t)0x00)
   MPU_TEX_LEVEL1=((uint8_t)0x01)
   MPU_TEX_LEVEL2=((uint8_t)0x02)
   MPU_TYPE_DREGION_Msk=(0xFFUL << MPU_TYPE_DREGION_Pos)
   MPU_TYPE_DREGION_Pos=8
   MPU_TYPE_IREGION_Msk=(0xFFUL << MPU_TYPE_IREGION_Pos)
   MPU_TYPE_IREGION_Pos=16
   MPU_TYPE_SEPARATE_Msk=(1UL )
   MPU_TYPE_SEPARATE_Pos=0
   MRLVDS_BitNumber=MRLVDS_BIT_NUMBER
   MRLVDS_BIT_NUMBER=POSITION_VAL(PWR_CR_MRLVDS)
   MSION_BITNUMBER=RCC_MSION_BIT_NUMBER
   MULTIPLE_IO_READ_ID_CMD=0xAF
   MVPAPPLICATION_HPP=
   MVPHEAP_HPP=
   M_1_PI=0.31830988618379067154
   M_2_PI=0.63661977236758134308
   M_2_SQRTPI=1.12837916709551257390
   M_3PI_4=2.3561944901923448370E0
   M_E=2.7182818284590452354
   M_INVLN2=1.4426950408889633870E0
   M_IVLN10=0.43429448190325182765
   M_LN10=2.30258509299404568402
   M_LN2=_M_LN2
   M_LN2HI=6.9314718036912381649E-1
   M_LN2LO=1.9082149292705877000E-10
   M_LOG10E=0.43429448190325182765
   M_LOG2E=1.4426950408889634074
   M_LOG2_E=_M_LN2
   M_PI=3.14159265358979323846
   M_PI_2=1.57079632679489661923
   M_PI_4=0.78539816339744830962
   M_SQRT1_2=0.70710678118654752440
   M_SQRT2=1.41421356237309504880
   M_SQRT3=1.73205080756887719000
   M_SQRTPI=1.77245385090551602792981
   M_TWOPI=(M_PI * 2.0)
   N25Q128A_BULK_ERASE_MAX_TIME=250000
   N25Q128A_DUMMY_CYCLES_READ=8
   N25Q128A_DUMMY_CYCLES_READ_QUAD=10
   N25Q128A_EVCR_DUAL=((uint8_t)0x40)
   N25Q128A_EVCR_ODS=((uint8_t)0x07)
   N25Q128A_EVCR_QUAD=((uint8_t)0x80)
   N25Q128A_EVCR_RH=((uint8_t)0x10)
   N25Q128A_EVCR_VPPA=((uint8_t)0x08)
   N25Q128A_FLASH_SIZE=0x1000000
   N25Q128A_FSR_ERERR=((uint8_t)0x20)
   N25Q128A_FSR_ERSUS=((uint8_t)0x40)
   N25Q128A_FSR_PGERR=((uint8_t)0x10)
   N25Q128A_FSR_PGSUS=((uint8_t)0x04)
   N25Q128A_FSR_PRERR=((uint8_t)0x02)
   N25Q128A_FSR_READY=((uint8_t)0x80)
   N25Q128A_FSR_VPPERR=((uint8_t)0x08)
   N25Q128A_NVCR_DUAL=((uint16_t)0x0004)
   N25Q128A_NVCR_LOCK=((uint16_t)0x0001)
   N25Q128A_NVCR_NB_DUMMY=((uint16_t)0xF000)
   N25Q128A_NVCR_ODS=((uint16_t)0x01C0)
   N25Q128A_NVCR_QUAB=((uint16_t)0x0008)
   N25Q128A_NVCR_RH=((uint16_t)0x0010)
   N25Q128A_NVCR_XIP=((uint16_t)0x0E00)
   N25Q128A_PAGE_SIZE=0x100
   N25Q128A_SECTOR_ERASE_MAX_TIME=3000
   N25Q128A_SECTOR_SIZE=0x10000
   N25Q128A_SR_BLOCKPR=((uint8_t)0x5C)
   N25Q128A_SR_PRBOTTOM=((uint8_t)0x20)
   N25Q128A_SR_SRWREN=((uint8_t)0x80)
   N25Q128A_SR_WIP=((uint8_t)0x01)
   N25Q128A_SR_WREN=((uint8_t)0x02)
   N25Q128A_SUBSECTOR_ERASE_MAX_TIME=800
   N25Q128A_SUBSECTOR_SIZE=0x1000
   N25Q128A_VCR_NB_DUMMY=((uint8_t)0xF0)
   N25Q128A_VCR_WRAP=((uint8_t)0x03)
   N25Q128A_VCR_XIP=((uint8_t)0x08)
   NAN=(__builtin_nanf(""))
   NAND_AddressTypedef=NAND_AddressTypeDef
   NFDBITS=(sizeof (fd_mask) * 8)
   NOR_ERROR=HAL_NOR_STATUS_ERROR
   NOR_ONGOING=HAL_NOR_STATUS_ONGOING
   NOR_StatusTypedef=HAL_NOR_StatusTypeDef
   NOR_SUCCESS=HAL_NOR_STATUS_SUCCESS
   NOR_TIMEOUT=HAL_NOR_STATUS_TIMEOUT
   NOTRANSITION_HPP=
   NSIG=32
   NULL=__null
   NVIC=((NVIC_Type *) NVIC_BASE )
   NVIC_BASE=(SCS_BASE + 0x0100UL)
   NVIC_PRIORITYGROUP_0=((uint32_t)0x00000007)
   NVIC_PRIORITYGROUP_1=((uint32_t)0x00000006)
   NVIC_PRIORITYGROUP_2=((uint32_t)0x00000005)
   NVIC_PRIORITYGROUP_3=((uint32_t)0x00000004)
   NVIC_PRIORITYGROUP_4=((uint32_t)0x00000003)
   NVIC_STIR_INTID_Msk=(0x1FFUL )
   NVIC_STIR_INTID_Pos=0
   OBEX_BOOTCONFIG=OPTIONBYTE_BOOTCONFIG
   OBEX_PCROP=OPTIONBYTE_PCROP
   OB_BOR_LEVEL1=((uint8_t)0x08)
   OB_BOR_LEVEL2=((uint8_t)0x04)
   OB_BOR_LEVEL3=((uint8_t)0x00)
   OB_BOR_OFF=((uint8_t)0x0C)
   OB_DUAL_BOOT_DISABLE=((uint8_t)0x00)
   OB_DUAL_BOOT_ENABLE=((uint8_t)0x10)
   OB_IWDG_HW=((uint8_t)0x00)
   OB_IWDG_SW=((uint8_t)0x20)
   OB_PCROP_DESELECTED=((uint8_t)0x00)
   OB_PCROP_SECTOR_0=((uint32_t)0x00000001)
   OB_PCROP_SECTOR_10=((uint32_t)0x00000400)
   OB_PCROP_SECTOR_11=((uint32_t)0x00000800)
   OB_PCROP_SECTOR_12=((uint32_t)0x00000001)
   OB_PCROP_SECTOR_13=((uint32_t)0x00000002)
   OB_PCROP_SECTOR_14=((uint32_t)0x00000004)
   OB_PCROP_SECTOR_15=((uint32_t)0x00000008)
   OB_PCROP_SECTOR_16=((uint32_t)0x00000010)
   OB_PCROP_SECTOR_17=((uint32_t)0x00000020)
   OB_PCROP_SECTOR_18=((uint32_t)0x00000040)
   OB_PCROP_SECTOR_19=((uint32_t)0x00000080)
   OB_PCROP_SECTOR_1=((uint32_t)0x00000002)
   OB_PCROP_SECTOR_20=((uint32_t)0x00000100)
   OB_PCROP_SECTOR_21=((uint32_t)0x00000200)
   OB_PCROP_SECTOR_22=((uint32_t)0x00000400)
   OB_PCROP_SECTOR_23=((uint32_t)0x00000800)
   OB_PCROP_SECTOR_2=((uint32_t)0x00000004)
   OB_PCROP_SECTOR_3=((uint32_t)0x00000008)
   OB_PCROP_SECTOR_4=((uint32_t)0x00000010)
   OB_PCROP_SECTOR_5=((uint32_t)0x00000020)
   OB_PCROP_SECTOR_6=((uint32_t)0x00000040)
   OB_PCROP_SECTOR_7=((uint32_t)0x00000080)
   OB_PCROP_SECTOR_8=((uint32_t)0x00000100)
   OB_PCROP_SECTOR_9=((uint32_t)0x00000200)
   OB_PCROP_SECTOR_All=((uint32_t)0x00000FFF)
   OB_PCROP_SELECTED=((uint8_t)0x80)
   OB_PCROP_STATE_DISABLE=((uint32_t)0x00)
   OB_PCROP_STATE_ENABLE=((uint32_t)0x01)
   OB_RAM_PARITY_CHECK_RESET=OB_SRAM_PARITY_RESET
   OB_RAM_PARITY_CHECK_SET=OB_SRAM_PARITY_SET
   OB_RDP_LEVEL0=OB_RDP_LEVEL_0
   OB_RDP_LEVEL1=OB_RDP_LEVEL_1
   OB_RDP_LEVEL2=OB_RDP_LEVEL_2
   OB_RDP_LEVEL_0=((uint8_t)0xAA)
   OB_RDP_LEVEL_1=((uint8_t)0x55)
   OB_RDP_LEVEL_2=((uint8_t)0xCC)
   OB_SDADC12_VDD_MONITOR_RESET=OB_SDACD_VDD_MONITOR_RESET
   OB_SDADC12_VDD_MONITOR_SET=OB_SDACD_VDD_MONITOR_SET
   OB_STDBY_NO_RST=((uint8_t)0x80)
   OB_STDBY_RST=((uint8_t)0x00)
   OB_STOP_NO_RST=((uint8_t)0x40)
   OB_STOP_RST=((uint8_t)0x00)
   OB_WDG_HW=OB_IWDG_HW
   OB_WDG_SW=OB_IWDG_SW
   OB_WRPSTATE_DISABLE=((uint32_t)0x00)
   OB_WRPSTATE_ENABLE=((uint32_t)0x01)
   OB_WRP_SECTOR_0=((uint32_t)0x00000001)
   OB_WRP_SECTOR_10=((uint32_t)0x00000400)
   OB_WRP_SECTOR_11=((uint32_t)0x00000800)
   OB_WRP_SECTOR_12=((uint32_t)0x00000001 << 12)
   OB_WRP_SECTOR_13=((uint32_t)0x00000002 << 12)
   OB_WRP_SECTOR_14=((uint32_t)0x00000004 << 12)
   OB_WRP_SECTOR_15=((uint32_t)0x00000008 << 12)
   OB_WRP_SECTOR_16=((uint32_t)0x00000010 << 12)
   OB_WRP_SECTOR_17=((uint32_t)0x00000020 << 12)
   OB_WRP_SECTOR_18=((uint32_t)0x00000040 << 12)
   OB_WRP_SECTOR_19=((uint32_t)0x00000080 << 12)
   OB_WRP_SECTOR_1=((uint32_t)0x00000002)
   OB_WRP_SECTOR_20=((uint32_t)0x00000100 << 12)
   OB_WRP_SECTOR_21=((uint32_t)0x00000200 << 12)
   OB_WRP_SECTOR_22=((uint32_t)0x00000400 << 12)
   OB_WRP_SECTOR_23=((uint32_t)0x00000800 << 12)
   OB_WRP_SECTOR_2=((uint32_t)0x00000004)
   OB_WRP_SECTOR_3=((uint32_t)0x00000008)
   OB_WRP_SECTOR_4=((uint32_t)0x00000010)
   OB_WRP_SECTOR_5=((uint32_t)0x00000020)
   OB_WRP_SECTOR_6=((uint32_t)0x00000040)
   OB_WRP_SECTOR_7=((uint32_t)0x00000080)
   OB_WRP_SECTOR_8=((uint32_t)0x00000100)
   OB_WRP_SECTOR_9=((uint32_t)0x00000200)
   OB_WRP_SECTOR_All=((uint32_t)0x00000FFF << 12)
   ODEN_BitNumber=ODEN_BIT_NUMBER
   ODEN_BIT_NUMBER=POSITION_VAL(PWR_CR_ODEN)
   ODSWEN_BitNumber=ODSWEN_BIT_NUMBER
   ODSWEN_BIT_NUMBER=POSITION_VAL(PWR_CR_ODSWEN)
   offsetof(TYPE,MEMBER)=__builtin_offsetof (TYPE, MEMBER)
   OPAMP_INVERTINGINPUT_VINM=OPAMP_SEC_INVERTINGINPUT_IO1
   OPAMP_INVERTINGINPUT_VM0=OPAMP_INVERTINGINPUT_IO0
   OPAMP_INVERTINGINPUT_VM1=OPAMP_INVERTINGINPUT_IO1
   OPAMP_NONINVERTINGINPUT_VP0=OPAMP_NONINVERTINGINPUT_IO0
   OPAMP_NONINVERTINGINPUT_VP1=OPAMP_NONINVERTINGINPUT_IO1
   OPAMP_NONINVERTINGINPUT_VP2=OPAMP_NONINVERTINGINPUT_IO2
   OPAMP_NONINVERTINGINPUT_VP3=OPAMP_NONINVERTINGINPUT_IO3
   OPAMP_PGACONNECT_NO=OPAMP_PGA_CONNECT_INVERTINGINPUT_NO
   OPAMP_PGACONNECT_VM0=OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0
   OPAMP_PGACONNECT_VM1=OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1
   OPAMP_SEC_INVERTINGINPUT_VM0=OPAMP_SEC_INVERTINGINPUT_IO0
   OPAMP_SEC_INVERTINGINPUT_VM1=OPAMP_SEC_INVERTINGINPUT_IO1
   OPAMP_SEC_NONINVERTINGINPUT_VP0=OPAMP_SEC_NONINVERTINGINPUT_IO0
   OPAMP_SEC_NONINVERTINGINPUT_VP1=OPAMP_SEC_NONINVERTINGINPUT_IO1
   OPAMP_SEC_NONINVERTINGINPUT_VP2=OPAMP_SEC_NONINVERTINGINPUT_IO2
   OPAMP_SEC_NONINVERTINGINPUT_VP3=OPAMP_SEC_NONINVERTINGINPUT_IO3
   OPTCR1_BYTE2_ADDRESS=((uint32_t)0x40023C1A)
   OPTCR_BYTE0_ADDRESS=((uint32_t)0x40023C14)
   OPTCR_BYTE1_ADDRESS=((uint32_t)0x40023C15)
   OPTCR_BYTE2_ADDRESS=((uint32_t)0x40023C16)
   OPTCR_BYTE3_ADDRESS=((uint32_t)0x40023C17)
   OPTIONBYTE_BOOTCONFIG=((uint32_t)0x02)
   OPTIONBYTE_BOR=((uint32_t)0x08)
   OPTIONBYTE_PCROP=((uint32_t)0x01)
   OPTIONBYTE_RDP=((uint32_t)0x02)
   OPTIONBYTE_USER=((uint32_t)0x04)
   OPTIONBYTE_WRP=((uint32_t)0x01)
   OTG_FS1_OVER_CURRENT_PIN=GPIO_PIN_7
   OTG_FS1_OVER_CURRENT_PORT=GPIOB
   OTG_FS1_OVER_CURRENT_PORT_CLK_ENABLE()=__HAL_RCC_GPIOB_CLK_ENABLE()
   OTG_FS1_POWER_SWITCH_PIN=GPIO_PIN_2
   OTG_FS1_POWER_SWITCH_PORT=GPIOB
   OTG_FS1_POWER_SWITCH_PORT_CLK_ENABLE()=__HAL_RCC_GPIOB_CLK_ENABLE()
   OTM8009A_480X800_FREQUENCY_DIVIDER=2
   OTM8009A_480X800_HBP=((uint16_t)120)
   OTM8009A_480X800_HEIGHT=((uint16_t)800)
   OTM8009A_480X800_HFP=((uint16_t)120)
   OTM8009A_480X800_HSYNC=((uint16_t)120)
   OTM8009A_480X800_VBP=((uint16_t)12)
   OTM8009A_480X800_VFP=((uint16_t)12)
   OTM8009A_480X800_VSYNC=((uint16_t)12)
   OTM8009A_480X800_WIDTH=((uint16_t)480)
   OTM8009A_800X480_HBP=OTM8009A_480X800_HBP
   OTM8009A_800X480_HEIGHT=((uint16_t)480)
   OTM8009A_800X480_HFP=OTM8009A_480X800_HFP
   OTM8009A_800X480_HSYNC=OTM8009A_480X800_HSYNC
   OTM8009A_800X480_VBP=OTM8009A_480X800_VBP
   OTM8009A_800X480_VFP=OTM8009A_480X800_VFP
   OTM8009A_800X480_VSYNC=OTM8009A_480X800_VSYNC
   OTM8009A_800X480_WIDTH=((uint16_t)800)
   OTM8009A_CMD_CASET=0x2A
   OTM8009A_CMD_COLMOD=0x3A
   OTM8009A_CMD_DISPOFF=0x28
   OTM8009A_CMD_DISPON=0x29
   OTM8009A_CMD_IDMOFF=0x38
   OTM8009A_CMD_IDMON=0x39
   OTM8009A_CMD_MADCTR=0x36
   OTM8009A_CMD_NOP=0x00
   OTM8009A_CMD_PASET=0x2B
   OTM8009A_CMD_PLTAR=0x30
   OTM8009A_CMD_PTLON=0x12
   OTM8009A_CMD_RAMRD=0x2E
   OTM8009A_CMD_RAMRDC=0x3E
   OTM8009A_CMD_RAMWR=0x2C
   OTM8009A_CMD_RAMWRC=0x3C
   OTM8009A_CMD_RDDCOLMOD=0x0C
   OTM8009A_CMD_RDDMADCTL=0x0B
   OTM8009A_CMD_RDSCNL=0x45
   OTM8009A_CMD_SLPIN=0x10
   OTM8009A_CMD_SLPOUT=0x11
   OTM8009A_CMD_SWRESET=0x01
   OTM8009A_CMD_TEEON=0x35
   OTM8009A_CMD_TEOFF=0x34
   OTM8009A_CMD_WRCABC=0x55
   OTM8009A_CMD_WRCABCMB=0x5E
   OTM8009A_CMD_WRCTRLD=0x53
   OTM8009A_CMD_WRDISBV=0x51
   OTM8009A_CMD_WRTESCN=0x44
   OTM8009A_COLMOD_RGB565=0x55
   OTM8009A_COLMOD_RGB888=0x77
   OTM8009A_FORMAT_RBG565=((uint32_t)0x02)
   OTM8009A_FORMAT_RGB888=((uint32_t)0x00)
   OTM8009A_MADCTR_MODE_LANDSCAPE=0x60
   OTM8009A_MADCTR_MODE_PORTRAIT=0x00
   OTM8009A_ORIENTATION_LANDSCAPE=((uint32_t)0x01)
   OTM8009A_ORIENTATION_PORTRAIT=((uint32_t)0x00)
   OTM8009A_TEEON_TELOM_VBLANKING_AND_HBLANKING_INFO=0x01
   OTM8009A_TEEON_TELOM_VBLANKING_INFO_ONLY=0x00
   OTM8009TOUCHCONTROLLER_HPP=
   OVERFLOW=3
   OVR_DATA_OVERWRITTEN=ADC_OVR_DATA_OVERWRITTEN
   OVR_DATA_PRESERVED=ADC_OVR_DATA_PRESERVED
   OVR_EVENT=ADC_OVR_EVENT
   PAGESIZE=FLASH_PAGE_SIZE
   PAGE_PROG_CMD=0x02
   PARTITION_HPP=
   PCCARD_ERROR=HAL_PCCARD_STATUS_ERROR
   PCCARD_ONGOING=HAL_PCCARD_STATUS_ONGOING
   PCCARD_StatusTypedef=HAL_PCCARD_StatusTypeDef
   PCCARD_SUCCESS=HAL_PCCARD_STATUS_SUCCESS
   PCCARD_TIMEOUT=HAL_PCCARD_STATUS_TIMEOUT
   PCROPSTATE_DISABLE=OB_PCROP_STATE_DISABLE
   PCROPSTATE_ENABLE=OB_PCROP_STATE_ENABLE
   PDP_ENDIAN=_PDP_ENDIAN
   PERIPH_BASE=((uint32_t)0x40000000)
   PERIPH_BB_BASE=((uint32_t)0x42000000)
   physadr=physadr_t
   PHY_AUTONEGOTIATION=((uint16_t)0x1000)
   PHY_AUTONEGO_COMPLETE=((uint16_t)0x0020)
   PHY_BCR=((uint16_t)0x00)
   PHY_BSR=((uint16_t)0x01)
   PHY_CONFIG_DELAY=((uint32_t)0x00000FFF)
   PHY_DUPLEX_STATUS=((uint16_t)0x0004)
   PHY_FULLDUPLEX_100M=((uint16_t)0x2100)
   PHY_FULLDUPLEX_10M=((uint16_t)0x0100)
   PHY_HALFDUPLEX_100M=((uint16_t)0x2000)
   PHY_HALFDUPLEX_10M=((uint16_t)0x0000)
   PHY_ISOLATE=((uint16_t)0x0400)
   PHY_JABBER_DETECTION=((uint16_t)0x0002)
   PHY_LINKED_STATUS=((uint16_t)0x0004)
   PHY_LINK_INTERRUPT=((uint16_t)0x2000)
   PHY_LINK_STATUS=((uint16_t)0x0001)
   PHY_LOOPBACK=((uint16_t)0x4000)
   PHY_MICR=((uint16_t)0x11)
   PHY_MICR_INT_EN=((uint16_t)0x0002)
   PHY_MICR_INT_OE=((uint16_t)0x0001)
   PHY_MISR=((uint16_t)0x12)
   PHY_MISR_LINK_INT_EN=((uint16_t)0x0020)
   PHY_POWERDOWN=((uint16_t)0x0800)
   PHY_READ_TO=((uint32_t)0x0000FFFF)
   PHY_RESET=((uint16_t)0x8000)
   PHY_RESET_DELAY=((uint32_t)0x000000FF)
   PHY_RESTART_AUTONEGOTIATION=((uint16_t)0x0200)
   PHY_SPEED_STATUS=((uint16_t)0x0002)
   PHY_SR=((uint16_t)0x10)
   PHY_WRITE_TO=((uint32_t)0x0000FFFF)
   PLLI2SON_BitNumber=RCC_PLLI2SON_BIT_NUMBER
   PLLI2S_TIMEOUT_VALUE=((uint32_t)100)
   PLLON_BitNumber=RCC_PLLON_BIT_NUMBER
   PLLSAION_BitNumber=RCC_PLLSAION_BIT_NUMBER
   PLLSAI_TIMEOUT_VALUE=((uint32_t)100)
   PLL_TIMEOUT_VALUE=((uint32_t)100)
   PLOSS=6
   PMODE_BitNumber=PMODE_BIT_NUMBER
   PMODE_BIT_NUMBER=POSITION_VAL(PWR_CR_PMODE)
   POLARALIGNSCREEN_PRESENTER_HPP=
   POLARALIGNSCREEN_VIEW_BASE_HPP=
   POLARALIGNSCREEN_VIEW_HPP=
   POSITION_VAL(VAL)=(__CLZ(__RBIT(VAL)))
   PREFETCH_ENABLE=1
   PRESENTER_HPP=
   PROG_ERASE_RESUME_CMD=0x7A
   PROG_ERASE_SUSPEND_CMD=0x75
   PROG_OTP_ARRAY_CMD=0x42
   PTHREAD_CREATE_DETACHED=0
   PTHREAD_CREATE_JOINABLE=1
   PTHREAD_EXPLICIT_SCHED=2
   PTHREAD_INHERIT_SCHED=1
   PTHREAD_SCOPE_PROCESS=0
   PTHREAD_SCOPE_SYSTEM=1
   PTRDIFF_MAX=(__PTRDIFF_MAX__)
   PTRDIFF_MIN=(-PTRDIFF_MAX - 1)
   PVDE_BitNumber=PVDE_BIT_NUMBER
   PVDE_BIT_NUMBER=POSITION_VAL(PWR_CR_PVDE)
   PWR=((PWR_TypeDef *) PWR_BASE)
   PWR_BASE=(APB1PERIPH_BASE + 0x7000)
   PWR_CR_ADCDC1=((uint32_t)0x00002000)
   PWR_CR_CSBF=((uint32_t)0x00000008)
   PWR_CR_CWUF=((uint32_t)0x00000004)
   PWR_CR_DBP=((uint32_t)0x00000100)
   PWR_CR_FPDS=((uint32_t)0x00000200)
   PWR_CR_LPDS=((uint32_t)0x00000001)
   PWR_CR_LPLVDS=((uint32_t)0x00000400)
   PWR_CR_LPUDS=PWR_CR_LPLVDS
   PWR_CR_MRLVDS=((uint32_t)0x00000800)
   PWR_CR_MRUDS=PWR_CR_MRLVDS
   PWR_CR_ODEN=((uint32_t)0x00010000)
   PWR_CR_ODSWEN=((uint32_t)0x00020000)
   PWR_CR_OFFSET=0x00
   PWR_CR_OFFSET_BB=(PWR_OFFSET + PWR_CR_OFFSET)
   PWR_CR_PDDS=((uint32_t)0x00000002)
   PWR_CR_PLS=((uint32_t)0x000000E0)
   PWR_CR_PLS_0=((uint32_t)0x00000020)
   PWR_CR_PLS_1=((uint32_t)0x00000040)
   PWR_CR_PLS_2=((uint32_t)0x00000080)
   PWR_CR_PLS_LEV0=((uint32_t)0x00000000)
   PWR_CR_PLS_LEV1=((uint32_t)0x00000020)
   PWR_CR_PLS_LEV2=((uint32_t)0x00000040)
   PWR_CR_PLS_LEV3=((uint32_t)0x00000060)
   PWR_CR_PLS_LEV4=((uint32_t)0x00000080)
   PWR_CR_PLS_LEV5=((uint32_t)0x000000A0)
   PWR_CR_PLS_LEV6=((uint32_t)0x000000C0)
   PWR_CR_PLS_LEV7=((uint32_t)0x000000E0)
   PWR_CR_PMODE=PWR_CR_VOS
   PWR_CR_PVDE=((uint32_t)0x00000010)
   PWR_CR_UDEN=((uint32_t)0x000C0000)
   PWR_CR_UDEN_0=((uint32_t)0x00040000)
   PWR_CR_UDEN_1=((uint32_t)0x00080000)
   PWR_CR_VOS=((uint32_t)0x0000C000)
   PWR_CR_VOS_0=((uint32_t)0x00004000)
   PWR_CR_VOS_1=((uint32_t)0x00008000)
   PWR_CSR_BRE=((uint32_t)0x00000200)
   PWR_CSR_BRR=((uint32_t)0x00000008)
   PWR_CSR_EWUP=((uint32_t)0x00000100)
   PWR_CSR_ODRDY=((uint32_t)0x00010000)
   PWR_CSR_ODSWRDY=((uint32_t)0x00020000)
   PWR_CSR_OFFSET=0x04
   PWR_CSR_OFFSET_BB=(PWR_OFFSET + PWR_CSR_OFFSET)
   PWR_CSR_PVDO=((uint32_t)0x00000004)
   PWR_CSR_REGRDY=PWR_CSR_VOSRDY
   PWR_CSR_SBF=((uint32_t)0x00000002)
   PWR_CSR_UDSWRDY=((uint32_t)0x000C0000)
   PWR_CSR_VOSRDY=((uint32_t)0x00004000)
   PWR_CSR_WUF=((uint32_t)0x00000001)
   PWR_CSR_WUPP=((uint32_t)0x00000080)
   PWR_EXTI_LINE_PVD=((uint32_t)EXTI_IMR_MR16)
   PWR_FLAG_BRR=PWR_CSR_BRR
   PWR_FLAG_ODRDY=PWR_CSR_ODRDY
   PWR_FLAG_ODSWRDY=PWR_CSR_ODSWRDY
   PWR_FLAG_PVDO=PWR_CSR_PVDO
   PWR_FLAG_SB=PWR_CSR_SBF
   PWR_FLAG_UDRDY=PWR_CSR_UDSWRDY
   PWR_FLAG_VOSRDY=PWR_CSR_VOSRDY
   PWR_FLAG_WU=PWR_CSR_WUF
   PWR_LOWPOWERREGULATOR_ON=PWR_CR_LPDS
   PWR_LOWPOWERREGULATOR_UNDERDRIVE_ON=((uint32_t)(PWR_CR_LPDS | PWR_CR_LPUDS))
   PWR_MAINREGULATOR_ON=((uint32_t)0x00000000)
   PWR_MAINREGULATOR_UNDERDRIVE_ON=PWR_CR_MRUDS
   PWR_MODE_EVENT_FALLING=PWR_PVD_MODE_EVENT_FALLING
   PWR_MODE_EVENT_RISING=PWR_PVD_MODE_EVENT_RISING
   PWR_MODE_EVENT_RISING_FALLING=PWR_PVD_MODE_EVENT_RISING_FALLING
   PWR_MODE_EVT=PWR_PVD_MODE_NORMAL
   PWR_MODE_IT_FALLING=PWR_PVD_MODE_IT_FALLING
   PWR_MODE_IT_RISING=PWR_PVD_MODE_IT_RISING
   PWR_MODE_IT_RISING_FALLING=PWR_PVD_MODE_IT_RISING_FALLING
   PWR_MODE_NORMAL=PWR_PVD_MODE_NORMAL
   PWR_OFFSET=(PWR_BASE - PERIPH_BASE)
   PWR_PVDLEVEL_0=PWR_CR_PLS_LEV0
   PWR_PVDLEVEL_1=PWR_CR_PLS_LEV1
   PWR_PVDLEVEL_2=PWR_CR_PLS_LEV2
   PWR_PVDLEVEL_3=PWR_CR_PLS_LEV3
   PWR_PVDLEVEL_4=PWR_CR_PLS_LEV4
   PWR_PVDLEVEL_5=PWR_CR_PLS_LEV5
   PWR_PVDLEVEL_6=PWR_CR_PLS_LEV6
   PWR_PVDLEVEL_7=PWR_CR_PLS_LEV7
   PWR_PVD_MODE_EVENT_FALLING=((uint32_t)0x00020002)
   PWR_PVD_MODE_EVENT_RISING=((uint32_t)0x00020001)
   PWR_PVD_MODE_EVENT_RISING_FALLING=((uint32_t)0x00020003)
   PWR_PVD_MODE_IT_FALLING=((uint32_t)0x00010002)
   PWR_PVD_MODE_IT_RISING=((uint32_t)0x00010001)
   PWR_PVD_MODE_IT_RISING_FALLING=((uint32_t)0x00010003)
   PWR_PVD_MODE_NORMAL=((uint32_t)0x00000000)
   PWR_REGULATOR_VOLTAGE_SCALE1=PWR_CR_VOS
   PWR_REGULATOR_VOLTAGE_SCALE2=PWR_CR_VOS_1
   PWR_REGULATOR_VOLTAGE_SCALE3=PWR_CR_VOS_0
   PWR_SLEEPENTRY_WFE=((uint8_t)0x02)
   PWR_SLEEPENTRY_WFI=((uint8_t)0x01)
   PWR_STOPENTRY_WFE=((uint8_t)0x02)
   PWR_STOPENTRY_WFI=((uint8_t)0x01)
   PWR_WAKEUP_PIN1=((uint32_t)0x00000100)
   P_tmpdir="/tmp"
   QSPI_ADDRESS_16_BITS=((uint32_t)QUADSPI_CCR_ADSIZE_0)
   QSPI_ADDRESS_1_LINE=((uint32_t)QUADSPI_CCR_ADMODE_0)
   QSPI_ADDRESS_24_BITS=((uint32_t)QUADSPI_CCR_ADSIZE_1)
   QSPI_ADDRESS_2_LINES=((uint32_t)QUADSPI_CCR_ADMODE_1)
   QSPI_ADDRESS_32_BITS=((uint32_t)QUADSPI_CCR_ADSIZE)
   QSPI_ADDRESS_4_LINES=((uint32_t)QUADSPI_CCR_ADMODE)
   QSPI_ADDRESS_8_BITS=((uint32_t)0x00000000)
   QSPI_ADDRESS_NONE=((uint32_t)0x00000000)
   QSPI_ALTERNATE_BYTES_16_BITS=((uint32_t)QUADSPI_CCR_ABSIZE_0)
   QSPI_ALTERNATE_BYTES_1_LINE=((uint32_t)QUADSPI_CCR_ABMODE_0)
   QSPI_ALTERNATE_BYTES_24_BITS=((uint32_t)QUADSPI_CCR_ABSIZE_1)
   QSPI_ALTERNATE_BYTES_2_LINES=((uint32_t)QUADSPI_CCR_ABMODE_1)
   QSPI_ALTERNATE_BYTES_32_BITS=((uint32_t)QUADSPI_CCR_ABSIZE)
   QSPI_ALTERNATE_BYTES_4_LINES=((uint32_t)QUADSPI_CCR_ABMODE)
   QSPI_ALTERNATE_BYTES_8_BITS=((uint32_t)0x00000000)
   QSPI_ALTERNATE_BYTES_NONE=((uint32_t)0x00000000)
   QSPI_AUTOMATIC_STOP_DISABLE=((uint32_t)0x00000000)
   QSPI_AUTOMATIC_STOP_ENABLE=((uint32_t)QUADSPI_CR_APMS)
   QSPI_BUSY=((uint8_t)0x02)
   QSPI_CLK_DISABLE()=__HAL_RCC_QSPI_CLK_DISABLE()
   QSPI_CLK_ENABLE()=__HAL_RCC_QSPI_CLK_ENABLE()
   QSPI_CLK_GPIO_PORT=GPIOF
   QSPI_CLK_PIN=GPIO_PIN_10
   QSPI_CLOCK_MODE_0=((uint32_t)0x00000000)
   QSPI_CLOCK_MODE_3=((uint32_t)QUADSPI_DCR_CKMODE)
   QSPI_CS_GPIO_CLK_DISABLE()=__HAL_RCC_GPIOB_CLK_DISABLE()
   QSPI_CS_GPIO_CLK_ENABLE()=__HAL_RCC_GPIOB_CLK_ENABLE()
   QSPI_CS_GPIO_PORT=GPIOB
   QSPI_CS_HIGH_TIME_1_CYCLE=((uint32_t)0x00000000)
   QSPI_CS_HIGH_TIME_2_CYCLE=((uint32_t)QUADSPI_DCR_CSHT_0)
   QSPI_CS_HIGH_TIME_3_CYCLE=((uint32_t)QUADSPI_DCR_CSHT_1)
   QSPI_CS_HIGH_TIME_4_CYCLE=((uint32_t)QUADSPI_DCR_CSHT_0 | QUADSPI_DCR_CSHT_1)
   QSPI_CS_HIGH_TIME_5_CYCLE=((uint32_t)QUADSPI_DCR_CSHT_2)
   QSPI_CS_HIGH_TIME_6_CYCLE=((uint32_t)QUADSPI_DCR_CSHT_2 | QUADSPI_DCR_CSHT_0)
   QSPI_CS_HIGH_TIME_7_CYCLE=((uint32_t)QUADSPI_DCR_CSHT_2 | QUADSPI_DCR_CSHT_1)
   QSPI_CS_HIGH_TIME_8_CYCLE=((uint32_t)QUADSPI_DCR_CSHT)
   QSPI_CS_PIN=GPIO_PIN_6
   QSPI_D0_PIN=GPIO_PIN_8
   QSPI_D1_PIN=GPIO_PIN_9
   QSPI_D2_PIN=GPIO_PIN_7
   QSPI_D3_PIN=GPIO_PIN_6
   QSPI_DATA_1_LINE=((uint32_t)QUADSPI_CCR_DMODE_0)
   QSPI_DATA_2_LINES=((uint32_t)QUADSPI_CCR_DMODE_1)
   QSPI_DATA_4_LINES=((uint32_t)QUADSPI_CCR_DMODE)
   QSPI_DATA_NONE=((uint32_t)0X00000000)
   QSPI_DDR_HHC_ANALOG_DELAY=((uint32_t)0x00000000)
   QSPI_DDR_HHC_HALF_CLK_DELAY=((uint32_t)QUADSPI_CCR_DHHC)
   QSPI_DDR_MODE_DISABLE=((uint32_t)0x00000000)
   QSPI_DDR_MODE_ENABLE=((uint32_t)QUADSPI_CCR_DDRM)
   QSPI_DUALFLASH_DISABLE=((uint32_t)0x00000000)
   QSPI_DUALFLASH_ENABLE=((uint32_t)QUADSPI_CR_DFM)
   QSPI_DX_CLK_GPIO_CLK_DISABLE()=__HAL_RCC_GPIOF_CLK_DISABLE()
   QSPI_DX_CLK_GPIO_CLK_ENABLE()=__HAL_RCC_GPIOF_CLK_ENABLE()
   QSPI_DX_GPIO_PORT=GPIOF
   QSPI_ERROR=((uint8_t)0x01)
   QSPI_FLAG_BUSY=QUADSPI_SR_BUSY
   QSPI_FLAG_FT=QUADSPI_SR_FTF
   QSPI_FLAG_SM=QUADSPI_SR_SMF
   QSPI_FLAG_TC=QUADSPI_SR_TCF
   QSPI_FLAG_TE=QUADSPI_SR_TEF
   QSPI_FLAG_TO=QUADSPI_SR_TOF
   QSPI_FLASH_ID_1=((uint32_t)0x00000000)
   QSPI_FLASH_ID_2=((uint32_t)QUADSPI_CR_FSEL)
   QSPI_FORCE_RESET()=__HAL_RCC_QSPI_FORCE_RESET()
   QSPI_INSTRUCTION_1_LINE=((uint32_t)QUADSPI_CCR_IMODE_0)
   QSPI_INSTRUCTION_2_LINES=((uint32_t)QUADSPI_CCR_IMODE_1)
   QSPI_INSTRUCTION_4_LINES=((uint32_t)QUADSPI_CCR_IMODE)
   QSPI_INSTRUCTION_NONE=((uint32_t)0x00000000)
   QSPI_IT_FT=QUADSPI_CR_FTIE
   QSPI_IT_SM=QUADSPI_CR_SMIE
   QSPI_IT_TC=QUADSPI_CR_TCIE
   QSPI_IT_TE=QUADSPI_CR_TEIE
   QSPI_IT_TO=QUADSPI_CR_TOIE
   QSPI_MATCH_MODE_AND=((uint32_t)0x00000000)
   QSPI_MATCH_MODE_OR=((uint32_t)QUADSPI_CR_PMM)
   QSPI_NOT_SUPPORTED=((uint8_t)0x04)
   QSPI_OK=((uint8_t)0x00)
   QSPI_RELEASE_RESET()=__HAL_RCC_QSPI_RELEASE_RESET()
   QSPI_R_BASE=((uint32_t)0xA0001000)
   QSPI_SAMPLE_SHIFTING_HALFCYCLE=((uint32_t)QUADSPI_CR_SSHIFT)
   QSPI_SAMPLE_SHIFTING_NONE=((uint32_t)0x00000000)
   QSPI_SIOO_INST_EVERY_CMD=((uint32_t)0x00000000)
   QSPI_SIOO_INST_ONLY_FIRST_CMD=((uint32_t)QUADSPI_CCR_SIOO)
   QSPI_SUSPENDED=((uint8_t)0x08)
   QSPI_TIMEOUT_COUNTER_DISABLE=((uint32_t)0x00000000)
   QSPI_TIMEOUT_COUNTER_ENABLE=((uint32_t)QUADSPI_CR_TCEN)
   quad=quad_t
   QUADSPI=((QUADSPI_TypeDef *) QSPI_R_BASE)
   QUADSPI_ABR_ALTERNATE=((uint32_t)0xFFFFFFFF)
   QUADSPI_AR_ADDRESS=((uint32_t)0xFFFFFFFF)
   QUADSPI_CCR_ABMODE=((uint32_t)0x0000C000)
   QUADSPI_CCR_ABMODE_0=((uint32_t)0x00004000)
   QUADSPI_CCR_ABMODE_1=((uint32_t)0x00008000)
   QUADSPI_CCR_ABSIZE=((uint32_t)0x00030000)
   QUADSPI_CCR_ABSIZE_0=((uint32_t)0x00010000)
   QUADSPI_CCR_ABSIZE_1=((uint32_t)0x00020000)
   QUADSPI_CCR_ADMODE=((uint32_t)0x00000C00)
   QUADSPI_CCR_ADMODE_0=((uint32_t)0x00000400)
   QUADSPI_CCR_ADMODE_1=((uint32_t)0x00000800)
   QUADSPI_CCR_ADSIZE=((uint32_t)0x00003000)
   QUADSPI_CCR_ADSIZE_0=((uint32_t)0x00001000)
   QUADSPI_CCR_ADSIZE_1=((uint32_t)0x00002000)
   QUADSPI_CCR_DCYC=((uint32_t)0x007C0000)
   QUADSPI_CCR_DCYC_0=((uint32_t)0x00040000)
   QUADSPI_CCR_DCYC_1=((uint32_t)0x00080000)
   QUADSPI_CCR_DCYC_2=((uint32_t)0x00100000)
   QUADSPI_CCR_DCYC_3=((uint32_t)0x00200000)
   QUADSPI_CCR_DCYC_4=((uint32_t)0x00400000)
   QUADSPI_CCR_DDRM=((uint32_t)0x80000000)
   QUADSPI_CCR_DHHC=((uint32_t)0x40000000)
   QUADSPI_CCR_DMODE=((uint32_t)0x03000000)
   QUADSPI_CCR_DMODE_0=((uint32_t)0x01000000)
   QUADSPI_CCR_DMODE_1=((uint32_t)0x02000000)
   QUADSPI_CCR_FMODE=((uint32_t)0x0C000000)
   QUADSPI_CCR_FMODE_0=((uint32_t)0x04000000)
   QUADSPI_CCR_FMODE_1=((uint32_t)0x08000000)
   QUADSPI_CCR_IMODE=((uint32_t)0x00000300)
   QUADSPI_CCR_IMODE_0=((uint32_t)0x00000100)
   QUADSPI_CCR_IMODE_1=((uint32_t)0x00000200)
   QUADSPI_CCR_INSTRUCTION=((uint32_t)0x000000FF)
   QUADSPI_CCR_INSTRUCTION_0=((uint32_t)0x00000001)
   QUADSPI_CCR_INSTRUCTION_1=((uint32_t)0x00000002)
   QUADSPI_CCR_INSTRUCTION_2=((uint32_t)0x00000004)
   QUADSPI_CCR_INSTRUCTION_3=((uint32_t)0x00000008)
   QUADSPI_CCR_INSTRUCTION_4=((uint32_t)0x00000010)
   QUADSPI_CCR_INSTRUCTION_5=((uint32_t)0x00000020)
   QUADSPI_CCR_INSTRUCTION_6=((uint32_t)0x00000040)
   QUADSPI_CCR_INSTRUCTION_7=((uint32_t)0x00000080)
   QUADSPI_CCR_SIOO=((uint32_t)0x10000000)
   QUADSPI_CR_ABORT=((uint32_t)0x00000002)
   QUADSPI_CR_APMS=((uint32_t)0x00400000)
   QUADSPI_CR_DFM=((uint32_t)0x00000040)
   QUADSPI_CR_DMAEN=((uint32_t)0x00000004)
   QUADSPI_CR_EN=((uint32_t)0x00000001)
   QUADSPI_CR_FSEL=((uint32_t)0x00000080)
   QUADSPI_CR_FTHRES=((uint32_t)0x00000F00)
   QUADSPI_CR_FTHRES_0=((uint32_t)0x00000100)
   QUADSPI_CR_FTHRES_1=((uint32_t)0x00000200)
   QUADSPI_CR_FTHRES_2=((uint32_t)0x00000400)
   QUADSPI_CR_FTHRES_3=((uint32_t)0x00000800)
   QUADSPI_CR_FTIE=((uint32_t)0x00040000)
   QUADSPI_CR_PMM=((uint32_t)0x00800000)
   QUADSPI_CR_PRESCALER=((uint32_t)0xFF000000)
   QUADSPI_CR_PRESCALER_0=((uint32_t)0x01000000)
   QUADSPI_CR_PRESCALER_1=((uint32_t)0x02000000)
   QUADSPI_CR_PRESCALER_2=((uint32_t)0x04000000)
   QUADSPI_CR_PRESCALER_3=((uint32_t)0x08000000)
   QUADSPI_CR_PRESCALER_4=((uint32_t)0x10000000)
   QUADSPI_CR_PRESCALER_5=((uint32_t)0x20000000)
   QUADSPI_CR_PRESCALER_6=((uint32_t)0x40000000)
   QUADSPI_CR_PRESCALER_7=((uint32_t)0x80000000)
   QUADSPI_CR_SMIE=((uint32_t)0x00080000)
   QUADSPI_CR_SSHIFT=((uint32_t)0x00000010)
   QUADSPI_CR_TCEN=((uint32_t)0x00000008)
   QUADSPI_CR_TCIE=((uint32_t)0x00020000)
   QUADSPI_CR_TEIE=((uint32_t)0x00010000)
   QUADSPI_CR_TOIE=((uint32_t)0x00100000)
   QUADSPI_DCR_CKMODE=((uint32_t)0x00000001)
   QUADSPI_DCR_CSHT=((uint32_t)0x00000700)
   QUADSPI_DCR_CSHT_0=((uint32_t)0x00000100)
   QUADSPI_DCR_CSHT_1=((uint32_t)0x00000200)
   QUADSPI_DCR_CSHT_2=((uint32_t)0x00000400)
   QUADSPI_DCR_FSIZE=((uint32_t)0x001F0000)
   QUADSPI_DCR_FSIZE_0=((uint32_t)0x00010000)
   QUADSPI_DCR_FSIZE_1=((uint32_t)0x00020000)
   QUADSPI_DCR_FSIZE_2=((uint32_t)0x00040000)
   QUADSPI_DCR_FSIZE_3=((uint32_t)0x00080000)
   QUADSPI_DCR_FSIZE_4=((uint32_t)0x00100000)
   QUADSPI_DLR_DL=((uint32_t)0xFFFFFFFF)
   QUADSPI_DR_DATA=((uint32_t)0xFFFFFFFF)
   QUADSPI_FCR_CSMF=((uint32_t)0x00000008)
   QUADSPI_FCR_CTCF=((uint32_t)0x00000002)
   QUADSPI_FCR_CTEF=((uint32_t)0x00000001)
   QUADSPI_FCR_CTOF=((uint32_t)0x00000010)
   QUADSPI_LPTR_TIMEOUT=((uint32_t)0x0000FFFF)
   QUADSPI_PIR_INTERVAL=((uint32_t)0x0000FFFF)
   QUADSPI_PSMAR_MATCH=((uint32_t)0xFFFFFFFF)
   QUADSPI_PSMKR_MASK=((uint32_t)0xFFFFFFFF)
   QUADSPI_SR_BUSY=((uint32_t)0x00000020)
   QUADSPI_SR_FLEVEL=((uint32_t)0x00003F00)
   QUADSPI_SR_FLEVEL_0=((uint32_t)0x00000100)
   QUADSPI_SR_FLEVEL_1=((uint32_t)0x00000200)
   QUADSPI_SR_FLEVEL_2=((uint32_t)0x00000400)
   QUADSPI_SR_FLEVEL_3=((uint32_t)0x00000800)
   QUADSPI_SR_FLEVEL_4=((uint32_t)0x00001000)
   QUADSPI_SR_FLEVEL_5=((uint32_t)0x00002000)
   QUADSPI_SR_FTF=((uint32_t)0x00000004)
   QUADSPI_SR_SMF=((uint32_t)0x00000008)
   QUADSPI_SR_TCF=((uint32_t)0x00000002)
   QUADSPI_SR_TEF=((uint32_t)0x00000001)
   QUADSPI_SR_TOF=((uint32_t)0x00000010)
   QUAD_INOUT_FAST_READ_CMD=0xEB
   QUAD_IN_FAST_PROG_CMD=0x32
   QUAD_OUT_FAST_READ_CMD=0x6B
   RAND_MAX=__RAND_MAX
   RCC=((RCC_TypeDef *) RCC_BASE)
   RCC_AHB1ENR_BKPSRAMEN=((uint32_t)0x00040000)
   RCC_AHB1ENR_CCMDATARAMEN=((uint32_t)0x00100000)
   RCC_AHB1ENR_CRCEN=((uint32_t)0x00001000)
   RCC_AHB1ENR_DMA1EN=((uint32_t)0x00200000)
   RCC_AHB1ENR_DMA2DEN=((uint32_t)0x00800000)
   RCC_AHB1ENR_DMA2EN=((uint32_t)0x00400000)
   RCC_AHB1ENR_ETHMACEN=((uint32_t)0x02000000)
   RCC_AHB1ENR_ETHMACPTPEN=((uint32_t)0x10000000)
   RCC_AHB1ENR_ETHMACRXEN=((uint32_t)0x08000000)
   RCC_AHB1ENR_ETHMACTXEN=((uint32_t)0x04000000)
   RCC_AHB1ENR_GPIOAEN=((uint32_t)0x00000001)
   RCC_AHB1ENR_GPIOBEN=((uint32_t)0x00000002)
   RCC_AHB1ENR_GPIOCEN=((uint32_t)0x00000004)
   RCC_AHB1ENR_GPIODEN=((uint32_t)0x00000008)
   RCC_AHB1ENR_GPIOEEN=((uint32_t)0x00000010)
   RCC_AHB1ENR_GPIOFEN=((uint32_t)0x00000020)
   RCC_AHB1ENR_GPIOGEN=((uint32_t)0x00000040)
   RCC_AHB1ENR_GPIOHEN=((uint32_t)0x00000080)
   RCC_AHB1ENR_GPIOIEN=((uint32_t)0x00000100)
   RCC_AHB1ENR_GPIOJEN=((uint32_t)0x00000200)
   RCC_AHB1ENR_GPIOKEN=((uint32_t)0x00000400)
   RCC_AHB1ENR_OTGHSEN=((uint32_t)0x20000000)
   RCC_AHB1ENR_OTGHSULPIEN=((uint32_t)0x40000000)
   RCC_AHB1LPENR_BKPSRAMLPEN=((uint32_t)0x00040000)
   RCC_AHB1LPENR_CRCLPEN=((uint32_t)0x00001000)
   RCC_AHB1LPENR_DMA1LPEN=((uint32_t)0x00200000)
   RCC_AHB1LPENR_DMA2DLPEN=((uint32_t)0x00800000)
   RCC_AHB1LPENR_DMA2LPEN=((uint32_t)0x00400000)
   RCC_AHB1LPENR_ETHMACLPEN=((uint32_t)0x02000000)
   RCC_AHB1LPENR_ETHMACPTPLPEN=((uint32_t)0x10000000)
   RCC_AHB1LPENR_ETHMACRXLPEN=((uint32_t)0x08000000)
   RCC_AHB1LPENR_ETHMACTXLPEN=((uint32_t)0x04000000)
   RCC_AHB1LPENR_FLITFLPEN=((uint32_t)0x00008000)
   RCC_AHB1LPENR_GPIOALPEN=((uint32_t)0x00000001)
   RCC_AHB1LPENR_GPIOBLPEN=((uint32_t)0x00000002)
   RCC_AHB1LPENR_GPIOCLPEN=((uint32_t)0x00000004)
   RCC_AHB1LPENR_GPIODLPEN=((uint32_t)0x00000008)
   RCC_AHB1LPENR_GPIOELPEN=((uint32_t)0x00000010)
   RCC_AHB1LPENR_GPIOFLPEN=((uint32_t)0x00000020)
   RCC_AHB1LPENR_GPIOGLPEN=((uint32_t)0x00000040)
   RCC_AHB1LPENR_GPIOHLPEN=((uint32_t)0x00000080)
   RCC_AHB1LPENR_GPIOILPEN=((uint32_t)0x00000100)
   RCC_AHB1LPENR_GPIOJLPEN=((uint32_t)0x00000200)
   RCC_AHB1LPENR_GPIOKLPEN=((uint32_t)0x00000400)
   RCC_AHB1LPENR_OTGHSLPEN=((uint32_t)0x20000000)
   RCC_AHB1LPENR_OTGHSULPILPEN=((uint32_t)0x40000000)
   RCC_AHB1LPENR_SRAM1LPEN=((uint32_t)0x00010000)
   RCC_AHB1LPENR_SRAM2LPEN=((uint32_t)0x00020000)
   RCC_AHB1LPENR_SRAM3LPEN=((uint32_t)0x00080000)
   RCC_AHB1RSTR_CRCRST=((uint32_t)0x00001000)
   RCC_AHB1RSTR_DMA1RST=((uint32_t)0x00200000)
   RCC_AHB1RSTR_DMA2DRST=((uint32_t)0x00800000)
   RCC_AHB1RSTR_DMA2RST=((uint32_t)0x00400000)
   RCC_AHB1RSTR_ETHMACRST=((uint32_t)0x02000000)
   RCC_AHB1RSTR_GPIOARST=((uint32_t)0x00000001)
   RCC_AHB1RSTR_GPIOBRST=((uint32_t)0x00000002)
   RCC_AHB1RSTR_GPIOCRST=((uint32_t)0x00000004)
   RCC_AHB1RSTR_GPIODRST=((uint32_t)0x00000008)
   RCC_AHB1RSTR_GPIOERST=((uint32_t)0x00000010)
   RCC_AHB1RSTR_GPIOFRST=((uint32_t)0x00000020)
   RCC_AHB1RSTR_GPIOGRST=((uint32_t)0x00000040)
   RCC_AHB1RSTR_GPIOHRST=((uint32_t)0x00000080)
   RCC_AHB1RSTR_GPIOIRST=((uint32_t)0x00000100)
   RCC_AHB1RSTR_GPIOJRST=((uint32_t)0x00000200)
   RCC_AHB1RSTR_GPIOKRST=((uint32_t)0x00000400)
   RCC_AHB1RSTR_OTGHRST=((uint32_t)0x20000000)
   RCC_AHB2ENR_DCMIEN=((uint32_t)0x00000001)
   RCC_AHB2ENR_OTGFSEN=((uint32_t)0x00000080)
   RCC_AHB2ENR_RNGEN=((uint32_t)0x00000040)
   RCC_AHB2LPENR_DCMILPEN=((uint32_t)0x00000001)
   RCC_AHB2LPENR_OTGFSLPEN=((uint32_t)0x00000080)
   RCC_AHB2LPENR_RNGLPEN=((uint32_t)0x00000040)
   RCC_AHB2RSTR_DCMIRST=((uint32_t)0x00000001)
   RCC_AHB2RSTR_OTGFSRST=((uint32_t)0x00000080)
   RCC_AHB2RSTR_RNGRST=((uint32_t)0x00000040)
   RCC_AHB3ENR_FMCEN=((uint32_t)0x00000001)
   RCC_AHB3ENR_QSPIEN=((uint32_t)0x00000002)
   RCC_AHB3LPENR_FMCLPEN=((uint32_t)0x00000001)
   RCC_AHB3LPENR_QSPILPEN=((uint32_t)0x00000002)
   RCC_AHB3RSTR_FMCRST=((uint32_t)0x00000001)
   RCC_AHB3RSTR_QSPIRST=((uint32_t)0x00000002)
   RCC_APB1ENR_CAN1EN=((uint32_t)0x02000000)
   RCC_APB1ENR_CAN2EN=((uint32_t)0x04000000)
   RCC_APB1ENR_DACEN=((uint32_t)0x20000000)
   RCC_APB1ENR_I2C1EN=((uint32_t)0x00200000)
   RCC_APB1ENR_I2C2EN=((uint32_t)0x00400000)
   RCC_APB1ENR_I2C3EN=((uint32_t)0x00800000)
   RCC_APB1ENR_PWREN=((uint32_t)0x10000000)
   RCC_APB1ENR_SPI2EN=((uint32_t)0x00004000)
   RCC_APB1ENR_SPI3EN=((uint32_t)0x00008000)
   RCC_APB1ENR_TIM12EN=((uint32_t)0x00000040)
   RCC_APB1ENR_TIM13EN=((uint32_t)0x00000080)
   RCC_APB1ENR_TIM14EN=((uint32_t)0x00000100)
   RCC_APB1ENR_TIM2EN=((uint32_t)0x00000001)
   RCC_APB1ENR_TIM3EN=((uint32_t)0x00000002)
   RCC_APB1ENR_TIM4EN=((uint32_t)0x00000004)
   RCC_APB1ENR_TIM5EN=((uint32_t)0x00000008)
   RCC_APB1ENR_TIM6EN=((uint32_t)0x00000010)
   RCC_APB1ENR_TIM7EN=((uint32_t)0x00000020)
   RCC_APB1ENR_UART4EN=((uint32_t)0x00080000)
   RCC_APB1ENR_UART5EN=((uint32_t)0x00100000)
   RCC_APB1ENR_UART7EN=((uint32_t)0x40000000)
   RCC_APB1ENR_UART8EN=((uint32_t)0x80000000)
   RCC_APB1ENR_USART2EN=((uint32_t)0x00020000)
   RCC_APB1ENR_USART3EN=((uint32_t)0x00040000)
   RCC_APB1ENR_WWDGEN=((uint32_t)0x00000800)
   RCC_APB1LPENR_CAN1LPEN=((uint32_t)0x02000000)
   RCC_APB1LPENR_CAN2LPEN=((uint32_t)0x04000000)
   RCC_APB1LPENR_DACLPEN=((uint32_t)0x20000000)
   RCC_APB1LPENR_I2C1LPEN=((uint32_t)0x00200000)
   RCC_APB1LPENR_I2C2LPEN=((uint32_t)0x00400000)
   RCC_APB1LPENR_I2C3LPEN=((uint32_t)0x00800000)
   RCC_APB1LPENR_PWRLPEN=((uint32_t)0x10000000)
   RCC_APB1LPENR_SPI2LPEN=((uint32_t)0x00004000)
   RCC_APB1LPENR_SPI3LPEN=((uint32_t)0x00008000)
   RCC_APB1LPENR_TIM12LPEN=((uint32_t)0x00000040)
   RCC_APB1LPENR_TIM13LPEN=((uint32_t)0x00000080)
   RCC_APB1LPENR_TIM14LPEN=((uint32_t)0x00000100)
   RCC_APB1LPENR_TIM2LPEN=((uint32_t)0x00000001)
   RCC_APB1LPENR_TIM3LPEN=((uint32_t)0x00000002)
   RCC_APB1LPENR_TIM4LPEN=((uint32_t)0x00000004)
   RCC_APB1LPENR_TIM5LPEN=((uint32_t)0x00000008)
   RCC_APB1LPENR_TIM6LPEN=((uint32_t)0x00000010)
   RCC_APB1LPENR_TIM7LPEN=((uint32_t)0x00000020)
   RCC_APB1LPENR_UART4LPEN=((uint32_t)0x00080000)
   RCC_APB1LPENR_UART5LPEN=((uint32_t)0x00100000)
   RCC_APB1LPENR_UART7LPEN=((uint32_t)0x40000000)
   RCC_APB1LPENR_UART8LPEN=((uint32_t)0x80000000)
   RCC_APB1LPENR_USART2LPEN=((uint32_t)0x00020000)
   RCC_APB1LPENR_USART3LPEN=((uint32_t)0x00040000)
   RCC_APB1LPENR_WWDGLPEN=((uint32_t)0x00000800)
   RCC_APB1RSTR_CAN1RST=((uint32_t)0x02000000)
   RCC_APB1RSTR_CAN2RST=((uint32_t)0x04000000)
   RCC_APB1RSTR_DACRST=((uint32_t)0x20000000)
   RCC_APB1RSTR_I2C1RST=((uint32_t)0x00200000)
   RCC_APB1RSTR_I2C2RST=((uint32_t)0x00400000)
   RCC_APB1RSTR_I2C3RST=((uint32_t)0x00800000)
   RCC_APB1RSTR_PWRRST=((uint32_t)0x10000000)
   RCC_APB1RSTR_SPI2RST=((uint32_t)0x00004000)
   RCC_APB1RSTR_SPI3RST=((uint32_t)0x00008000)
   RCC_APB1RSTR_TIM12RST=((uint32_t)0x00000040)
   RCC_APB1RSTR_TIM13RST=((uint32_t)0x00000080)
   RCC_APB1RSTR_TIM14RST=((uint32_t)0x00000100)
   RCC_APB1RSTR_TIM2RST=((uint32_t)0x00000001)
   RCC_APB1RSTR_TIM3RST=((uint32_t)0x00000002)
   RCC_APB1RSTR_TIM4RST=((uint32_t)0x00000004)
   RCC_APB1RSTR_TIM5RST=((uint32_t)0x00000008)
   RCC_APB1RSTR_TIM6RST=((uint32_t)0x00000010)
   RCC_APB1RSTR_TIM7RST=((uint32_t)0x00000020)
   RCC_APB1RSTR_UART4RST=((uint32_t)0x00080000)
   RCC_APB1RSTR_UART5RST=((uint32_t)0x00100000)
   RCC_APB1RSTR_UART7RST=((uint32_t)0x40000000)
   RCC_APB1RSTR_UART8RST=((uint32_t)0x80000000)
   RCC_APB1RSTR_USART2RST=((uint32_t)0x00020000)
   RCC_APB1RSTR_USART3RST=((uint32_t)0x00040000)
   RCC_APB1RSTR_WWDGRST=((uint32_t)0x00000800)
   RCC_APB2ENR_ADC1EN=((uint32_t)0x00000100)
   RCC_APB2ENR_ADC2EN=((uint32_t)0x00000200)
   RCC_APB2ENR_ADC3EN=((uint32_t)0x00000400)
   RCC_APB2ENR_DSIEN=((uint32_t)0x08000000)
   RCC_APB2ENR_LTDCEN=((uint32_t)0x04000000)
   RCC_APB2ENR_SAI1EN=((uint32_t)0x00400000)
   RCC_APB2ENR_SDIOEN=((uint32_t)0x00000800)
   RCC_APB2ENR_SPI1EN=((uint32_t)0x00001000)
   RCC_APB2ENR_SPI4EN=((uint32_t)0x00002000)
   RCC_APB2ENR_SPI5EN=((uint32_t)0x00100000)
   RCC_APB2ENR_SPI6EN=((uint32_t)0x00200000)
   RCC_APB2ENR_SYSCFGEN=((uint32_t)0x00004000)
   RCC_APB2ENR_TIM10EN=((uint32_t)0x00020000)
   RCC_APB2ENR_TIM11EN=((uint32_t)0x00040000)
   RCC_APB2ENR_TIM1EN=((uint32_t)0x00000001)
   RCC_APB2ENR_TIM8EN=((uint32_t)0x00000002)
   RCC_APB2ENR_TIM9EN=((uint32_t)0x00010000)
   RCC_APB2ENR_USART1EN=((uint32_t)0x00000010)
   RCC_APB2ENR_USART6EN=((uint32_t)0x00000020)
   RCC_APB2LPENR_ADC1LPEN=((uint32_t)0x00000100)
   RCC_APB2LPENR_ADC2LPEN=((uint32_t)0x00000200)
   RCC_APB2LPENR_ADC3LPEN=((uint32_t)0x00000400)
   RCC_APB2LPENR_DSILPEN=((uint32_t)0x08000000)
   RCC_APB2LPENR_LTDCLPEN=((uint32_t)0x04000000)
   RCC_APB2LPENR_SAI1LPEN=((uint32_t)0x00400000)
   RCC_APB2LPENR_SDIOLPEN=((uint32_t)0x00000800)
   RCC_APB2LPENR_SPI1LPEN=((uint32_t)0x00001000)
   RCC_APB2LPENR_SPI4LPEN=((uint32_t)0x00002000)
   RCC_APB2LPENR_SPI5LPEN=((uint32_t)0x00100000)
   RCC_APB2LPENR_SPI6LPEN=((uint32_t)0x00200000)
   RCC_APB2LPENR_SYSCFGLPEN=((uint32_t)0x00004000)
   RCC_APB2LPENR_TIM10LPEN=((uint32_t)0x00020000)
   RCC_APB2LPENR_TIM11LPEN=((uint32_t)0x00040000)
   RCC_APB2LPENR_TIM1LPEN=((uint32_t)0x00000001)
   RCC_APB2LPENR_TIM8LPEN=((uint32_t)0x00000002)
   RCC_APB2LPENR_TIM9LPEN=((uint32_t)0x00010000)
   RCC_APB2LPENR_USART1LPEN=((uint32_t)0x00000010)
   RCC_APB2LPENR_USART6LPEN=((uint32_t)0x00000020)
   RCC_APB2RSTR_ADCRST=((uint32_t)0x00000100)
   RCC_APB2RSTR_DSIRST=((uint32_t)0x08000000)
   RCC_APB2RSTR_LTDCRST=((uint32_t)0x04000000)
   RCC_APB2RSTR_SAI1RST=((uint32_t)0x00400000)
   RCC_APB2RSTR_SDIORST=((uint32_t)0x00000800)
   RCC_APB2RSTR_SPI1=RCC_APB2RSTR_SPI1RST
   RCC_APB2RSTR_SPI1RST=((uint32_t)0x00001000)
   RCC_APB2RSTR_SPI4RST=((uint32_t)0x00002000)
   RCC_APB2RSTR_SPI5RST=((uint32_t)0x00100000)
   RCC_APB2RSTR_SPI6RST=((uint32_t)0x00200000)
   RCC_APB2RSTR_SYSCFGRST=((uint32_t)0x00004000)
   RCC_APB2RSTR_TIM10RST=((uint32_t)0x00020000)
   RCC_APB2RSTR_TIM11RST=((uint32_t)0x00040000)
   RCC_APB2RSTR_TIM1RST=((uint32_t)0x00000001)
   RCC_APB2RSTR_TIM8RST=((uint32_t)0x00000002)
   RCC_APB2RSTR_TIM9RST=((uint32_t)0x00010000)
   RCC_APB2RSTR_USART1RST=((uint32_t)0x00000010)
   RCC_APB2RSTR_USART6RST=((uint32_t)0x00000020)
   RCC_BASE=(AHB1PERIPH_BASE + 0x3800)
   RCC_BDCR_BDRST=((uint32_t)0x00010000)
   RCC_BDCR_BDRST_BB=(PERIPH_BB_BASE + (RCC_BDCR_OFFSET * 32) + (RCC_BDRST_BIT_NUMBER * 4))
   RCC_BDCR_BYTE0_ADDRESS=(PERIPH_BASE + RCC_BDCR_OFFSET)
   RCC_BDCR_LSEBYP=((uint32_t)0x00000004)
   RCC_BDCR_LSEMOD=((uint32_t)0x00000008)
   RCC_BDCR_LSEON=((uint32_t)0x00000001)
   RCC_BDCR_LSERDY=((uint32_t)0x00000002)
   RCC_BDCR_OFFSET=(RCC_OFFSET + 0x70)
   RCC_BDCR_RTCEN=((uint32_t)0x00008000)
   RCC_BDCR_RTCEN_BB=(PERIPH_BB_BASE + (RCC_BDCR_OFFSET * 32) + (RCC_RTCEN_BIT_NUMBER * 4))
   RCC_BDCR_RTCSEL=((uint32_t)0x00000300)
   RCC_BDCR_RTCSEL_0=((uint32_t)0x00000100)
   RCC_BDCR_RTCSEL_1=((uint32_t)0x00000200)
   RCC_BDRST_BIT_NUMBER=0x10
   RCC_CFGR_HPRE=((uint32_t)0x000000F0)
   RCC_CFGR_HPRE_0=((uint32_t)0x00000010)
   RCC_CFGR_HPRE_1=((uint32_t)0x00000020)
   RCC_CFGR_HPRE_2=((uint32_t)0x00000040)
   RCC_CFGR_HPRE_3=((uint32_t)0x00000080)
   RCC_CFGR_HPRE_DIV128=((uint32_t)0x000000D0)
   RCC_CFGR_HPRE_DIV16=((uint32_t)0x000000B0)
   RCC_CFGR_HPRE_DIV1=((uint32_t)0x00000000)
   RCC_CFGR_HPRE_DIV256=((uint32_t)0x000000E0)
   RCC_CFGR_HPRE_DIV2=((uint32_t)0x00000080)
   RCC_CFGR_HPRE_DIV4=((uint32_t)0x00000090)
   RCC_CFGR_HPRE_DIV512=((uint32_t)0x000000F0)
   RCC_CFGR_HPRE_DIV64=((uint32_t)0x000000C0)
   RCC_CFGR_HPRE_DIV8=((uint32_t)0x000000A0)
   RCC_CFGR_I2SSRC=((uint32_t)0x00800000)
   RCC_CFGR_I2SSRC_BB=(PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_I2SSRC_BIT_NUMBER * 4))
   RCC_CFGR_MCO1=((uint32_t)0x00600000)
   RCC_CFGR_MCO1PRE=((uint32_t)0x07000000)
   RCC_CFGR_MCO1PRE_0=((uint32_t)0x01000000)
   RCC_CFGR_MCO1PRE_1=((uint32_t)0x02000000)
   RCC_CFGR_MCO1PRE_2=((uint32_t)0x04000000)
   RCC_CFGR_MCO1_0=((uint32_t)0x00200000)
   RCC_CFGR_MCO1_1=((uint32_t)0x00400000)
   RCC_CFGR_MCO2=((uint32_t)0xC0000000)
   RCC_CFGR_MCO2PRE=((uint32_t)0x38000000)
   RCC_CFGR_MCO2PRE_0=((uint32_t)0x08000000)
   RCC_CFGR_MCO2PRE_1=((uint32_t)0x10000000)
   RCC_CFGR_MCO2PRE_2=((uint32_t)0x20000000)
   RCC_CFGR_MCO2_0=((uint32_t)0x40000000)
   RCC_CFGR_MCO2_1=((uint32_t)0x80000000)
   RCC_CFGR_OFFSET=(RCC_OFFSET + 0x08)
   RCC_CFGR_PPRE1=((uint32_t)0x00001C00)
   RCC_CFGR_PPRE1_0=((uint32_t)0x00000400)
   RCC_CFGR_PPRE1_1=((uint32_t)0x00000800)
   RCC_CFGR_PPRE1_2=((uint32_t)0x00001000)
   RCC_CFGR_PPRE1_DIV16=((uint32_t)0x00001C00)
   RCC_CFGR_PPRE1_DIV1=((uint32_t)0x00000000)
   RCC_CFGR_PPRE1_DIV2=((uint32_t)0x00001000)
   RCC_CFGR_PPRE1_DIV4=((uint32_t)0x00001400)
   RCC_CFGR_PPRE1_DIV8=((uint32_t)0x00001800)
   RCC_CFGR_PPRE2=((uint32_t)0x0000E000)
   RCC_CFGR_PPRE2_0=((uint32_t)0x00002000)
   RCC_CFGR_PPRE2_1=((uint32_t)0x00004000)
   RCC_CFGR_PPRE2_2=((uint32_t)0x00008000)
   RCC_CFGR_PPRE2_DIV16=((uint32_t)0x0000E000)
   RCC_CFGR_PPRE2_DIV1=((uint32_t)0x00000000)
   RCC_CFGR_PPRE2_DIV2=((uint32_t)0x00008000)
   RCC_CFGR_PPRE2_DIV4=((uint32_t)0x0000A000)
   RCC_CFGR_PPRE2_DIV8=((uint32_t)0x0000C000)
   RCC_CFGR_RTCPRE=((uint32_t)0x001F0000)
   RCC_CFGR_RTCPRE_0=((uint32_t)0x00010000)
   RCC_CFGR_RTCPRE_1=((uint32_t)0x00020000)
   RCC_CFGR_RTCPRE_2=((uint32_t)0x00040000)
   RCC_CFGR_RTCPRE_3=((uint32_t)0x00080000)
   RCC_CFGR_RTCPRE_4=((uint32_t)0x00100000)
   RCC_CFGR_SW=((uint32_t)0x00000003)
   RCC_CFGR_SWS=((uint32_t)0x0000000C)
   RCC_CFGR_SWS_0=((uint32_t)0x00000004)
   RCC_CFGR_SWS_1=((uint32_t)0x00000008)
   RCC_CFGR_SWS_HSE=((uint32_t)0x00000004)
   RCC_CFGR_SWS_HSI=((uint32_t)0x00000000)
   RCC_CFGR_SWS_PLL=((uint32_t)0x00000008)
   RCC_CFGR_SW_0=((uint32_t)0x00000001)
   RCC_CFGR_SW_1=((uint32_t)0x00000002)
   RCC_CFGR_SW_HSE=((uint32_t)0x00000001)
   RCC_CFGR_SW_HSI=((uint32_t)0x00000000)
   RCC_CFGR_SW_PLL=((uint32_t)0x00000002)
   RCC_CIR_BYTE1_ADDRESS=((uint32_t)(RCC_BASE + 0x0C + 0x01))
   RCC_CIR_BYTE2_ADDRESS=((uint32_t)(RCC_BASE + 0x0C + 0x02))
   RCC_CIR_CSSC=((uint32_t)0x00800000)
   RCC_CIR_CSSF=((uint32_t)0x00000080)
   RCC_CIR_HSERDYC=((uint32_t)0x00080000)
   RCC_CIR_HSERDYF=((uint32_t)0x00000008)
   RCC_CIR_HSERDYIE=((uint32_t)0x00000800)
   RCC_CIR_HSIRDYC=((uint32_t)0x00040000)
   RCC_CIR_HSIRDYF=((uint32_t)0x00000004)
   RCC_CIR_HSIRDYIE=((uint32_t)0x00000400)
   RCC_CIR_LSERDYC=((uint32_t)0x00020000)
   RCC_CIR_LSERDYF=((uint32_t)0x00000002)
   RCC_CIR_LSERDYIE=((uint32_t)0x00000200)
   RCC_CIR_LSIRDYC=((uint32_t)0x00010000)
   RCC_CIR_LSIRDYF=((uint32_t)0x00000001)
   RCC_CIR_LSIRDYIE=((uint32_t)0x00000100)
   RCC_CIR_PLLI2SRDYC=((uint32_t)0x00200000)
   RCC_CIR_PLLI2SRDYF=((uint32_t)0x00000020)
   RCC_CIR_PLLI2SRDYIE=((uint32_t)0x00002000)
   RCC_CIR_PLLRDYC=((uint32_t)0x00100000)
   RCC_CIR_PLLRDYF=((uint32_t)0x00000010)
   RCC_CIR_PLLRDYIE=((uint32_t)0x00001000)
   RCC_CIR_PLLSAIRDYC=((uint32_t)0x00400000)
   RCC_CIR_PLLSAIRDYF=((uint32_t)0x00000040)
   RCC_CIR_PLLSAIRDYIE=((uint32_t)0x00004000)
   RCC_CK48CLKSOURCE_PLLQ=((uint32_t)0x00000000)
   RCC_CK48CLKSOURCE_PLLSAIP=((uint32_t)RCC_DCKCFGR_CK48MSEL)
   RCC_CLOCKTYPE_HCLK=((uint32_t)0x00000002)
   RCC_CLOCKTYPE_PCLK1=((uint32_t)0x00000004)
   RCC_CLOCKTYPE_PCLK2=((uint32_t)0x00000008)
   RCC_CLOCKTYPE_SYSCLK=((uint32_t)0x00000001)
   RCC_CR2_HSI14TRIM_BitNumber=RCC_HSI14TRIM_BIT_NUMBER
   RCC_CR_BYTE2_ADDRESS=((uint32_t)0x40023802)
   RCC_CR_CSSON=((uint32_t)0x00080000)
   RCC_CR_CSSON_BB=(PERIPH_BB_BASE + (RCC_CR_OFFSET * 32) + (RCC_CSSON_BIT_NUMBER * 4))
   RCC_CR_HSEBYP=((uint32_t)0x00040000)
   RCC_CR_HSEON=((uint32_t)0x00010000)
   RCC_CR_HSERDY=((uint32_t)0x00020000)
   RCC_CR_HSICAL=((uint32_t)0x0000FF00)
   RCC_CR_HSICAL_0=((uint32_t)0x00000100)
   RCC_CR_HSICAL_1=((uint32_t)0x00000200)
   RCC_CR_HSICAL_2=((uint32_t)0x00000400)
   RCC_CR_HSICAL_3=((uint32_t)0x00000800)
   RCC_CR_HSICAL_4=((uint32_t)0x00001000)
   RCC_CR_HSICAL_5=((uint32_t)0x00002000)
   RCC_CR_HSICAL_6=((uint32_t)0x00004000)
   RCC_CR_HSICAL_7=((uint32_t)0x00008000)
   RCC_CR_HSION=((uint32_t)0x00000001)
   RCC_CR_HSION_BB=(PERIPH_BB_BASE + (RCC_CR_OFFSET * 32) + (RCC_HSION_BIT_NUMBER * 4))
   RCC_CR_HSIRDY=((uint32_t)0x00000002)
   RCC_CR_HSITRIM=((uint32_t)0x000000F8)
   RCC_CR_HSITRIM_0=((uint32_t)0x00000008)
   RCC_CR_HSITRIM_1=((uint32_t)0x00000010)
   RCC_CR_HSITRIM_2=((uint32_t)0x00000020)
   RCC_CR_HSITRIM_3=((uint32_t)0x00000040)
   RCC_CR_HSITRIM_4=((uint32_t)0x00000080)
   RCC_CR_OFFSET=(RCC_OFFSET + 0x00)
   RCC_CR_PLLI2SON=((uint32_t)0x04000000)
   RCC_CR_PLLI2SON_BB=(PERIPH_BB_BASE + (RCC_CR_OFFSET * 32) + (RCC_PLLI2SON_BIT_NUMBER * 4))
   RCC_CR_PLLI2SRDY=((uint32_t)0x08000000)
   RCC_CR_PLLON=((uint32_t)0x01000000)
   RCC_CR_PLLON_BB=(PERIPH_BB_BASE + (RCC_CR_OFFSET * 32) + (RCC_PLLON_BIT_NUMBER * 4))
   RCC_CR_PLLRDY=((uint32_t)0x02000000)
   RCC_CR_PLLSAION=((uint32_t)0x10000000)
   RCC_CR_PLLSAION_BB=(PERIPH_BB_BASE + (RCC_CR_OFFSET * 32) + (RCC_PLLSAION_BIT_NUMBER * 4))
   RCC_CR_PLLSAIRDY=((uint32_t)0x20000000)
   RCC_CSR_BORRSTF=((uint32_t)0x02000000)
   RCC_CSR_LPWRRSTF=((uint32_t)0x80000000)
   RCC_CSR_LSION=((uint32_t)0x00000001)
   RCC_CSR_LSION_BB=(PERIPH_BB_BASE + (RCC_CSR_OFFSET * 32) + (RCC_LSION_BIT_NUMBER * 4))
   RCC_CSR_LSIRDY=((uint32_t)0x00000002)
   RCC_CSR_OFFSET=(RCC_OFFSET + 0x74)
   RCC_CSR_PADRSTF=((uint32_t)0x04000000)
   RCC_CSR_PORRSTF=((uint32_t)0x08000000)
   RCC_CSR_RMVF=((uint32_t)0x01000000)
   RCC_CSR_SFTRSTF=((uint32_t)0x10000000)
   RCC_CSR_WDGRSTF=((uint32_t)0x20000000)
   RCC_CSR_WWDGRSTF=((uint32_t)0x40000000)
   RCC_CSSON_BIT_NUMBER=0x13
   RCC_DBP_TIMEOUT_VALUE=((uint32_t)100)
   RCC_DCKCFGR_CK48MSEL=((uint32_t)0x08000000)
   RCC_DCKCFGR_DSISEL=((uint32_t)0x20000000)
   RCC_DCKCFGR_OFFSET=(RCC_OFFSET + 0x8C)
   RCC_DCKCFGR_PLLI2SDIVQ=((uint32_t)0x0000001F)
   RCC_DCKCFGR_PLLSAIDIVQ=((uint32_t)0x00001F00)
   RCC_DCKCFGR_PLLSAIDIVR=((uint32_t)0x00030000)
   RCC_DCKCFGR_SAI1ASRC=((uint32_t)0x00300000)
   RCC_DCKCFGR_SAI1ASRC_0=((uint32_t)0x00100000)
   RCC_DCKCFGR_SAI1ASRC_1=((uint32_t)0x00200000)
   RCC_DCKCFGR_SAI1BSRC=((uint32_t)0x00C00000)
   RCC_DCKCFGR_SAI1BSRC_0=((uint32_t)0x00400000)
   RCC_DCKCFGR_SAI1BSRC_1=((uint32_t)0x00800000)
   RCC_DCKCFGR_SDIOSEL=((uint32_t)0x10000000)
   RCC_DCKCFGR_TIMPRE=((uint32_t)0x01000000)
   RCC_DCKCFGR_TIMPRE_BB=(PERIPH_BB_BASE + (RCC_DCKCFGR_OFFSET * 32) + (RCC_TIMPRE_BIT_NUMBER * 4))
   RCC_DSICLKSOURCE_DSIPHY=((uint32_t)0x00000000)
   RCC_DSICLKSOURCE_PLLR=((uint32_t)RCC_DCKCFGR_DSISEL)
   RCC_FLAG_BORRST=((uint8_t)0x79)
   RCC_FLAG_HSERDY=((uint8_t)0x31)
   RCC_FLAG_HSIRDY=((uint8_t)0x21)
   RCC_FLAG_IWDGRST=((uint8_t)0x7D)
   RCC_FLAG_LPWRRST=((uint8_t)0x7F)
   RCC_FLAG_LSERDY=((uint8_t)0x41)
   RCC_FLAG_LSIRDY=((uint8_t)0x61)
   RCC_FLAG_MASK=((uint8_t)0x1F)
   RCC_FLAG_PINRST=((uint8_t)0x7A)
   RCC_FLAG_PLLI2SRDY=((uint8_t)0x3B)
   RCC_FLAG_PLLRDY=((uint8_t)0x39)
   RCC_FLAG_PORRST=((uint8_t)0x7B)
   RCC_FLAG_SFTRST=((uint8_t)0x7C)
   RCC_FLAG_WWDGRST=((uint8_t)0x7E)
   RCC_HCLK_DIV16=RCC_CFGR_PPRE1_DIV16
   RCC_HCLK_DIV1=RCC_CFGR_PPRE1_DIV1
   RCC_HCLK_DIV2=RCC_CFGR_PPRE1_DIV2
   RCC_HCLK_DIV4=RCC_CFGR_PPRE1_DIV4
   RCC_HCLK_DIV8=RCC_CFGR_PPRE1_DIV8
   RCC_HSE_BYPASS=((uint8_t)0x05)
   RCC_HSE_OFF=((uint8_t)0x00)
   RCC_HSE_ON=((uint8_t)0x01)
   RCC_HSION_BIT_NUMBER=0x00
   RCC_HSI_OFF=((uint8_t)0x00)
   RCC_HSI_ON=((uint8_t)0x01)
   RCC_I2SCLKSOURCE_EXT=((uint32_t)0x00000001)
   RCC_I2SCLKSOURCE_PLLI2S=((uint32_t)0x00000000)
   RCC_I2SSRC_BIT_NUMBER=0x17
   RCC_IT_CSS=((uint8_t)0x80)
   RCC_IT_HSERDY=((uint8_t)0x08)
   RCC_IT_HSI14=RCC_IT_HSI14RDY
   RCC_IT_HSIRDY=((uint8_t)0x04)
   RCC_IT_LSERDY=((uint8_t)0x02)
   RCC_IT_LSIRDY=((uint8_t)0x01)
   RCC_IT_PLLI2SRDY=((uint8_t)0x20)
   RCC_IT_PLLRDY=((uint8_t)0x10)
   RCC_LSE_BYPASS=((uint8_t)0x05)
   RCC_LSE_HIGHDRIVE_MODE=((uint8_t)0x01)
   RCC_LSE_LOWPOWER_MODE=((uint8_t)0x00)
   RCC_LSE_OFF=((uint8_t)0x00)
   RCC_LSE_ON=((uint8_t)0x01)
   RCC_LSE_TIMEOUT_VALUE=((uint32_t)5000)
   RCC_LSION_BIT_NUMBER=0x00
   RCC_LSI_OFF=((uint8_t)0x00)
   RCC_LSI_ON=((uint8_t)0x01)
   RCC_MCO1=((uint32_t)0x00000000)
   RCC_MCO1SOURCE_HSE=RCC_CFGR_MCO1_1
   RCC_MCO1SOURCE_HSI=((uint32_t)0x00000000)
   RCC_MCO1SOURCE_LSE=RCC_CFGR_MCO1_0
   RCC_MCO1SOURCE_PLLCLK=RCC_CFGR_MCO1
   RCC_MCO2=((uint32_t)0x00000001)
   RCC_MCO2SOURCE_HSE=RCC_CFGR_MCO2_1
   RCC_MCO2SOURCE_PLLCLK=RCC_CFGR_MCO2
   RCC_MCO2SOURCE_PLLI2SCLK=RCC_CFGR_MCO2_0
   RCC_MCO2SOURCE_SYSCLK=((uint32_t)0x00000000)
   RCC_MCODIV_1=((uint32_t)0x00000000)
   RCC_MCODIV_2=RCC_CFGR_MCO1PRE_2
   RCC_MCODIV_3=((uint32_t)RCC_CFGR_MCO1PRE_0 | RCC_CFGR_MCO1PRE_2)
   RCC_MCODIV_4=((uint32_t)RCC_CFGR_MCO1PRE_1 | RCC_CFGR_MCO1PRE_2)
   RCC_MCODIV_5=RCC_CFGR_MCO1PRE
   RCC_MCOSOURCE_HSE=RCC_MCO1SOURCE_HSE
   RCC_MCOSOURCE_HSI14=RCC_MCO1SOURCE_HSI14
   RCC_MCOSOURCE_HSI48=RCC_MCO1SOURCE_HSI48
   RCC_MCOSOURCE_HSI=RCC_MCO1SOURCE_HSI
   RCC_MCOSOURCE_LSE=RCC_MCO1SOURCE_LSE
   RCC_MCOSOURCE_LSI=RCC_MCO1SOURCE_LSI
   RCC_MCOSOURCE_NONE=RCC_MCO1SOURCE_NOCLOCK
   RCC_MCOSOURCE_PLLCLK_DIV1=RCC_MCO1SOURCE_PLLCLK
   RCC_MCOSOURCE_PLLCLK_DIV2=RCC_MCO1SOURCE_PLLCLK_DIV2
   RCC_MCOSOURCE_PLLCLK_NODIV=RCC_MCO1SOURCE_PLLCLK
   RCC_MCOSOURCE_SYSCLK=RCC_MCO1SOURCE_SYSCLK
   RCC_MCO_DIV128=RCC_MCODIV_128
   RCC_MCO_DIV16=RCC_MCODIV_16
   RCC_MCO_DIV1=RCC_MCODIV_1
   RCC_MCO_DIV2=RCC_MCODIV_2
   RCC_MCO_DIV32=RCC_MCODIV_32
   RCC_MCO_DIV4=RCC_MCODIV_4
   RCC_MCO_DIV64=RCC_MCODIV_64
   RCC_MCO_DIV8=RCC_MCODIV_8
   RCC_MCO_NODIV=RCC_MCODIV_1
   RCC_OFFSET=(RCC_BASE - PERIPH_BASE)
   RCC_OSCILLATORTYPE_HSE=((uint32_t)0x00000001)
   RCC_OSCILLATORTYPE_HSI=((uint32_t)0x00000002)
   RCC_OSCILLATORTYPE_LSE=((uint32_t)0x00000004)
   RCC_OSCILLATORTYPE_LSI=((uint32_t)0x00000008)
   RCC_OSCILLATORTYPE_NONE=((uint32_t)0x00000000)
   RCC_PERIPHCLK_CK48=((uint32_t)0x00000080)
   RCC_PERIPHCLK_I2S=((uint32_t)0x00000001)
   RCC_PERIPHCLK_LTDC=((uint32_t)0x00000008)
   RCC_PERIPHCLK_PLLI2S=((uint32_t)0x00000040)
   RCC_PERIPHCLK_RTC=((uint32_t)0x00000020)
   RCC_PERIPHCLK_SAI_PLLI2S=((uint32_t)0x00000002)
   RCC_PERIPHCLK_SAI_PLLSAI=((uint32_t)0x00000004)
   RCC_PERIPHCLK_SDIO=((uint32_t)0x00000100)
   RCC_PERIPHCLK_SDMMC1=RCC_PERIPHCLK_SDIO
   RCC_PERIPHCLK_TIM=((uint32_t)0x00000010)
   RCC_PLLCFGR_PLLM=((uint32_t)0x0000003F)
   RCC_PLLCFGR_PLLM_0=((uint32_t)0x00000001)
   RCC_PLLCFGR_PLLM_1=((uint32_t)0x00000002)
   RCC_PLLCFGR_PLLM_2=((uint32_t)0x00000004)
   RCC_PLLCFGR_PLLM_3=((uint32_t)0x00000008)
   RCC_PLLCFGR_PLLM_4=((uint32_t)0x00000010)
   RCC_PLLCFGR_PLLM_5=((uint32_t)0x00000020)
   RCC_PLLCFGR_PLLN=((uint32_t)0x00007FC0)
   RCC_PLLCFGR_PLLN_0=((uint32_t)0x00000040)
   RCC_PLLCFGR_PLLN_1=((uint32_t)0x00000080)
   RCC_PLLCFGR_PLLN_2=((uint32_t)0x00000100)
   RCC_PLLCFGR_PLLN_3=((uint32_t)0x00000200)
   RCC_PLLCFGR_PLLN_4=((uint32_t)0x00000400)
   RCC_PLLCFGR_PLLN_5=((uint32_t)0x00000800)
   RCC_PLLCFGR_PLLN_6=((uint32_t)0x00001000)
   RCC_PLLCFGR_PLLN_7=((uint32_t)0x00002000)
   RCC_PLLCFGR_PLLN_8=((uint32_t)0x00004000)
   RCC_PLLCFGR_PLLP=((uint32_t)0x00030000)
   RCC_PLLCFGR_PLLP_0=((uint32_t)0x00010000)
   RCC_PLLCFGR_PLLP_1=((uint32_t)0x00020000)
   RCC_PLLCFGR_PLLQ=((uint32_t)0x0F000000)
   RCC_PLLCFGR_PLLQ_0=((uint32_t)0x01000000)
   RCC_PLLCFGR_PLLQ_1=((uint32_t)0x02000000)
   RCC_PLLCFGR_PLLQ_2=((uint32_t)0x04000000)
   RCC_PLLCFGR_PLLQ_3=((uint32_t)0x08000000)
   RCC_PLLCFGR_PLLR=((uint32_t)0x70000000)
   RCC_PLLCFGR_PLLR_0=((uint32_t)0x10000000)
   RCC_PLLCFGR_PLLR_1=((uint32_t)0x20000000)
   RCC_PLLCFGR_PLLR_2=((uint32_t)0x40000000)
   RCC_PLLCFGR_PLLSRC=((uint32_t)0x00400000)
   RCC_PLLCFGR_PLLSRC_HSE=((uint32_t)0x00400000)
   RCC_PLLCFGR_PLLSRC_HSI=((uint32_t)0x00000000)
   RCC_PLLI2SCFGR_PLLI2SN=((uint32_t)0x00007FC0)
   RCC_PLLI2SCFGR_PLLI2SN_0=((uint32_t)0x00000040)
   RCC_PLLI2SCFGR_PLLI2SN_1=((uint32_t)0x00000080)
   RCC_PLLI2SCFGR_PLLI2SN_2=((uint32_t)0x00000100)
   RCC_PLLI2SCFGR_PLLI2SN_3=((uint32_t)0x00000200)
   RCC_PLLI2SCFGR_PLLI2SN_4=((uint32_t)0x00000400)
   RCC_PLLI2SCFGR_PLLI2SN_5=((uint32_t)0x00000800)
   RCC_PLLI2SCFGR_PLLI2SN_6=((uint32_t)0x00001000)
   RCC_PLLI2SCFGR_PLLI2SN_7=((uint32_t)0x00002000)
   RCC_PLLI2SCFGR_PLLI2SN_8=((uint32_t)0x00004000)
   RCC_PLLI2SCFGR_PLLI2SQ=((uint32_t)0x0F000000)
   RCC_PLLI2SCFGR_PLLI2SQ_0=((uint32_t)0x01000000)
   RCC_PLLI2SCFGR_PLLI2SQ_1=((uint32_t)0x02000000)
   RCC_PLLI2SCFGR_PLLI2SQ_2=((uint32_t)0x04000000)
   RCC_PLLI2SCFGR_PLLI2SQ_3=((uint32_t)0x08000000)
   RCC_PLLI2SCFGR_PLLI2SR=((uint32_t)0x70000000)
   RCC_PLLI2SCFGR_PLLI2SR_0=((uint32_t)0x10000000)
   RCC_PLLI2SCFGR_PLLI2SR_1=((uint32_t)0x20000000)
   RCC_PLLI2SCFGR_PLLI2SR_2=((uint32_t)0x40000000)
   RCC_PLLI2SON_BIT_NUMBER=0x1A
   RCC_PLLON_BIT_NUMBER=0x18
   RCC_PLLP_DIV2=((uint32_t)0x00000002)
   RCC_PLLP_DIV4=((uint32_t)0x00000004)
   RCC_PLLP_DIV6=((uint32_t)0x00000006)
   RCC_PLLP_DIV8=((uint32_t)0x00000008)
   RCC_PLLSAICFGR_PLLSAIN=((uint32_t)0x00007FC0)
   RCC_PLLSAICFGR_PLLSAIN_0=((uint32_t)0x00000040)
   RCC_PLLSAICFGR_PLLSAIN_1=((uint32_t)0x00000080)
   RCC_PLLSAICFGR_PLLSAIN_2=((uint32_t)0x00000100)
   RCC_PLLSAICFGR_PLLSAIN_3=((uint32_t)0x00000200)
   RCC_PLLSAICFGR_PLLSAIN_4=((uint32_t)0x00000400)
   RCC_PLLSAICFGR_PLLSAIN_5=((uint32_t)0x00000800)
   RCC_PLLSAICFGR_PLLSAIN_6=((uint32_t)0x00001000)
   RCC_PLLSAICFGR_PLLSAIN_7=((uint32_t)0x00002000)
   RCC_PLLSAICFGR_PLLSAIN_8=((uint32_t)0x00004000)
   RCC_PLLSAICFGR_PLLSAIP=((uint32_t)0x00030000)
   RCC_PLLSAICFGR_PLLSAIP_0=((uint32_t)0x00010000)
   RCC_PLLSAICFGR_PLLSAIP_1=((uint32_t)0x00020000)
   RCC_PLLSAICFGR_PLLSAIQ=((uint32_t)0x0F000000)
   RCC_PLLSAICFGR_PLLSAIQ_0=((uint32_t)0x01000000)
   RCC_PLLSAICFGR_PLLSAIQ_1=((uint32_t)0x02000000)
   RCC_PLLSAICFGR_PLLSAIQ_2=((uint32_t)0x04000000)
   RCC_PLLSAICFGR_PLLSAIQ_3=((uint32_t)0x08000000)
   RCC_PLLSAICFGR_PLLSAIR=((uint32_t)0x70000000)
   RCC_PLLSAICFGR_PLLSAIR_0=((uint32_t)0x10000000)
   RCC_PLLSAICFGR_PLLSAIR_1=((uint32_t)0x20000000)
   RCC_PLLSAICFGR_PLLSAIR_2=((uint32_t)0x40000000)
   RCC_PLLSAIDIVR_16=((uint32_t)0x00030000)
   RCC_PLLSAIDIVR_2=((uint32_t)0x00000000)
   RCC_PLLSAIDIVR_4=((uint32_t)0x00010000)
   RCC_PLLSAIDIVR_8=((uint32_t)0x00020000)
   RCC_PLLSAION_BIT_NUMBER=0x1C
   RCC_PLLSAIP_DIV2=((uint32_t)0x00000002)
   RCC_PLLSAIP_DIV4=((uint32_t)0x00000004)
   RCC_PLLSAIP_DIV6=((uint32_t)0x00000006)
   RCC_PLLSAIP_DIV8=((uint32_t)0x00000008)
   RCC_PLLSOURCE_HSE=RCC_PLLCFGR_PLLSRC_HSE
   RCC_PLLSOURCE_HSI=RCC_PLLCFGR_PLLSRC_HSI
   RCC_PLL_NONE=((uint8_t)0x00)
   RCC_PLL_OFF=((uint8_t)0x01)
   RCC_PLL_ON=((uint8_t)0x02)
   RCC_RTCCLKSOURCE_HSE_DIV10=((uint32_t)0x000A0300)
   RCC_RTCCLKSOURCE_HSE_DIV11=((uint32_t)0x000B0300)
   RCC_RTCCLKSOURCE_HSE_DIV12=((uint32_t)0x000C0300)
   RCC_RTCCLKSOURCE_HSE_DIV13=((uint32_t)0x000D0300)
   RCC_RTCCLKSOURCE_HSE_DIV14=((uint32_t)0x000E0300)
   RCC_RTCCLKSOURCE_HSE_DIV15=((uint32_t)0x000F0300)
   RCC_RTCCLKSOURCE_HSE_DIV16=((uint32_t)0x00100300)
   RCC_RTCCLKSOURCE_HSE_DIV17=((uint32_t)0x00110300)
   RCC_RTCCLKSOURCE_HSE_DIV18=((uint32_t)0x00120300)
   RCC_RTCCLKSOURCE_HSE_DIV19=((uint32_t)0x00130300)
   RCC_RTCCLKSOURCE_HSE_DIV20=((uint32_t)0x00140300)
   RCC_RTCCLKSOURCE_HSE_DIV21=((uint32_t)0x00150300)
   RCC_RTCCLKSOURCE_HSE_DIV22=((uint32_t)0x00160300)
   RCC_RTCCLKSOURCE_HSE_DIV23=((uint32_t)0x00170300)
   RCC_RTCCLKSOURCE_HSE_DIV24=((uint32_t)0x00180300)
   RCC_RTCCLKSOURCE_HSE_DIV25=((uint32_t)0x00190300)
   RCC_RTCCLKSOURCE_HSE_DIV26=((uint32_t)0x001A0300)
   RCC_RTCCLKSOURCE_HSE_DIV27=((uint32_t)0x001B0300)
   RCC_RTCCLKSOURCE_HSE_DIV28=((uint32_t)0x001C0300)
   RCC_RTCCLKSOURCE_HSE_DIV29=((uint32_t)0x001D0300)
   RCC_RTCCLKSOURCE_HSE_DIV2=((uint32_t)0x00020300)
   RCC_RTCCLKSOURCE_HSE_DIV30=((uint32_t)0x001E0300)
   RCC_RTCCLKSOURCE_HSE_DIV31=((uint32_t)0x001F0300)
   RCC_RTCCLKSOURCE_HSE_DIV3=((uint32_t)0x00030300)
   RCC_RTCCLKSOURCE_HSE_DIV4=((uint32_t)0x00040300)
   RCC_RTCCLKSOURCE_HSE_DIV5=((uint32_t)0x00050300)
   RCC_RTCCLKSOURCE_HSE_DIV6=((uint32_t)0x00060300)
   RCC_RTCCLKSOURCE_HSE_DIV7=((uint32_t)0x00070300)
   RCC_RTCCLKSOURCE_HSE_DIV8=((uint32_t)0x00080300)
   RCC_RTCCLKSOURCE_HSE_DIV9=((uint32_t)0x00090300)
   RCC_RTCCLKSOURCE_LSE=((uint32_t)0x00000100)
   RCC_RTCCLKSOURCE_LSI=((uint32_t)0x00000200)
   RCC_RTCCLKSOURCE_NONE=RCC_RTCCLKSOURCE_NO_CLK
   RCC_RTCEN_BIT_NUMBER=0x0F
   RCC_SAIACLKSOURCE_EXT=((uint32_t)0x00200000)
   RCC_SAIACLKSOURCE_PLLI2S=((uint32_t)0x00100000)
   RCC_SAIACLKSOURCE_PLLSAI=((uint32_t)0x00000000)
   RCC_SAIBCLKSOURCE_EXT=((uint32_t)0x00800000)
   RCC_SAIBCLKSOURCE_PLLI2S=((uint32_t)0x00400000)
   RCC_SAIBCLKSOURCE_PLLSAI=((uint32_t)0x00000000)
   RCC_SDIOCLKSOURCE_CK48=((uint32_t)0x00000000)
   RCC_SDIOCLKSOURCE_SYSCLK=((uint32_t)RCC_DCKCFGR_SDIOSEL)
   RCC_SDMMC1CLKSOURCE_CLK48=RCC_SDIOCLKSOURCE_CK48
   RCC_SDMMC1CLKSOURCE_SYSCLK=RCC_SDIOCLKSOURCE_SYSCLK
   RCC_SSCGR_INCSTEP=((uint32_t)0x0FFFE000)
   RCC_SSCGR_MODPER=((uint32_t)0x00001FFF)
   RCC_SSCGR_SPREADSEL=((uint32_t)0x40000000)
   RCC_SSCGR_SSCGEN=((uint32_t)0x80000000)
   RCC_StopWakeUpClock_HSI=RCC_STOP_WAKEUPCLOCK_HSI
   RCC_StopWakeUpClock_MSI=RCC_STOP_WAKEUPCLOCK_MSI
   RCC_SYSCLKSOURCE_HSE=RCC_CFGR_SW_HSE
   RCC_SYSCLKSOURCE_HSI=RCC_CFGR_SW_HSI
   RCC_SYSCLKSOURCE_PLLCLK=RCC_CFGR_SW_PLL
   RCC_SYSCLKSOURCE_PLLRCLK=((uint32_t)(RCC_CFGR_SW_0 | RCC_CFGR_SW_1))
   RCC_SYSCLKSOURCE_STATUS_HSE=RCC_CFGR_SWS_HSE
   RCC_SYSCLKSOURCE_STATUS_HSI=RCC_CFGR_SWS_HSI
   RCC_SYSCLKSOURCE_STATUS_PLLCLK=RCC_CFGR_SWS_PLL
   RCC_SYSCLKSOURCE_STATUS_PLLRCLK=((uint32_t)(RCC_CFGR_SW_0 | RCC_CFGR_SW_1))
   RCC_SYSCLK_DIV128=RCC_CFGR_HPRE_DIV128
   RCC_SYSCLK_DIV16=RCC_CFGR_HPRE_DIV16
   RCC_SYSCLK_DIV1=RCC_CFGR_HPRE_DIV1
   RCC_SYSCLK_DIV256=RCC_CFGR_HPRE_DIV256
   RCC_SYSCLK_DIV2=RCC_CFGR_HPRE_DIV2
   RCC_SYSCLK_DIV4=RCC_CFGR_HPRE_DIV4
   RCC_SYSCLK_DIV512=RCC_CFGR_HPRE_DIV512
   RCC_SYSCLK_DIV64=RCC_CFGR_HPRE_DIV64
   RCC_SYSCLK_DIV8=RCC_CFGR_HPRE_DIV8
   RCC_TIMPRES_ACTIVATED=((uint8_t)0x01)
   RCC_TIMPRES_DESACTIVATED=((uint8_t)0x00)
   RCC_TIMPRE_BIT_NUMBER=0x18
   RCC_USBCLKSOURCE_PLLCLK=RCC_USBCLKSOURCE_PLL
   RCC_USBCLK_MSI=RCC_USBCLKSOURCE_MSI
   RCC_USBCLK_PLL=RCC_USBCLKSOURCE_PLL
   RCC_USBCLK_PLLSAI1=RCC_USBCLKSOURCE_PLLSAI1
   RCC_USBPLLCLK_DIV1=RCC_USBCLKSOURCE_PLL
   RCC_USBPLLCLK_DIV1_5=RCC_USBCLKSOURCE_PLL_DIV1_5
   RCC_USBPLLCLK_DIV2=RCC_USBCLKSOURCE_PLL_DIV2
   RCC_USBPLLCLK_DIV3=RCC_USBCLKSOURCE_PLL_DIV3
   RDP_KEY=((uint16_t)0x00A5)
   READ_BIT(REG,BIT)=((REG) & (BIT))
   READ_CMD=0x03
   READ_ENHANCED_VOL_CFG_REG_CMD=0x65
   READ_FLAG_STATUS_REG_CMD=0x70
   READ_ID_CMD2=0x9F
   READ_ID_CMD=0x9E
   READ_LOCK_REG_CMD=0xE8
   READ_NONVOL_CFG_REG_CMD=0xB5
   READ_OTP_ARRAY_CMD=0x4B
   READ_REG(REG)=((REG))
   READ_SERIAL_FLASH_DISCO_PARAM_CMD=0x5A
   READ_STATUS_REG_CMD=0x05
   READ_VOL_CFG_REG_CMD=0x85
   REFRESH_COUNT=((uint32_t)0x0569)
   REGULAR_CHANNELS=ADC_REGULAR_CHANNELS
   REGULAR_GROUP=ADC_REGULAR_GROUP
   REGULAR_INJECTED_GROUP=ADC_REGULAR_INJECTED_GROUP
   RESET_ENABLE_CMD=0x66
   RESET_MEMORY_CMD=0x99
   RESTRICT=__restrict__
   RMVF_BitNumber=RCC_RMVF_BIT_NUMBER
   RNG=((RNG_TypeDef *) RNG_BASE)
   RNG_BASE=(AHB2PERIPH_BASE + 0x60800)
   RNG_CR_IE=((uint32_t)0x00000008)
   RNG_CR_RNGEN=((uint32_t)0x00000004)
   RNG_SR_CECS=((uint32_t)0x00000002)
   RNG_SR_CEIS=((uint32_t)0x00000020)
   RNG_SR_DRDY=((uint32_t)0x00000001)
   RNG_SR_SECS=((uint32_t)0x00000004)
   RNG_SR_SEIS=((uint32_t)0x00000040)
   ROUNDUP(num,multiple)=((multiple) == 0 ? (num) : (num) + (abs(multiple) - ((num) % abs(multiple))) % abs(multiple))
   RTC=((RTC_TypeDef *) RTC_BASE)
   RTCEN_BitNumber=RCC_RTCEN_BIT_NUMBER
   RTCRST_BITNUMBER=RCC_RTCRST_BIT_NUMBER
   RTC_ALARMSUBSECONDMASK_None=RTC_ALARMSUBSECONDMASK_NONE
   RTC_ALRMAR_DT=((uint32_t)0x30000000)
   RTC_ALRMAR_DT_0=((uint32_t)0x10000000)
   RTC_ALRMAR_DT_1=((uint32_t)0x20000000)
   RTC_ALRMAR_DU=((uint32_t)0x0F000000)
   RTC_ALRMAR_DU_0=((uint32_t)0x01000000)
   RTC_ALRMAR_DU_1=((uint32_t)0x02000000)
   RTC_ALRMAR_DU_2=((uint32_t)0x04000000)
   RTC_ALRMAR_DU_3=((uint32_t)0x08000000)
   RTC_ALRMAR_HT=((uint32_t)0x00300000)
   RTC_ALRMAR_HT_0=((uint32_t)0x00100000)
   RTC_ALRMAR_HT_1=((uint32_t)0x00200000)
   RTC_ALRMAR_HU=((uint32_t)0x000F0000)
   RTC_ALRMAR_HU_0=((uint32_t)0x00010000)
   RTC_ALRMAR_HU_1=((uint32_t)0x00020000)
   RTC_ALRMAR_HU_2=((uint32_t)0x00040000)
   RTC_ALRMAR_HU_3=((uint32_t)0x00080000)
   RTC_ALRMAR_MNT=((uint32_t)0x00007000)
   RTC_ALRMAR_MNT_0=((uint32_t)0x00001000)
   RTC_ALRMAR_MNT_1=((uint32_t)0x00002000)
   RTC_ALRMAR_MNT_2=((uint32_t)0x00004000)
   RTC_ALRMAR_MNU=((uint32_t)0x00000F00)
   RTC_ALRMAR_MNU_0=((uint32_t)0x00000100)
   RTC_ALRMAR_MNU_1=((uint32_t)0x00000200)
   RTC_ALRMAR_MNU_2=((uint32_t)0x00000400)
   RTC_ALRMAR_MNU_3=((uint32_t)0x00000800)
   RTC_ALRMAR_MSK1=((uint32_t)0x00000080)
   RTC_ALRMAR_MSK2=((uint32_t)0x00008000)
   RTC_ALRMAR_MSK3=((uint32_t)0x00800000)
   RTC_ALRMAR_MSK4=((uint32_t)0x80000000)
   RTC_ALRMAR_PM=((uint32_t)0x00400000)
   RTC_ALRMAR_ST=((uint32_t)0x00000070)
   RTC_ALRMAR_ST_0=((uint32_t)0x00000010)
   RTC_ALRMAR_ST_1=((uint32_t)0x00000020)
   RTC_ALRMAR_ST_2=((uint32_t)0x00000040)
   RTC_ALRMAR_SU=((uint32_t)0x0000000F)
   RTC_ALRMAR_SU_0=((uint32_t)0x00000001)
   RTC_ALRMAR_SU_1=((uint32_t)0x00000002)
   RTC_ALRMAR_SU_2=((uint32_t)0x00000004)
   RTC_ALRMAR_SU_3=((uint32_t)0x00000008)
   RTC_ALRMAR_WDSEL=((uint32_t)0x40000000)
   RTC_ALRMASSR_MASKSS=((uint32_t)0x0F000000)
   RTC_ALRMASSR_MASKSS_0=((uint32_t)0x01000000)
   RTC_ALRMASSR_MASKSS_1=((uint32_t)0x02000000)
   RTC_ALRMASSR_MASKSS_2=((uint32_t)0x04000000)
   RTC_ALRMASSR_MASKSS_3=((uint32_t)0x08000000)
   RTC_ALRMASSR_SS=((uint32_t)0x00007FFF)
   RTC_ALRMBR_DT=((uint32_t)0x30000000)
   RTC_ALRMBR_DT_0=((uint32_t)0x10000000)
   RTC_ALRMBR_DT_1=((uint32_t)0x20000000)
   RTC_ALRMBR_DU=((uint32_t)0x0F000000)
   RTC_ALRMBR_DU_0=((uint32_t)0x01000000)
   RTC_ALRMBR_DU_1=((uint32_t)0x02000000)
   RTC_ALRMBR_DU_2=((uint32_t)0x04000000)
   RTC_ALRMBR_DU_3=((uint32_t)0x08000000)
   RTC_ALRMBR_HT=((uint32_t)0x00300000)
   RTC_ALRMBR_HT_0=((uint32_t)0x00100000)
   RTC_ALRMBR_HT_1=((uint32_t)0x00200000)
   RTC_ALRMBR_HU=((uint32_t)0x000F0000)
   RTC_ALRMBR_HU_0=((uint32_t)0x00010000)
   RTC_ALRMBR_HU_1=((uint32_t)0x00020000)
   RTC_ALRMBR_HU_2=((uint32_t)0x00040000)
   RTC_ALRMBR_HU_3=((uint32_t)0x00080000)
   RTC_ALRMBR_MNT=((uint32_t)0x00007000)
   RTC_ALRMBR_MNT_0=((uint32_t)0x00001000)
   RTC_ALRMBR_MNT_1=((uint32_t)0x00002000)
   RTC_ALRMBR_MNT_2=((uint32_t)0x00004000)
   RTC_ALRMBR_MNU=((uint32_t)0x00000F00)
   RTC_ALRMBR_MNU_0=((uint32_t)0x00000100)
   RTC_ALRMBR_MNU_1=((uint32_t)0x00000200)
   RTC_ALRMBR_MNU_2=((uint32_t)0x00000400)
   RTC_ALRMBR_MNU_3=((uint32_t)0x00000800)
   RTC_ALRMBR_MSK1=((uint32_t)0x00000080)
   RTC_ALRMBR_MSK2=((uint32_t)0x00008000)
   RTC_ALRMBR_MSK3=((uint32_t)0x00800000)
   RTC_ALRMBR_MSK4=((uint32_t)0x80000000)
   RTC_ALRMBR_PM=((uint32_t)0x00400000)
   RTC_ALRMBR_ST=((uint32_t)0x00000070)
   RTC_ALRMBR_ST_0=((uint32_t)0x00000010)
   RTC_ALRMBR_ST_1=((uint32_t)0x00000020)
   RTC_ALRMBR_ST_2=((uint32_t)0x00000040)
   RTC_ALRMBR_SU=((uint32_t)0x0000000F)
   RTC_ALRMBR_SU_0=((uint32_t)0x00000001)
   RTC_ALRMBR_SU_1=((uint32_t)0x00000002)
   RTC_ALRMBR_SU_2=((uint32_t)0x00000004)
   RTC_ALRMBR_SU_3=((uint32_t)0x00000008)
   RTC_ALRMBR_WDSEL=((uint32_t)0x40000000)
   RTC_ALRMBSSR_MASKSS=((uint32_t)0x0F000000)
   RTC_ALRMBSSR_MASKSS_0=((uint32_t)0x01000000)
   RTC_ALRMBSSR_MASKSS_1=((uint32_t)0x02000000)
   RTC_ALRMBSSR_MASKSS_2=((uint32_t)0x04000000)
   RTC_ALRMBSSR_MASKSS_3=((uint32_t)0x08000000)
   RTC_ALRMBSSR_SS=((uint32_t)0x00007FFF)
   RTC_BASE=(APB1PERIPH_BASE + 0x2800)
   RTC_BKP0R=((uint32_t)0xFFFFFFFF)
   RTC_BKP10R=((uint32_t)0xFFFFFFFF)
   RTC_BKP11R=((uint32_t)0xFFFFFFFF)
   RTC_BKP12R=((uint32_t)0xFFFFFFFF)
   RTC_BKP13R=((uint32_t)0xFFFFFFFF)
   RTC_BKP14R=((uint32_t)0xFFFFFFFF)
   RTC_BKP15R=((uint32_t)0xFFFFFFFF)
   RTC_BKP16R=((uint32_t)0xFFFFFFFF)
   RTC_BKP17R=((uint32_t)0xFFFFFFFF)
   RTC_BKP18R=((uint32_t)0xFFFFFFFF)
   RTC_BKP19R=((uint32_t)0xFFFFFFFF)
   RTC_BKP1R=((uint32_t)0xFFFFFFFF)
   RTC_BKP2R=((uint32_t)0xFFFFFFFF)
   RTC_BKP3R=((uint32_t)0xFFFFFFFF)
   RTC_BKP4R=((uint32_t)0xFFFFFFFF)
   RTC_BKP5R=((uint32_t)0xFFFFFFFF)
   RTC_BKP6R=((uint32_t)0xFFFFFFFF)
   RTC_BKP7R=((uint32_t)0xFFFFFFFF)
   RTC_BKP8R=((uint32_t)0xFFFFFFFF)
   RTC_BKP9R=((uint32_t)0xFFFFFFFF)
   RTC_CALIBR_DC=((uint32_t)0x0000001F)
   RTC_CALIBR_DCS=((uint32_t)0x00000080)
   RTC_CALR_CALM=((uint32_t)0x000001FF)
   RTC_CALR_CALM_0=((uint32_t)0x00000001)
   RTC_CALR_CALM_1=((uint32_t)0x00000002)
   RTC_CALR_CALM_2=((uint32_t)0x00000004)
   RTC_CALR_CALM_3=((uint32_t)0x00000008)
   RTC_CALR_CALM_4=((uint32_t)0x00000010)
   RTC_CALR_CALM_5=((uint32_t)0x00000020)
   RTC_CALR_CALM_6=((uint32_t)0x00000040)
   RTC_CALR_CALM_7=((uint32_t)0x00000080)
   RTC_CALR_CALM_8=((uint32_t)0x00000100)
   RTC_CALR_CALP=((uint32_t)0x00008000)
   RTC_CALR_CALW16=((uint32_t)0x00002000)
   RTC_CALR_CALW8=((uint32_t)0x00004000)
   RTC_CR_ADD1H=((uint32_t)0x00010000)
   RTC_CR_ALRAE=((uint32_t)0x00000100)
   RTC_CR_ALRAIE=((uint32_t)0x00001000)
   RTC_CR_ALRBE=((uint32_t)0x00000200)
   RTC_CR_ALRBIE=((uint32_t)0x00002000)
   RTC_CR_BCK=((uint32_t)0x00040000)
   RTC_CR_BYPSHAD=((uint32_t)0x00000020)
   RTC_CR_COE=((uint32_t)0x00800000)
   RTC_CR_COSEL=((uint32_t)0x00080000)
   RTC_CR_DCE=((uint32_t)0x00000080)
   RTC_CR_FMT=((uint32_t)0x00000040)
   RTC_CR_OSEL=((uint32_t)0x00600000)
   RTC_CR_OSEL_0=((uint32_t)0x00200000)
   RTC_CR_OSEL_1=((uint32_t)0x00400000)
   RTC_CR_POL=((uint32_t)0x00100000)
   RTC_CR_REFCKON=((uint32_t)0x00000010)
   RTC_CR_SUB1H=((uint32_t)0x00020000)
   RTC_CR_TSE=((uint32_t)0x00000800)
   RTC_CR_TSEDGE=((uint32_t)0x00000008)
   RTC_CR_TSIE=((uint32_t)0x00008000)
   RTC_CR_WUCKSEL=((uint32_t)0x00000007)
   RTC_CR_WUCKSEL_0=((uint32_t)0x00000001)
   RTC_CR_WUCKSEL_1=((uint32_t)0x00000002)
   RTC_CR_WUCKSEL_2=((uint32_t)0x00000004)
   RTC_CR_WUTE=((uint32_t)0x00000400)
   RTC_CR_WUTIE=((uint32_t)0x00004000)
   RTC_DR_DT=((uint32_t)0x00000030)
   RTC_DR_DT_0=((uint32_t)0x00000010)
   RTC_DR_DT_1=((uint32_t)0x00000020)
   RTC_DR_DU=((uint32_t)0x0000000F)
   RTC_DR_DU_0=((uint32_t)0x00000001)
   RTC_DR_DU_1=((uint32_t)0x00000002)
   RTC_DR_DU_2=((uint32_t)0x00000004)
   RTC_DR_DU_3=((uint32_t)0x00000008)
   RTC_DR_MT=((uint32_t)0x00001000)
   RTC_DR_MU=((uint32_t)0x00000F00)
   RTC_DR_MU_0=((uint32_t)0x00000100)
   RTC_DR_MU_1=((uint32_t)0x00000200)
   RTC_DR_MU_2=((uint32_t)0x00000400)
   RTC_DR_MU_3=((uint32_t)0x00000800)
   RTC_DR_WDU=((uint32_t)0x0000E000)
   RTC_DR_WDU_0=((uint32_t)0x00002000)
   RTC_DR_WDU_1=((uint32_t)0x00004000)
   RTC_DR_WDU_2=((uint32_t)0x00008000)
   RTC_DR_YT=((uint32_t)0x00F00000)
   RTC_DR_YT_0=((uint32_t)0x00100000)
   RTC_DR_YT_1=((uint32_t)0x00200000)
   RTC_DR_YT_2=((uint32_t)0x00400000)
   RTC_DR_YT_3=((uint32_t)0x00800000)
   RTC_DR_YU=((uint32_t)0x000F0000)
   RTC_DR_YU_0=((uint32_t)0x00010000)
   RTC_DR_YU_1=((uint32_t)0x00020000)
   RTC_DR_YU_2=((uint32_t)0x00040000)
   RTC_DR_YU_3=((uint32_t)0x00080000)
   RTC_ISR_ALRAF=((uint32_t)0x00000100)
   RTC_ISR_ALRAWF=((uint32_t)0x00000001)
   RTC_ISR_ALRBF=((uint32_t)0x00000200)
   RTC_ISR_ALRBWF=((uint32_t)0x00000002)
   RTC_ISR_INIT=((uint32_t)0x00000080)
   RTC_ISR_INITF=((uint32_t)0x00000040)
   RTC_ISR_INITS=((uint32_t)0x00000010)
   RTC_ISR_RECALPF=((uint32_t)0x00010000)
   RTC_ISR_RSF=((uint32_t)0x00000020)
   RTC_ISR_SHPF=((uint32_t)0x00000008)
   RTC_ISR_TAMP1F=((uint32_t)0x00002000)
   RTC_ISR_TAMP2F=((uint32_t)0x00004000)
   RTC_ISR_TSF=((uint32_t)0x00000800)
   RTC_ISR_TSOVF=((uint32_t)0x00001000)
   RTC_ISR_WUTF=((uint32_t)0x00000400)
   RTC_ISR_WUTWF=((uint32_t)0x00000004)
   RTC_MASKTAMPERFLAG_DISABLED=RTC_TAMPERMASK_FLAG_DISABLE
   RTC_MASKTAMPERFLAG_ENABLED=RTC_TAMPERMASK_FLAG_ENABLE
   RTC_OUTPUT_REMAP_PB14=RTC_OUTPUT_REMAP_POS1
   RTC_OUTPUT_REMAP_PB2=RTC_OUTPUT_REMAP_POS1
   RTC_OUTPUT_REMAP_PC13=RTC_OUTPUT_REMAP_NONE
   RTC_PRER_PREDIV_A=((uint32_t)0x007F0000)
   RTC_PRER_PREDIV_S=((uint32_t)0x00007FFF)
   RTC_SHIFTR_ADD1S=((uint32_t)0x80000000)
   RTC_SHIFTR_SUBFS=((uint32_t)0x00007FFF)
   RTC_SSR_SS=((uint32_t)0x0000FFFF)
   RTC_TAFCR_ALARMOUTTYPE=((uint32_t)0x00040000)
   RTC_TAFCR_TAMP1E=((uint32_t)0x00000001)
   RTC_TAFCR_TAMP1TRG=((uint32_t)0x00000002)
   RTC_TAFCR_TAMP2E=((uint32_t)0x00000008)
   RTC_TAFCR_TAMP2TRG=((uint32_t)0x00000010)
   RTC_TAFCR_TAMPFLT=((uint32_t)0x00001800)
   RTC_TAFCR_TAMPFLT_0=((uint32_t)0x00000800)
   RTC_TAFCR_TAMPFLT_1=((uint32_t)0x00001000)
   RTC_TAFCR_TAMPFREQ=((uint32_t)0x00000700)
   RTC_TAFCR_TAMPFREQ_0=((uint32_t)0x00000100)
   RTC_TAFCR_TAMPFREQ_1=((uint32_t)0x00000200)
   RTC_TAFCR_TAMPFREQ_2=((uint32_t)0x00000400)
   RTC_TAFCR_TAMPIE=((uint32_t)0x00000004)
   RTC_TAFCR_TAMPINSEL=((uint32_t)0x00010000)
   RTC_TAFCR_TAMPPRCH=((uint32_t)0x00006000)
   RTC_TAFCR_TAMPPRCH_0=((uint32_t)0x00002000)
   RTC_TAFCR_TAMPPRCH_1=((uint32_t)0x00004000)
   RTC_TAFCR_TAMPPUDIS=((uint32_t)0x00008000)
   RTC_TAFCR_TAMPTS=((uint32_t)0x00000080)
   RTC_TAFCR_TSINSEL=((uint32_t)0x00020000)
   RTC_TAMPER1_2_3_INTERRUPT=RTC_ALL_TAMPER_INTERRUPT
   RTC_TAMPER1_2_INTERRUPT=RTC_ALL_TAMPER_INTERRUPT
   RTC_TAMPERERASEBACKUP_DISABLED=RTC_TAMPER_ERASE_BACKUP_DISABLE
   RTC_TAMPERERASEBACKUP_ENABLED=RTC_TAMPER_ERASE_BACKUP_ENABLE
   RTC_TAMPERMASK_FLAG_DISABLED=RTC_TAMPERMASK_FLAG_DISABLE
   RTC_TAMPERMASK_FLAG_ENABLED=RTC_TAMPERMASK_FLAG_ENABLE
   RTC_TAMPERPIN_PA0=RTC_TAMPERPIN_POS1
   RTC_TAMPERPIN_PC13=RTC_TAMPERPIN_DEFAULT
   RTC_TAMPERPIN_PI8=RTC_TAMPERPIN_POS1
   RTC_TIMESTAMPPIN_PA0=RTC_TIMESTAMPPIN_POS1
   RTC_TIMESTAMPPIN_PC13=RTC_TIMESTAMPPIN_DEFAULT
   RTC_TIMESTAMPPIN_PC1=RTC_TIMESTAMPPIN_POS2
   RTC_TIMESTAMPPIN_PI8=RTC_TIMESTAMPPIN_POS1
   RTC_TR_HT=((uint32_t)0x00300000)
   RTC_TR_HT_0=((uint32_t)0x00100000)
   RTC_TR_HT_1=((uint32_t)0x00200000)
   RTC_TR_HU=((uint32_t)0x000F0000)
   RTC_TR_HU_0=((uint32_t)0x00010000)
   RTC_TR_HU_1=((uint32_t)0x00020000)
   RTC_TR_HU_2=((uint32_t)0x00040000)
   RTC_TR_HU_3=((uint32_t)0x00080000)
   RTC_TR_MNT=((uint32_t)0x00007000)
   RTC_TR_MNT_0=((uint32_t)0x00001000)
   RTC_TR_MNT_1=((uint32_t)0x00002000)
   RTC_TR_MNT_2=((uint32_t)0x00004000)
   RTC_TR_MNU=((uint32_t)0x00000F00)
   RTC_TR_MNU_0=((uint32_t)0x00000100)
   RTC_TR_MNU_1=((uint32_t)0x00000200)
   RTC_TR_MNU_2=((uint32_t)0x00000400)
   RTC_TR_MNU_3=((uint32_t)0x00000800)
   RTC_TR_PM=((uint32_t)0x00400000)
   RTC_TR_ST=((uint32_t)0x00000070)
   RTC_TR_ST_0=((uint32_t)0x00000010)
   RTC_TR_ST_1=((uint32_t)0x00000020)
   RTC_TR_ST_2=((uint32_t)0x00000040)
   RTC_TR_SU=((uint32_t)0x0000000F)
   RTC_TR_SU_0=((uint32_t)0x00000001)
   RTC_TR_SU_1=((uint32_t)0x00000002)
   RTC_TR_SU_2=((uint32_t)0x00000004)
   RTC_TR_SU_3=((uint32_t)0x00000008)
   RTC_TSDR_DT=((uint32_t)0x00000030)
   RTC_TSDR_DT_0=((uint32_t)0x00000010)
   RTC_TSDR_DT_1=((uint32_t)0x00000020)
   RTC_TSDR_DU=((uint32_t)0x0000000F)
   RTC_TSDR_DU_0=((uint32_t)0x00000001)
   RTC_TSDR_DU_1=((uint32_t)0x00000002)
   RTC_TSDR_DU_2=((uint32_t)0x00000004)
   RTC_TSDR_DU_3=((uint32_t)0x00000008)
   RTC_TSDR_MT=((uint32_t)0x00001000)
   RTC_TSDR_MU=((uint32_t)0x00000F00)
   RTC_TSDR_MU_0=((uint32_t)0x00000100)
   RTC_TSDR_MU_1=((uint32_t)0x00000200)
   RTC_TSDR_MU_2=((uint32_t)0x00000400)
   RTC_TSDR_MU_3=((uint32_t)0x00000800)
   RTC_TSDR_WDU=((uint32_t)0x0000E000)
   RTC_TSDR_WDU_0=((uint32_t)0x00002000)
   RTC_TSDR_WDU_1=((uint32_t)0x00004000)
   RTC_TSDR_WDU_2=((uint32_t)0x00008000)
   RTC_TSSSR_SS=((uint32_t)0x0000FFFF)
   RTC_TSTR_HT=((uint32_t)0x00300000)
   RTC_TSTR_HT_0=((uint32_t)0x00100000)
   RTC_TSTR_HT_1=((uint32_t)0x00200000)
   RTC_TSTR_HU=((uint32_t)0x000F0000)
   RTC_TSTR_HU_0=((uint32_t)0x00010000)
   RTC_TSTR_HU_1=((uint32_t)0x00020000)
   RTC_TSTR_HU_2=((uint32_t)0x00040000)
   RTC_TSTR_HU_3=((uint32_t)0x00080000)
   RTC_TSTR_MNT=((uint32_t)0x00007000)
   RTC_TSTR_MNT_0=((uint32_t)0x00001000)
   RTC_TSTR_MNT_1=((uint32_t)0x00002000)
   RTC_TSTR_MNT_2=((uint32_t)0x00004000)
   RTC_TSTR_MNU=((uint32_t)0x00000F00)
   RTC_TSTR_MNU_0=((uint32_t)0x00000100)
   RTC_TSTR_MNU_1=((uint32_t)0x00000200)
   RTC_TSTR_MNU_2=((uint32_t)0x00000400)
   RTC_TSTR_MNU_3=((uint32_t)0x00000800)
   RTC_TSTR_PM=((uint32_t)0x00400000)
   RTC_TSTR_ST=((uint32_t)0x00000070)
   RTC_TSTR_ST_0=((uint32_t)0x00000010)
   RTC_TSTR_ST_1=((uint32_t)0x00000020)
   RTC_TSTR_ST_2=((uint32_t)0x00000040)
   RTC_TSTR_SU=((uint32_t)0x0000000F)
   RTC_TSTR_SU_0=((uint32_t)0x00000001)
   RTC_TSTR_SU_1=((uint32_t)0x00000002)
   RTC_TSTR_SU_2=((uint32_t)0x00000004)
   RTC_TSTR_SU_3=((uint32_t)0x00000008)
   RTC_WPR_KEY=((uint32_t)0x000000FF)
   RTC_WUTR_WUT=((uint32_t)0x0000FFFF)
   SAI1=((SAI_TypeDef *) SAI1_BASE)
   SAI1_BASE=(APB2PERIPH_BASE + 0x5800)
   SAI1_Block_A=((SAI_Block_TypeDef *)SAI1_Block_A_BASE)
   SAI1_Block_A_BASE=(SAI1_BASE + 0x004)
   SAI1_Block_B=((SAI_Block_TypeDef *)SAI1_Block_B_BASE)
   SAI1_Block_B_BASE=(SAI1_BASE + 0x024)
   SAI_FIFOStatus_1QuarterFull=SAI_FIFOSTATUS_1QUARTERFULL
   SAI_FIFOStatus_3QuartersFull=SAI_FIFOSTATUS_3QUARTERFULL
   SAI_FIFOStatus_Empty=SAI_FIFOSTATUS_EMPTY
   SAI_FIFOStatus_Full=SAI_FIFOSTATUS_FULL
   SAI_FIFOStatus_HalfFull=SAI_FIFOSTATUS_HALFFULL
   SAI_FIFOStatus_Less1QuarterFull=SAI_FIFOSTATUS_LESS1QUARTERFULL
   SAI_GCR_SYNCIN=((uint32_t)0x00000003)
   SAI_GCR_SYNCIN_0=((uint32_t)0x00000001)
   SAI_GCR_SYNCIN_1=((uint32_t)0x00000002)
   SAI_GCR_SYNCOUT=((uint32_t)0x00000030)
   SAI_GCR_SYNCOUT_0=((uint32_t)0x00000010)
   SAI_GCR_SYNCOUT_1=((uint32_t)0x00000020)
   SAI_MASTERDIVIDER_DISABLED=SAI_MASTERDIVIDER_DISABLE
   SAI_MASTERDIVIDER_ENABLED=SAI_MASTERDIVIDER_ENABLE
   SAI_OUTPUTDRIVE_DISABLED=SAI_OUTPUTDRIVE_DISABLE
   SAI_OUTPUTDRIVE_ENABLED=SAI_OUTPUTDRIVE_ENABLE
   SAI_STREOMODE=SAI_STEREOMODE
   SAI_xCLRFR_CAFSDET=((uint32_t)0x00000020)
   SAI_xCLRFR_CCNRDY=((uint32_t)0x00000010)
   SAI_xCLRFR_CFREQ=((uint32_t)0x00000008)
   SAI_xCLRFR_CLFSDET=((uint32_t)0x00000040)
   SAI_xCLRFR_CMUTEDET=((uint32_t)0x00000002)
   SAI_xCLRFR_COVRUDR=((uint32_t)0x00000001)
   SAI_xCLRFR_CWCKCFG=((uint32_t)0x00000004)
   SAI_xCR1_CKSTR=((uint32_t)0x00000200)
   SAI_xCR1_DMAEN=((uint32_t)0x00020000)
   SAI_xCR1_DS=((uint32_t)0x000000E0)
   SAI_xCR1_DS_0=((uint32_t)0x00000020)
   SAI_xCR1_DS_1=((uint32_t)0x00000040)
   SAI_xCR1_DS_2=((uint32_t)0x00000080)
   SAI_xCR1_LSBFIRST=((uint32_t)0x00000100)
   SAI_xCR1_MCKDIV=((uint32_t)0x00F00000)
   SAI_xCR1_MCKDIV_0=((uint32_t)0x00100000)
   SAI_xCR1_MCKDIV_1=((uint32_t)0x00200000)
   SAI_xCR1_MCKDIV_2=((uint32_t)0x00400000)
   SAI_xCR1_MCKDIV_3=((uint32_t)0x00800000)
   SAI_xCR1_MODE=((uint32_t)0x00000003)
   SAI_xCR1_MODE_0=((uint32_t)0x00000001)
   SAI_xCR1_MODE_1=((uint32_t)0x00000002)
   SAI_xCR1_MONO=((uint32_t)0x00001000)
   SAI_xCR1_NODIV=((uint32_t)0x00080000)
   SAI_xCR1_OUTDRIV=((uint32_t)0x00002000)
   SAI_xCR1_PRTCFG=((uint32_t)0x0000000C)
   SAI_xCR1_PRTCFG_0=((uint32_t)0x00000004)
   SAI_xCR1_PRTCFG_1=((uint32_t)0x00000008)
   SAI_xCR1_SAIEN=((uint32_t)0x00010000)
   SAI_xCR1_SYNCEN=((uint32_t)0x00000C00)
   SAI_xCR1_SYNCEN_0=((uint32_t)0x00000400)
   SAI_xCR1_SYNCEN_1=((uint32_t)0x00000800)
   SAI_xCR2_COMP=((uint32_t)0x0000C000)
   SAI_xCR2_COMP_0=((uint32_t)0x00004000)
   SAI_xCR2_COMP_1=((uint32_t)0x00008000)
   SAI_xCR2_CPL=((uint32_t)0x00080000)
   SAI_xCR2_FFLUSH=((uint32_t)0x00000008)
   SAI_xCR2_FTH=((uint32_t)0x00000007)
   SAI_xCR2_FTH_0=((uint32_t)0x00000001)
   SAI_xCR2_FTH_1=((uint32_t)0x00000002)
   SAI_xCR2_FTH_2=((uint32_t)0x00000004)
   SAI_xCR2_MUTE=((uint32_t)0x00000020)
   SAI_xCR2_MUTECNT=((uint32_t)0x00001F80)
   SAI_xCR2_MUTECNT_0=((uint32_t)0x00000080)
   SAI_xCR2_MUTECNT_1=((uint32_t)0x00000100)
   SAI_xCR2_MUTECNT_2=((uint32_t)0x00000200)
   SAI_xCR2_MUTECNT_3=((uint32_t)0x00000400)
   SAI_xCR2_MUTECNT_4=((uint32_t)0x00000800)
   SAI_xCR2_MUTECNT_5=((uint32_t)0x00001000)
   SAI_xCR2_MUTEVAL=((uint32_t)0x00000040)
   SAI_xCR2_TRIS=((uint32_t)0x00000010)
   SAI_xDR_DATA=((uint32_t)0xFFFFFFFF)
   SAI_xFRCR_FRL=((uint32_t)0x000000FF)
   SAI_xFRCR_FRL_0=((uint32_t)0x00000001)
   SAI_xFRCR_FRL_1=((uint32_t)0x00000002)
   SAI_xFRCR_FRL_2=((uint32_t)0x00000004)
   SAI_xFRCR_FRL_3=((uint32_t)0x00000008)
   SAI_xFRCR_FRL_4=((uint32_t)0x00000010)
   SAI_xFRCR_FRL_5=((uint32_t)0x00000020)
   SAI_xFRCR_FRL_6=((uint32_t)0x00000040)
   SAI_xFRCR_FRL_7=((uint32_t)0x00000080)
   SAI_xFRCR_FSALL=((uint32_t)0x00007F00)
   SAI_xFRCR_FSALL_0=((uint32_t)0x00000100)
   SAI_xFRCR_FSALL_1=((uint32_t)0x00000200)
   SAI_xFRCR_FSALL_2=((uint32_t)0x00000400)
   SAI_xFRCR_FSALL_3=((uint32_t)0x00000800)
   SAI_xFRCR_FSALL_4=((uint32_t)0x00001000)
   SAI_xFRCR_FSALL_5=((uint32_t)0x00002000)
   SAI_xFRCR_FSALL_6=((uint32_t)0x00004000)
   SAI_xFRCR_FSDEF=((uint32_t)0x00010000)
   SAI_xFRCR_FSOFF=((uint32_t)0x00040000)
   SAI_xFRCR_FSPO=((uint32_t)0x00020000)
   SAI_xIMR_AFSDETIE=((uint32_t)0x00000020)
   SAI_xIMR_CNRDYIE=((uint32_t)0x00000010)
   SAI_xIMR_FREQIE=((uint32_t)0x00000008)
   SAI_xIMR_LFSDETIE=((uint32_t)0x00000040)
   SAI_xIMR_MUTEDETIE=((uint32_t)0x00000002)
   SAI_xIMR_OVRUDRIE=((uint32_t)0x00000001)
   SAI_xIMR_WCKCFGIE=((uint32_t)0x00000004)
   SAI_xSLOTR_FBOFF=((uint32_t)0x0000001F)
   SAI_xSLOTR_FBOFF_0=((uint32_t)0x00000001)
   SAI_xSLOTR_FBOFF_1=((uint32_t)0x00000002)
   SAI_xSLOTR_FBOFF_2=((uint32_t)0x00000004)
   SAI_xSLOTR_FBOFF_3=((uint32_t)0x00000008)
   SAI_xSLOTR_FBOFF_4=((uint32_t)0x00000010)
   SAI_xSLOTR_NBSLOT=((uint32_t)0x00000F00)
   SAI_xSLOTR_NBSLOT_0=((uint32_t)0x00000100)
   SAI_xSLOTR_NBSLOT_1=((uint32_t)0x00000200)
   SAI_xSLOTR_NBSLOT_2=((uint32_t)0x00000400)
   SAI_xSLOTR_NBSLOT_3=((uint32_t)0x00000800)
   SAI_xSLOTR_SLOTEN=((uint32_t)0xFFFF0000)
   SAI_xSLOTR_SLOTSZ=((uint32_t)0x000000C0)
   SAI_xSLOTR_SLOTSZ_0=((uint32_t)0x00000040)
   SAI_xSLOTR_SLOTSZ_1=((uint32_t)0x00000080)
   SAI_xSR_AFSDET=((uint32_t)0x00000020)
   SAI_xSR_CNRDY=((uint32_t)0x00000010)
   SAI_xSR_FLVL=((uint32_t)0x00070000)
   SAI_xSR_FLVL_0=((uint32_t)0x00010000)
   SAI_xSR_FLVL_1=((uint32_t)0x00020000)
   SAI_xSR_FLVL_2=((uint32_t)0x00040000)
   SAI_xSR_FREQ=((uint32_t)0x00000008)
   SAI_xSR_LFSDET=((uint32_t)0x00000040)
   SAI_xSR_MUTEDET=((uint32_t)0x00000002)
   SAI_xSR_OVRUDR=((uint32_t)0x00000001)
   SAI_xSR_WCKCFG=((uint32_t)0x00000004)
   SA_NOCLDSTOP=1
   SCB=((SCB_Type *) SCB_BASE )
   SCB_AIRCR_ENDIANESS_Msk=(1UL << SCB_AIRCR_ENDIANESS_Pos)
   SCB_AIRCR_ENDIANESS_Pos=15
   SCB_AIRCR_PRIGROUP_Msk=(7UL << SCB_AIRCR_PRIGROUP_Pos)
   SCB_AIRCR_PRIGROUP_Pos=8
   SCB_AIRCR_SYSRESETREQ_Msk=(1UL << SCB_AIRCR_SYSRESETREQ_Pos)
   SCB_AIRCR_SYSRESETREQ_Pos=2
   SCB_AIRCR_VECTCLRACTIVE_Msk=(1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)
   SCB_AIRCR_VECTCLRACTIVE_Pos=1
   SCB_AIRCR_VECTKEYSTAT_Msk=(0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)
   SCB_AIRCR_VECTKEYSTAT_Pos=16
   SCB_AIRCR_VECTKEY_Msk=(0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)
   SCB_AIRCR_VECTKEY_Pos=16
   SCB_AIRCR_VECTRESET_Msk=(1UL )
   SCB_AIRCR_VECTRESET_Pos=0
   SCB_BASE=(SCS_BASE + 0x0D00UL)
   SCB_CCR_BFHFNMIGN_Msk=(1UL << SCB_CCR_BFHFNMIGN_Pos)
   SCB_CCR_BFHFNMIGN_Pos=8
   SCB_CCR_DIV_0_TRP_Msk=(1UL << SCB_CCR_DIV_0_TRP_Pos)
   SCB_CCR_DIV_0_TRP_Pos=4
   SCB_CCR_NONBASETHRDENA_Msk=(1UL )
   SCB_CCR_NONBASETHRDENA_Pos=0
   SCB_CCR_STKALIGN_Msk=(1UL << SCB_CCR_STKALIGN_Pos)
   SCB_CCR_STKALIGN_Pos=9
   SCB_CCR_UNALIGN_TRP_Msk=(1UL << SCB_CCR_UNALIGN_TRP_Pos)
   SCB_CCR_UNALIGN_TRP_Pos=3
   SCB_CCR_USERSETMPEND_Msk=(1UL << SCB_CCR_USERSETMPEND_Pos)
   SCB_CCR_USERSETMPEND_Pos=1
   SCB_CFSR_BUSFAULTSR_Msk=(0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)
   SCB_CFSR_BUSFAULTSR_Pos=8
   SCB_CFSR_MEMFAULTSR_Msk=(0xFFUL )
   SCB_CFSR_MEMFAULTSR_Pos=0
   SCB_CFSR_USGFAULTSR_Msk=(0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)
   SCB_CFSR_USGFAULTSR_Pos=16
   SCB_CPUID_ARCHITECTURE_Msk=(0xFUL << SCB_CPUID_ARCHITECTURE_Pos)
   SCB_CPUID_ARCHITECTURE_Pos=16
   SCB_CPUID_IMPLEMENTER_Msk=(0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)
   SCB_CPUID_IMPLEMENTER_Pos=24
   SCB_CPUID_PARTNO_Msk=(0xFFFUL << SCB_CPUID_PARTNO_Pos)
   SCB_CPUID_PARTNO_Pos=4
   SCB_CPUID_REVISION_Msk=(0xFUL )
   SCB_CPUID_REVISION_Pos=0
   SCB_CPUID_VARIANT_Msk=(0xFUL << SCB_CPUID_VARIANT_Pos)
   SCB_CPUID_VARIANT_Pos=20
   SCB_DFSR_BKPT_Msk=(1UL << SCB_DFSR_BKPT_Pos)
   SCB_DFSR_BKPT_Pos=1
   SCB_DFSR_DWTTRAP_Msk=(1UL << SCB_DFSR_DWTTRAP_Pos)
   SCB_DFSR_DWTTRAP_Pos=2
   SCB_DFSR_EXTERNAL_Msk=(1UL << SCB_DFSR_EXTERNAL_Pos)
   SCB_DFSR_EXTERNAL_Pos=4
   SCB_DFSR_HALTED_Msk=(1UL )
   SCB_DFSR_HALTED_Pos=0
   SCB_DFSR_VCATCH_Msk=(1UL << SCB_DFSR_VCATCH_Pos)
   SCB_DFSR_VCATCH_Pos=3
   SCB_HFSR_DEBUGEVT_Msk=(1UL << SCB_HFSR_DEBUGEVT_Pos)
   SCB_HFSR_DEBUGEVT_Pos=31
   SCB_HFSR_FORCED_Msk=(1UL << SCB_HFSR_FORCED_Pos)
   SCB_HFSR_FORCED_Pos=30
   SCB_HFSR_VECTTBL_Msk=(1UL << SCB_HFSR_VECTTBL_Pos)
   SCB_HFSR_VECTTBL_Pos=1
   SCB_ICSR_ISRPENDING_Msk=(1UL << SCB_ICSR_ISRPENDING_Pos)
   SCB_ICSR_ISRPENDING_Pos=22
   SCB_ICSR_ISRPREEMPT_Msk=(1UL << SCB_ICSR_ISRPREEMPT_Pos)
   SCB_ICSR_ISRPREEMPT_Pos=23
   SCB_ICSR_NMIPENDSET_Msk=(1UL << SCB_ICSR_NMIPENDSET_Pos)
   SCB_ICSR_NMIPENDSET_Pos=31
   SCB_ICSR_PENDSTCLR_Msk=(1UL << SCB_ICSR_PENDSTCLR_Pos)
   SCB_ICSR_PENDSTCLR_Pos=25
   SCB_ICSR_PENDSTSET_Msk=(1UL << SCB_ICSR_PENDSTSET_Pos)
   SCB_ICSR_PENDSTSET_Pos=26
   SCB_ICSR_PENDSVCLR_Msk=(1UL << SCB_ICSR_PENDSVCLR_Pos)
   SCB_ICSR_PENDSVCLR_Pos=27
   SCB_ICSR_PENDSVSET_Msk=(1UL << SCB_ICSR_PENDSVSET_Pos)
   SCB_ICSR_PENDSVSET_Pos=28
   SCB_ICSR_RETTOBASE_Msk=(1UL << SCB_ICSR_RETTOBASE_Pos)
   SCB_ICSR_RETTOBASE_Pos=11
   SCB_ICSR_VECTACTIVE_Msk=(0x1FFUL )
   SCB_ICSR_VECTACTIVE_Pos=0
   SCB_ICSR_VECTPENDING_Msk=(0x1FFUL << SCB_ICSR_VECTPENDING_Pos)
   SCB_ICSR_VECTPENDING_Pos=12
   SCB_SCR_SEVONPEND_Msk=(1UL << SCB_SCR_SEVONPEND_Pos)
   SCB_SCR_SEVONPEND_Pos=4
   SCB_SCR_SLEEPDEEP_Msk=(1UL << SCB_SCR_SLEEPDEEP_Pos)
   SCB_SCR_SLEEPDEEP_Pos=2
   SCB_SCR_SLEEPONEXIT_Msk=(1UL << SCB_SCR_SLEEPONEXIT_Pos)
   SCB_SCR_SLEEPONEXIT_Pos=1
   SCB_SHCSR_BUSFAULTACT_Msk=(1UL << SCB_SHCSR_BUSFAULTACT_Pos)
   SCB_SHCSR_BUSFAULTACT_Pos=1
   SCB_SHCSR_BUSFAULTENA_Msk=(1UL << SCB_SHCSR_BUSFAULTENA_Pos)
   SCB_SHCSR_BUSFAULTENA_Pos=17
   SCB_SHCSR_BUSFAULTPENDED_Msk=(1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)
   SCB_SHCSR_BUSFAULTPENDED_Pos=14
   SCB_SHCSR_MEMFAULTACT_Msk=(1UL )
   SCB_SHCSR_MEMFAULTACT_Pos=0
   SCB_SHCSR_MEMFAULTENA_Msk=(1UL << SCB_SHCSR_MEMFAULTENA_Pos)
   SCB_SHCSR_MEMFAULTENA_Pos=16
   SCB_SHCSR_MEMFAULTPENDED_Msk=(1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)
   SCB_SHCSR_MEMFAULTPENDED_Pos=13
   SCB_SHCSR_MONITORACT_Msk=(1UL << SCB_SHCSR_MONITORACT_Pos)
   SCB_SHCSR_MONITORACT_Pos=8
   SCB_SHCSR_PENDSVACT_Msk=(1UL << SCB_SHCSR_PENDSVACT_Pos)
   SCB_SHCSR_PENDSVACT_Pos=10
   SCB_SHCSR_SVCALLACT_Msk=(1UL << SCB_SHCSR_SVCALLACT_Pos)
   SCB_SHCSR_SVCALLACT_Pos=7
   SCB_SHCSR_SVCALLPENDED_Msk=(1UL << SCB_SHCSR_SVCALLPENDED_Pos)
   SCB_SHCSR_SVCALLPENDED_Pos=15
   SCB_SHCSR_SYSTICKACT_Msk=(1UL << SCB_SHCSR_SYSTICKACT_Pos)
   SCB_SHCSR_SYSTICKACT_Pos=11
   SCB_SHCSR_USGFAULTACT_Msk=(1UL << SCB_SHCSR_USGFAULTACT_Pos)
   SCB_SHCSR_USGFAULTACT_Pos=3
   SCB_SHCSR_USGFAULTENA_Msk=(1UL << SCB_SHCSR_USGFAULTENA_Pos)
   SCB_SHCSR_USGFAULTENA_Pos=18
   SCB_SHCSR_USGFAULTPENDED_Msk=(1UL << SCB_SHCSR_USGFAULTPENDED_Pos)
   SCB_SHCSR_USGFAULTPENDED_Pos=12
   SCB_VTOR_TBLOFF_Msk=(0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)
   SCB_VTOR_TBLOFF_Pos=7
   SCHED_FIFO=1
   SCHED_OTHER=0
   SCHED_RR=2
   SCnSCB=((SCnSCB_Type *) SCS_BASE )
   SCnSCB_ACTLR_DISDEFWBUF_Msk=(1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)
   SCnSCB_ACTLR_DISDEFWBUF_Pos=1
   SCnSCB_ACTLR_DISFOLD_Msk=(1UL << SCnSCB_ACTLR_DISFOLD_Pos)
   SCnSCB_ACTLR_DISFOLD_Pos=2
   SCnSCB_ACTLR_DISFPCA_Msk=(1UL << SCnSCB_ACTLR_DISFPCA_Pos)
   SCnSCB_ACTLR_DISFPCA_Pos=8
   SCnSCB_ACTLR_DISMCYCINT_Msk=(1UL )
   SCnSCB_ACTLR_DISMCYCINT_Pos=0
   SCnSCB_ACTLR_DISOOFP_Msk=(1UL << SCnSCB_ACTLR_DISOOFP_Pos)
   SCnSCB_ACTLR_DISOOFP_Pos=9
   SCnSCB_ICTR_INTLINESNUM_Msk=(0xFUL )
   SCnSCB_ICTR_INTLINESNUM_Pos=0
   SCREEN_HPP=
   SCROLLABLECONTAINER_HPP=
   SCS_BASE=(0xE000E000UL)
   SDCLOCK_PERIOD=FMC_SDRAM_CLOCK_PERIOD_2
   SDIO=((SDIO_TypeDef *) SDIO_BASE)
   SDIO_ARG_CMDARG=((uint32_t)0xFFFFFFFF)
   SDIO_BASE=(APB2PERIPH_BASE + 0x2C00)
   SDIO_CLKCR_BYPASS=((uint32_t)0x0400)
   SDIO_CLKCR_CLKDIV=((uint32_t)0x00FF)
   SDIO_CLKCR_CLKEN=((uint32_t)0x0100)
   SDIO_CLKCR_HWFC_EN=((uint32_t)0x4000)
   SDIO_CLKCR_NEGEDGE=((uint32_t)0x2000)
   SDIO_CLKCR_PWRSAV=((uint32_t)0x0200)
   SDIO_CLKCR_WIDBUS=((uint32_t)0x1800)
   SDIO_CLKCR_WIDBUS_0=((uint32_t)0x0800)
   SDIO_CLKCR_WIDBUS_1=((uint32_t)0x1000)
   SDIO_CMD_CMDINDEX=((uint32_t)0x003F)
   SDIO_CMD_CPSMEN=((uint32_t)0x0400)
   SDIO_CMD_SDIOSUSPEND=((uint32_t)0x0800)
   SDIO_CMD_WAITINT=((uint32_t)0x0100)
   SDIO_CMD_WAITPEND=((uint32_t)0x0200)
   SDIO_CMD_WAITRESP=((uint32_t)0x00C0)
   SDIO_CMD_WAITRESP_0=((uint32_t)0x0040)
   SDIO_CMD_WAITRESP_1=((uint32_t)0x0080)
   SDIO_DCOUNT_DATACOUNT=((uint32_t)0x01FFFFFF)
   SDIO_DCTRL_DBLOCKSIZE=((uint32_t)0x00F0)
   SDIO_DCTRL_DBLOCKSIZE_0=((uint32_t)0x0010)
   SDIO_DCTRL_DBLOCKSIZE_1=((uint32_t)0x0020)
   SDIO_DCTRL_DBLOCKSIZE_2=((uint32_t)0x0040)
   SDIO_DCTRL_DBLOCKSIZE_3=((uint32_t)0x0080)
   SDIO_DCTRL_DMAEN=((uint32_t)0x0008)
   SDIO_DCTRL_DTDIR=((uint32_t)0x0002)
   SDIO_DCTRL_DTEN=((uint32_t)0x0001)
   SDIO_DCTRL_DTMODE=((uint32_t)0x0004)
   SDIO_DCTRL_RWMOD=((uint32_t)0x0400)
   SDIO_DCTRL_RWSTART=((uint32_t)0x0100)
   SDIO_DCTRL_RWSTOP=((uint32_t)0x0200)
   SDIO_DCTRL_SDIOEN=((uint32_t)0x0800)
   SDIO_DLEN_DATALENGTH=((uint32_t)0x01FFFFFF)
   SDIO_DTIMER_DATATIME=((uint32_t)0xFFFFFFFF)
   SDIO_FIFOCNT_FIFOCOUNT=((uint32_t)0x00FFFFFF)
   SDIO_FIFO_FIFODATA=((uint32_t)0xFFFFFFFF)
   SDIO_ICR_CCRCFAILC=((uint32_t)0x00000001)
   SDIO_ICR_CMDRENDC=((uint32_t)0x00000040)
   SDIO_ICR_CMDSENTC=((uint32_t)0x00000080)
   SDIO_ICR_CTIMEOUTC=((uint32_t)0x00000004)
   SDIO_ICR_DATAENDC=((uint32_t)0x00000100)
   SDIO_ICR_DBCKENDC=((uint32_t)0x00000400)
   SDIO_ICR_DCRCFAILC=((uint32_t)0x00000002)
   SDIO_ICR_DTIMEOUTC=((uint32_t)0x00000008)
   SDIO_ICR_RXOVERRC=((uint32_t)0x00000020)
   SDIO_ICR_SDIOITC=((uint32_t)0x00400000)
   SDIO_ICR_TXUNDERRC=((uint32_t)0x00000010)
   SDIO_MASK_CCRCFAILIE=((uint32_t)0x00000001)
   SDIO_MASK_CMDACTIE=((uint32_t)0x00000800)
   SDIO_MASK_CMDRENDIE=((uint32_t)0x00000040)
   SDIO_MASK_CMDSENTIE=((uint32_t)0x00000080)
   SDIO_MASK_CTIMEOUTIE=((uint32_t)0x00000004)
   SDIO_MASK_DATAENDIE=((uint32_t)0x00000100)
   SDIO_MASK_DBCKENDIE=((uint32_t)0x00000400)
   SDIO_MASK_DCRCFAILIE=((uint32_t)0x00000002)
   SDIO_MASK_DTIMEOUTIE=((uint32_t)0x00000008)
   SDIO_MASK_RXACTIE=((uint32_t)0x00002000)
   SDIO_MASK_RXDAVLIE=((uint32_t)0x00200000)
   SDIO_MASK_RXFIFOEIE=((uint32_t)0x00080000)
   SDIO_MASK_RXFIFOFIE=((uint32_t)0x00020000)
   SDIO_MASK_RXFIFOHFIE=((uint32_t)0x00008000)
   SDIO_MASK_RXOVERRIE=((uint32_t)0x00000020)
   SDIO_MASK_SDIOITIE=((uint32_t)0x00400000)
   SDIO_MASK_TXACTIE=((uint32_t)0x00001000)
   SDIO_MASK_TXDAVLIE=((uint32_t)0x00100000)
   SDIO_MASK_TXFIFOEIE=((uint32_t)0x00040000)
   SDIO_MASK_TXFIFOFIE=((uint32_t)0x00010000)
   SDIO_MASK_TXFIFOHEIE=((uint32_t)0x00004000)
   SDIO_MASK_TXUNDERRIE=((uint32_t)0x00000010)
   SDIO_POWER_PWRCTRL=((uint32_t)0x03)
   SDIO_POWER_PWRCTRL_0=((uint32_t)0x01)
   SDIO_POWER_PWRCTRL_1=((uint32_t)0x02)
   SDIO_RESP0_CARDSTATUS0=((uint32_t)0xFFFFFFFF)
   SDIO_RESP1_CARDSTATUS1=((uint32_t)0xFFFFFFFF)
   SDIO_RESP2_CARDSTATUS2=((uint32_t)0xFFFFFFFF)
   SDIO_RESP3_CARDSTATUS3=((uint32_t)0xFFFFFFFF)
   SDIO_RESP4_CARDSTATUS4=((uint32_t)0xFFFFFFFF)
   SDIO_RESPCMD_RESPCMD=((uint32_t)0x3F)
   SDIO_STA_CCRCFAIL=((uint32_t)0x00000001)
   SDIO_STA_CMDACT=((uint32_t)0x00000800)
   SDIO_STA_CMDREND=((uint32_t)0x00000040)
   SDIO_STA_CMDSENT=((uint32_t)0x00000080)
   SDIO_STA_CTIMEOUT=((uint32_t)0x00000004)
   SDIO_STA_DATAEND=((uint32_t)0x00000100)
   SDIO_STA_DBCKEND=((uint32_t)0x00000400)
   SDIO_STA_DCRCFAIL=((uint32_t)0x00000002)
   SDIO_STA_DTIMEOUT=((uint32_t)0x00000008)
   SDIO_STA_RXACT=((uint32_t)0x00002000)
   SDIO_STA_RXDAVL=((uint32_t)0x00200000)
   SDIO_STA_RXFIFOE=((uint32_t)0x00080000)
   SDIO_STA_RXFIFOF=((uint32_t)0x00020000)
   SDIO_STA_RXFIFOHF=((uint32_t)0x00008000)
   SDIO_STA_RXOVERR=((uint32_t)0x00000020)
   SDIO_STA_SDIOIT=((uint32_t)0x00400000)
   SDIO_STA_TXACT=((uint32_t)0x00001000)
   SDIO_STA_TXDAVL=((uint32_t)0x00100000)
   SDIO_STA_TXFIFOE=((uint32_t)0x00040000)
   SDIO_STA_TXFIFOF=((uint32_t)0x00010000)
   SDIO_STA_TXFIFOHE=((uint32_t)0x00004000)
   SDIO_STA_TXUNDERR=((uint32_t)0x00000010)
   Sdmmc1ClockSelection=SdioClockSelection
   SDMMC1_IRQHandler=SDIO_IRQHandler
   SDMMC1_IRQn=SDIO_IRQn
   SDMMC_CMD0TIMEOUT=SDIO_CMD0TIMEOUT
   SDMMC_STATIC_FLAGS=SDIO_STATIC_FLAGS
   SDRAM_DEVICE_ADDR=((uint32_t)0xC0000000)
   SDRAM_DEVICE_SIZE=((uint32_t)0x800000)
   SDRAM_DMAx_CHANNEL=DMA_CHANNEL_0
   SDRAM_DMAx_IRQHandler=DMA2_Stream0_IRQHandler
   SDRAM_DMAx_IRQn=DMA2_Stream0_IRQn
   SDRAM_DMAx_STREAM=DMA2_Stream0
   SDRAM_ERROR=((uint8_t)0x01)
   SDRAM_MEMORY_WIDTH=FMC_SDRAM_MEM_BUS_WIDTH_32
   SDRAM_MODEREG_BURST_LENGTH_1=((uint16_t)0x0000)
   SDRAM_MODEREG_BURST_LENGTH_2=((uint16_t)0x0001)
   SDRAM_MODEREG_BURST_LENGTH_4=((uint16_t)0x0002)
   SDRAM_MODEREG_BURST_LENGTH_8=((uint16_t)0x0004)
   SDRAM_MODEREG_BURST_TYPE_INTERLEAVED=((uint16_t)0x0008)
   SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL=((uint16_t)0x0000)
   SDRAM_MODEREG_CAS_LATENCY_2=((uint16_t)0x0020)
   SDRAM_MODEREG_CAS_LATENCY_3=((uint16_t)0x0030)
   SDRAM_MODEREG_OPERATING_MODE_STANDARD=((uint16_t)0x0000)
   SDRAM_MODEREG_WRITEBURST_MODE_PROGRAMMED=((uint16_t)0x0000)
   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE=((uint16_t)0x0200)
   SDRAM_OK=((uint8_t)0x00)
   SDRAM_TIMEOUT=((uint32_t)0xFFFF)
   SD_CMD_SDMMC_RW_DIRECT=SD_CMD_SDIO_RW_DIRECT
   SD_CMD_SDMMC_RW_EXTENDED=SD_CMD_SDIO_RW_EXTENDED
   SD_CMD_SDMMC_SEN_OP_COND=SD_CMD_SDIO_SEN_OP_COND
   SD_CMD_SD_APP_STAUS=SD_CMD_SD_APP_STATUS
   SD_DETECT_EXTI_IRQn=EXTI2_IRQn
   SD_DETECT_GPIO_CLK_DISABLE()=__HAL_RCC_GPIOG_CLK_DISABLE()
   SD_DETECT_GPIO_CLK_ENABLE()=__HAL_RCC_GPIOG_CLK_ENABLE()
   SD_DETECT_GPIO_PORT=((GPIO_TypeDef*)GPIOG)
   SD_DETECT_PIN=((uint32_t)GPIO_PIN_2)
   SD_OCR_CID_CSD_OVERWRIETE=SD_OCR_CID_CSD_OVERWRITE
   SD_SDMMC_DISABLED=SD_SDIO_DISABLED
   SD_SDMMC_FUNCTION_BUSY=SD_SDIO_FUNCTION_BUSY
   SD_SDMMC_FUNCTION_FAILED=SD_SDIO_FUNCTION_FAILED
   SD_SDMMC_SEND_IF_COND=SD_SDIO_SEND_IF_COND
   SD_SDMMC_UNKNOWN_FUNCTION=SD_SDIO_UNKNOWN_FUNCTION
   SECTOR_ERASE_CMD=0xD8
   SEEK_CUR=1
   SEEK_END=2
   SEEK_SET=0
   SETTINGSCREEN_PRESENTER_HPP=
   SETTINGSCREEN_VIEW_BASE_HPP=
   SETTINGSCREEN_VIEW_HPP=
   SET_BIT(REG,BIT)=((REG) |= (BIT))
   short=+1
   SIGABRT=6
   sigaddset(what,sig)=(*(what) |= (1<<(sig)), 0)
   SIGALRM=14
   SIGBUS=10
   SIGCHLD=20
   SIGCLD=20
   SIGCONT=19
   sigdelset(what,sig)=(*(what) &= ~(1<<(sig)), 0)
   sigemptyset(what)=(*(what) = 0, 0)
   SIGEMT=7
   SIGEV_NONE=1
   SIGEV_SIGNAL=2
   SIGEV_THREAD=3
   sigfillset(what)=(*(what) = ~(0), 0)
   SIGFPE=8
   SIGHUP=1
   SIGILL=4
   SIGINT=2
   SIGIO=23
   SIGIOT=6
   sigismember(what,sig)=(((*(what)) & (1<<(sig))) != 0)
   SIGKILL=9
   SIGLOST=29
   signbit(__x)=((sizeof(__x) == sizeof(float)) ? __builtin_signbitf(__x) : (sizeof(__x) == sizeof(double)) ? __builtin_signbit (__x) : __builtin_signbitl(__x))
   signed=+0
   signgam=(*__signgam())
   SIGPIPE=13
   SIGPOLL=SIGIO
   SIGPROF=27
   SIGQUIT=3
   SIGSEGV=11
   SIGSTKSZ=8192
   SIGSTOP=17
   SIGSYS=12
   SIGTERM=15
   SIGTRAP=5
   SIGTSTP=18
   SIGTTIN=21
   SIGTTOU=22
   SIGURG=16
   SIGUSR1=30
   SIGUSR2=31
   SIGVTALRM=26
   SIGWINCH=28
   SIGXCPU=24
   SIGXFSZ=25
   SIG_ATOMIC_MAX=(__STDINT_EXP(INT_MAX))
   SIG_ATOMIC_MIN=(-__STDINT_EXP(INT_MAX) - 1)
   SIG_BLOCK=1
   SIG_DFL=((_sig_func_ptr)0)
   SIG_ERR=((_sig_func_ptr)-1)
   SIG_IGN=((_sig_func_ptr)1)
   SIG_SETMASK=0
   SIG_UNBLOCK=2
   SING=2
   SIZE_MAX=(__SIZE_MAX__)
   SI_ASYNCIO=4
   SI_MESGQ=5
   SI_QUEUE=2
   SI_TIMER=3
   SI_USER=1
   SLAK_TIMEOUT=CAN_TIMEOUT_VALUE
   SLIDER_HPP=
   SLIDETRANSITION_HPP=
   SMARTCARD_LASTBIT_DISABLED=SMARTCARD_LASTBIT_DISABLE
   SMARTCARD_LASTBIT_ENABLED=SMARTCARD_LASTBIT_ENABLE
   SMARTCARD_NACK_DISABLED=SMARTCARD_NACK_DISABLE
   SMARTCARD_NACK_ENABLED=SMARTCARD_NACK_ENABLE
   SMARTCARD_ONEBIT_SAMPLING_DISABLE=SMARTCARD_ONE_BIT_SAMPLE_DISABLE
   SMARTCARD_ONEBIT_SAMPLING_DISABLED=SMARTCARD_ONE_BIT_SAMPLE_DISABLE
   SMARTCARD_ONEBIT_SAMPLING_ENABLE=SMARTCARD_ONE_BIT_SAMPLE_ENABLE
   SMARTCARD_ONEBIT_SAMPLING_ENABLED=SMARTCARD_ONE_BIT_SAMPLE_ENABLE
   SMARTCARD_TIMEOUT_DISABLED=SMARTCARD_TIMEOUT_DISABLE
   SMARTCARD_TIMEOUT_ENABLED=SMARTCARD_TIMEOUT_ENABLE
   SMBUS_ANALOGFILTER_DISABLED=SMBUS_ANALOGFILTER_DISABLE
   SMBUS_ANALOGFILTER_ENABLED=SMBUS_ANALOGFILTER_ENABLE
   SMBUS_DUALADDRESS_DISABLED=SMBUS_DUALADDRESS_DISABLE
   SMBUS_DUALADDRESS_ENABLED=SMBUS_DUALADDRESS_ENABLE
   SMBUS_GENERALCALL_DISABLED=SMBUS_GENERALCALL_DISABLE
   SMBUS_GENERALCALL_ENABLED=SMBUS_GENERALCALL_ENABLE
   SMBUS_NOSTRETCH_DISABLED=SMBUS_NOSTRETCH_DISABLE
   SMBUS_NOSTRETCH_ENABLED=SMBUS_NOSTRETCH_ENABLE
   SMBUS_PEC_DISABLED=SMBUS_PEC_DISABLE
   SMBUS_PEC_ENABLED=SMBUS_PEC_ENABLE
   SNAPSHOTWIDGET_HPP=
   SPI1=((SPI_TypeDef *) SPI1_BASE)
   SPI1_BASE=(APB2PERIPH_BASE + 0x3000)
   SPI2=((SPI_TypeDef *) SPI2_BASE)
   SPI2_BASE=(APB1PERIPH_BASE + 0x3800)
   SPI3=((SPI_TypeDef *) SPI3_BASE)
   SPI3_BASE=(APB1PERIPH_BASE + 0x3C00)
   SPI4=((SPI_TypeDef *) SPI4_BASE)
   SPI4_BASE=(APB2PERIPH_BASE + 0x3400)
   SPI5=((SPI_TypeDef *) SPI5_BASE)
   SPI5_BASE=(APB2PERIPH_BASE + 0x5000)
   SPI6=((SPI_TypeDef *) SPI6_BASE)
   SPI6_BASE=(APB2PERIPH_BASE + 0x5400)
   SPI_CR1_BIDIMODE=((uint32_t)0x00008000)
   SPI_CR1_BIDIOE=((uint32_t)0x00004000)
   SPI_CR1_BR=((uint32_t)0x00000038)
   SPI_CR1_BR_0=((uint32_t)0x00000008)
   SPI_CR1_BR_1=((uint32_t)0x00000010)
   SPI_CR1_BR_2=((uint32_t)0x00000020)
   SPI_CR1_CPHA=((uint32_t)0x00000001)
   SPI_CR1_CPOL=((uint32_t)0x00000002)
   SPI_CR1_CRCEN=((uint32_t)0x00002000)
   SPI_CR1_CRCNEXT=((uint32_t)0x00001000)
   SPI_CR1_DFF=((uint32_t)0x00000800)
   SPI_CR1_LSBFIRST=((uint32_t)0x00000080)
   SPI_CR1_MSTR=((uint32_t)0x00000004)
   SPI_CR1_RXONLY=((uint32_t)0x00000400)
   SPI_CR1_SPE=((uint32_t)0x00000040)
   SPI_CR1_SSI=((uint32_t)0x00000100)
   SPI_CR1_SSM=((uint32_t)0x00000200)
   SPI_CR2_ERRIE=((uint32_t)0x00000020)
   SPI_CR2_FRF=((uint32_t)0x00000010)
   SPI_CR2_RXDMAEN=((uint32_t)0x00000001)
   SPI_CR2_RXNEIE=((uint32_t)0x00000040)
   SPI_CR2_SSOE=((uint32_t)0x00000004)
   SPI_CR2_TXDMAEN=((uint32_t)0x00000002)
   SPI_CR2_TXEIE=((uint32_t)0x00000080)
   SPI_CRCCALCULATION_DISABLED=SPI_CRCCALCULATION_DISABLE
   SPI_CRCCALCULATION_ENABLED=SPI_CRCCALCULATION_ENABLE
   SPI_CRCPR_CRCPOLY=((uint32_t)0x0000FFFF)
   SPI_DR_DR=((uint32_t)0x0000FFFF)
   SPI_I2SCFGR_ASTRTEN=((uint32_t)0x00001000)
   SPI_I2SCFGR_CHLEN=((uint32_t)0x00000001)
   SPI_I2SCFGR_CKPOL=((uint32_t)0x00000008)
   SPI_I2SCFGR_DATLEN=((uint32_t)0x00000006)
   SPI_I2SCFGR_DATLEN_0=((uint32_t)0x00000002)
   SPI_I2SCFGR_DATLEN_1=((uint32_t)0x00000004)
   SPI_I2SCFGR_I2SCFG=((uint32_t)0x00000300)
   SPI_I2SCFGR_I2SCFG_0=((uint32_t)0x00000100)
   SPI_I2SCFGR_I2SCFG_1=((uint32_t)0x00000200)
   SPI_I2SCFGR_I2SE=((uint32_t)0x00000400)
   SPI_I2SCFGR_I2SMOD=((uint32_t)0x00000800)
   SPI_I2SCFGR_I2SSTD=((uint32_t)0x00000030)
   SPI_I2SCFGR_I2SSTD_0=((uint32_t)0x00000010)
   SPI_I2SCFGR_I2SSTD_1=((uint32_t)0x00000020)
   SPI_I2SCFGR_PCMSYNC=((uint32_t)0x00000080)
   SPI_I2SPR_I2SDIV=((uint32_t)0x000000FF)
   SPI_I2SPR_MCKOE=((uint32_t)0x00000200)
   SPI_I2SPR_ODD=((uint32_t)0x00000100)
   SPI_NSS_PULSE_DISABLED=SPI_NSS_PULSE_DISABLE
   SPI_NSS_PULSE_ENABLED=SPI_NSS_PULSE_ENABLE
   SPI_RXCRCR_RXCRC=((uint32_t)0x0000FFFF)
   SPI_SR_BSY=((uint32_t)0x00000080)
   SPI_SR_CHSIDE=((uint32_t)0x00000004)
   SPI_SR_CRCERR=((uint32_t)0x00000010)
   SPI_SR_FRE=((uint32_t)0x00000100)
   SPI_SR_MODF=((uint32_t)0x00000020)
   SPI_SR_OVR=((uint32_t)0x00000040)
   SPI_SR_RXNE=((uint32_t)0x00000001)
   SPI_SR_TXE=((uint32_t)0x00000002)
   SPI_SR_UDR=((uint32_t)0x00000008)
   SPI_TIMODE_DISABLED=SPI_TIMODE_DISABLE
   SPI_TIMODE_ENABLED=SPI_TIMODE_ENABLE
   SPI_TXCRCR_TXCRC=((uint32_t)0x0000FFFF)
   SRAM1_BASE=((uint32_t)0x20000000)
   SRAM1_BB_BASE=((uint32_t)0x22000000)
   SRAM2_BASE=((uint32_t)0x20028000)
   SRAM2_BB_BASE=((uint32_t)0x22500000)
   SRAM3_BASE=((uint32_t)0x20030000)
   SRAM3_BB_BASE=((uint32_t)0x22600000)
   SRAM_BASE=SRAM1_BASE
   SRAM_BB_BASE=SRAM1_BB_BASE
   SS_DISABLE=0x2
   SS_ONSTACK=0x1
   STARMAPSCREEN_PRESENTER_HPP=
   STARMAPSCREEN_VIEW_BASE_HPP=
   STARMAPSCREEN_VIEW_HPP=
   STDC_HEADERS=1
   stderr=(_REENT->_stderr)
   stdin=(_REENT->_stdin)
   stdout=(_REENT->_stdout)
   STM32F4=
   STM32F4DMA_HPP=
   STM32F4HAL_DSI_HPP=
   strtodf=strtof
   SUBSECTOR_ERASE_CMD=0x20
   SYSCFG=((SYSCFG_TypeDef *) SYSCFG_BASE)
   SYSCFG_BASE=(APB2PERIPH_BASE + 0x3800)
   SYSCFG_CMPCR_CMP_PD=((uint32_t)0x00000001)
   SYSCFG_CMPCR_READY=((uint32_t)0x00000100)
   SYSCFG_EXTICR1_EXTI0=((uint32_t)0x000F)
   SYSCFG_EXTICR1_EXTI0_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR1_EXTI0_PB=((uint32_t)0x0001)
   SYSCFG_EXTICR1_EXTI0_PC=((uint32_t)0x0002)
   SYSCFG_EXTICR1_EXTI0_PD=((uint32_t)0x0003)
   SYSCFG_EXTICR1_EXTI0_PE=((uint32_t)0x0004)
   SYSCFG_EXTICR1_EXTI0_PF=((uint32_t)0x0005)
   SYSCFG_EXTICR1_EXTI0_PG=((uint32_t)0x0006)
   SYSCFG_EXTICR1_EXTI0_PH=((uint32_t)0x0007)
   SYSCFG_EXTICR1_EXTI0_PI=((uint32_t)0x0008)
   SYSCFG_EXTICR1_EXTI0_PJ=((uint32_t)0x0009)
   SYSCFG_EXTICR1_EXTI0_PK=((uint32_t)0x000A)
   SYSCFG_EXTICR1_EXTI1=((uint32_t)0x00F0)
   SYSCFG_EXTICR1_EXTI1_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR1_EXTI1_PB=((uint32_t)0x0010)
   SYSCFG_EXTICR1_EXTI1_PC=((uint32_t)0x0020)
   SYSCFG_EXTICR1_EXTI1_PD=((uint32_t)0x0030)
   SYSCFG_EXTICR1_EXTI1_PE=((uint32_t)0x0040)
   SYSCFG_EXTICR1_EXTI1_PF=((uint32_t)0x0050)
   SYSCFG_EXTICR1_EXTI1_PG=((uint32_t)0x0060)
   SYSCFG_EXTICR1_EXTI1_PH=((uint32_t)0x0070)
   SYSCFG_EXTICR1_EXTI1_PI=((uint32_t)0x0080)
   SYSCFG_EXTICR1_EXTI1_PJ=((uint32_t)0x0090)
   SYSCFG_EXTICR1_EXTI1_PK=((uint32_t)0x00A0)
   SYSCFG_EXTICR1_EXTI2=((uint32_t)0x0F00)
   SYSCFG_EXTICR1_EXTI2_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR1_EXTI2_PB=((uint32_t)0x0100)
   SYSCFG_EXTICR1_EXTI2_PC=((uint32_t)0x0200)
   SYSCFG_EXTICR1_EXTI2_PD=((uint32_t)0x0300)
   SYSCFG_EXTICR1_EXTI2_PE=((uint32_t)0x0400)
   SYSCFG_EXTICR1_EXTI2_PF=((uint32_t)0x0500)
   SYSCFG_EXTICR1_EXTI2_PG=((uint32_t)0x0600)
   SYSCFG_EXTICR1_EXTI2_PH=((uint32_t)0x0700)
   SYSCFG_EXTICR1_EXTI2_PI=((uint32_t)0x0800)
   SYSCFG_EXTICR1_EXTI2_PJ=((uint32_t)0x0900)
   SYSCFG_EXTICR1_EXTI2_PK=((uint32_t)0x0A00)
   SYSCFG_EXTICR1_EXTI3=((uint32_t)0xF000)
   SYSCFG_EXTICR1_EXTI3_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR1_EXTI3_PB=((uint32_t)0x1000)
   SYSCFG_EXTICR1_EXTI3_PC=((uint32_t)0x2000)
   SYSCFG_EXTICR1_EXTI3_PD=((uint32_t)0x3000)
   SYSCFG_EXTICR1_EXTI3_PE=((uint32_t)0x4000)
   SYSCFG_EXTICR1_EXTI3_PF=((uint32_t)0x5000)
   SYSCFG_EXTICR1_EXTI3_PG=((uint32_t)0x6000)
   SYSCFG_EXTICR1_EXTI3_PH=((uint32_t)0x7000)
   SYSCFG_EXTICR1_EXTI3_PI=((uint32_t)0x8000)
   SYSCFG_EXTICR1_EXTI3_PJ=((uint32_t)0x9000)
   SYSCFG_EXTICR1_EXTI3_PK=((uint32_t)0xA000)
   SYSCFG_EXTICR2_EXTI4=((uint32_t)0x000F)
   SYSCFG_EXTICR2_EXTI4_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR2_EXTI4_PB=((uint32_t)0x0001)
   SYSCFG_EXTICR2_EXTI4_PC=((uint32_t)0x0002)
   SYSCFG_EXTICR2_EXTI4_PD=((uint32_t)0x0003)
   SYSCFG_EXTICR2_EXTI4_PE=((uint32_t)0x0004)
   SYSCFG_EXTICR2_EXTI4_PF=((uint32_t)0x0005)
   SYSCFG_EXTICR2_EXTI4_PG=((uint32_t)0x0006)
   SYSCFG_EXTICR2_EXTI4_PH=((uint32_t)0x0007)
   SYSCFG_EXTICR2_EXTI4_PI=((uint32_t)0x0008)
   SYSCFG_EXTICR2_EXTI4_PJ=((uint32_t)0x0009)
   SYSCFG_EXTICR2_EXTI4_PK=((uint32_t)0x000A)
   SYSCFG_EXTICR2_EXTI5=((uint32_t)0x00F0)
   SYSCFG_EXTICR2_EXTI5_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR2_EXTI5_PB=((uint32_t)0x0010)
   SYSCFG_EXTICR2_EXTI5_PC=((uint32_t)0x0020)
   SYSCFG_EXTICR2_EXTI5_PD=((uint32_t)0x0030)
   SYSCFG_EXTICR2_EXTI5_PE=((uint32_t)0x0040)
   SYSCFG_EXTICR2_EXTI5_PF=((uint32_t)0x0050)
   SYSCFG_EXTICR2_EXTI5_PG=((uint32_t)0x0060)
   SYSCFG_EXTICR2_EXTI5_PH=((uint32_t)0x0070)
   SYSCFG_EXTICR2_EXTI5_PI=((uint32_t)0x0080)
   SYSCFG_EXTICR2_EXTI5_PJ=((uint32_t)0x0090)
   SYSCFG_EXTICR2_EXTI5_PK=((uint32_t)0x00A0)
   SYSCFG_EXTICR2_EXTI6=((uint32_t)0x0F00)
   SYSCFG_EXTICR2_EXTI6_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR2_EXTI6_PB=((uint32_t)0x0100)
   SYSCFG_EXTICR2_EXTI6_PC=((uint32_t)0x0200)
   SYSCFG_EXTICR2_EXTI6_PD=((uint32_t)0x0300)
   SYSCFG_EXTICR2_EXTI6_PE=((uint32_t)0x0400)
   SYSCFG_EXTICR2_EXTI6_PF=((uint32_t)0x0500)
   SYSCFG_EXTICR2_EXTI6_PG=((uint32_t)0x0600)
   SYSCFG_EXTICR2_EXTI6_PH=((uint32_t)0x0700)
   SYSCFG_EXTICR2_EXTI6_PI=((uint32_t)0x0800)
   SYSCFG_EXTICR2_EXTI6_PJ=((uint32_t)0x0900)
   SYSCFG_EXTICR2_EXTI6_PK=((uint32_t)0x0A00)
   SYSCFG_EXTICR2_EXTI7=((uint32_t)0xF000)
   SYSCFG_EXTICR2_EXTI7_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR2_EXTI7_PB=((uint32_t)0x1000)
   SYSCFG_EXTICR2_EXTI7_PC=((uint32_t)0x2000)
   SYSCFG_EXTICR2_EXTI7_PD=((uint32_t)0x3000)
   SYSCFG_EXTICR2_EXTI7_PE=((uint32_t)0x4000)
   SYSCFG_EXTICR2_EXTI7_PF=((uint32_t)0x5000)
   SYSCFG_EXTICR2_EXTI7_PG=((uint32_t)0x6000)
   SYSCFG_EXTICR2_EXTI7_PH=((uint32_t)0x7000)
   SYSCFG_EXTICR2_EXTI7_PI=((uint32_t)0x8000)
   SYSCFG_EXTICR2_EXTI7_PJ=((uint32_t)0x9000)
   SYSCFG_EXTICR2_EXTI7_PK=((uint32_t)0xA000)
   SYSCFG_EXTICR3_EXTI10=((uint32_t)0x0F00)
   SYSCFG_EXTICR3_EXTI10_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR3_EXTI10_PB=((uint32_t)0x0100)
   SYSCFG_EXTICR3_EXTI10_PC=((uint32_t)0x0200)
   SYSCFG_EXTICR3_EXTI10_PD=((uint32_t)0x0300)
   SYSCFG_EXTICR3_EXTI10_PE=((uint32_t)0x0400)
   SYSCFG_EXTICR3_EXTI10_PF=((uint32_t)0x0500)
   SYSCFG_EXTICR3_EXTI10_PG=((uint32_t)0x0600)
   SYSCFG_EXTICR3_EXTI10_PH=((uint32_t)0x0700)
   SYSCFG_EXTICR3_EXTI10_PI=((uint32_t)0x0800)
   SYSCFG_EXTICR3_EXTI10_PJ=((uint32_t)0x0900)
   SYSCFG_EXTICR3_EXTI11=((uint32_t)0xF000)
   SYSCFG_EXTICR3_EXTI11_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR3_EXTI11_PB=((uint32_t)0x1000)
   SYSCFG_EXTICR3_EXTI11_PC=((uint32_t)0x2000)
   SYSCFG_EXTICR3_EXTI11_PD=((uint32_t)0x3000)
   SYSCFG_EXTICR3_EXTI11_PE=((uint32_t)0x4000)
   SYSCFG_EXTICR3_EXTI11_PF=((uint32_t)0x5000)
   SYSCFG_EXTICR3_EXTI11_PG=((uint32_t)0x6000)
   SYSCFG_EXTICR3_EXTI11_PH=((uint32_t)0x7000)
   SYSCFG_EXTICR3_EXTI11_PI=((uint32_t)0x8000)
   SYSCFG_EXTICR3_EXTI11_PJ=((uint32_t)0x9000)
   SYSCFG_EXTICR3_EXTI8=((uint32_t)0x000F)
   SYSCFG_EXTICR3_EXTI8_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR3_EXTI8_PB=((uint32_t)0x0001)
   SYSCFG_EXTICR3_EXTI8_PC=((uint32_t)0x0002)
   SYSCFG_EXTICR3_EXTI8_PD=((uint32_t)0x0003)
   SYSCFG_EXTICR3_EXTI8_PE=((uint32_t)0x0004)
   SYSCFG_EXTICR3_EXTI8_PF=((uint32_t)0x0005)
   SYSCFG_EXTICR3_EXTI8_PG=((uint32_t)0x0006)
   SYSCFG_EXTICR3_EXTI8_PH=((uint32_t)0x0007)
   SYSCFG_EXTICR3_EXTI8_PI=((uint32_t)0x0008)
   SYSCFG_EXTICR3_EXTI8_PJ=((uint32_t)0x0009)
   SYSCFG_EXTICR3_EXTI9=((uint32_t)0x00F0)
   SYSCFG_EXTICR3_EXTI9_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR3_EXTI9_PB=((uint32_t)0x0010)
   SYSCFG_EXTICR3_EXTI9_PC=((uint32_t)0x0020)
   SYSCFG_EXTICR3_EXTI9_PD=((uint32_t)0x0030)
   SYSCFG_EXTICR3_EXTI9_PE=((uint32_t)0x0040)
   SYSCFG_EXTICR3_EXTI9_PF=((uint32_t)0x0050)
   SYSCFG_EXTICR3_EXTI9_PG=((uint32_t)0x0060)
   SYSCFG_EXTICR3_EXTI9_PH=((uint32_t)0x0070)
   SYSCFG_EXTICR3_EXTI9_PI=((uint32_t)0x0080)
   SYSCFG_EXTICR3_EXTI9_PJ=((uint32_t)0x0090)
   SYSCFG_EXTICR4_EXTI12=((uint32_t)0x000F)
   SYSCFG_EXTICR4_EXTI12_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR4_EXTI12_PB=((uint32_t)0x0001)
   SYSCFG_EXTICR4_EXTI12_PC=((uint32_t)0x0002)
   SYSCFG_EXTICR4_EXTI12_PD=((uint32_t)0x0003)
   SYSCFG_EXTICR4_EXTI12_PE=((uint32_t)0x0004)
   SYSCFG_EXTICR4_EXTI12_PF=((uint32_t)0x0005)
   SYSCFG_EXTICR4_EXTI12_PG=((uint32_t)0x0006)
   SYSCFG_EXTICR4_EXTI12_PH=((uint32_t)0x0007)
   SYSCFG_EXTICR4_EXTI12_PI=((uint32_t)0x0008)
   SYSCFG_EXTICR4_EXTI12_PJ=((uint32_t)0x0009)
   SYSCFG_EXTICR4_EXTI13=((uint32_t)0x00F0)
   SYSCFG_EXTICR4_EXTI13_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR4_EXTI13_PB=((uint32_t)0x0010)
   SYSCFG_EXTICR4_EXTI13_PC=((uint32_t)0x0020)
   SYSCFG_EXTICR4_EXTI13_PD=((uint32_t)0x0030)
   SYSCFG_EXTICR4_EXTI13_PE=((uint32_t)0x0040)
   SYSCFG_EXTICR4_EXTI13_PF=((uint32_t)0x0050)
   SYSCFG_EXTICR4_EXTI13_PG=((uint32_t)0x0060)
   SYSCFG_EXTICR4_EXTI13_PH=((uint32_t)0x0070)
   SYSCFG_EXTICR4_EXTI13_PI=((uint32_t)0x0008)
   SYSCFG_EXTICR4_EXTI13_PJ=((uint32_t)0x0009)
   SYSCFG_EXTICR4_EXTI14=((uint32_t)0x0F00)
   SYSCFG_EXTICR4_EXTI14_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR4_EXTI14_PB=((uint32_t)0x0100)
   SYSCFG_EXTICR4_EXTI14_PC=((uint32_t)0x0200)
   SYSCFG_EXTICR4_EXTI14_PD=((uint32_t)0x0300)
   SYSCFG_EXTICR4_EXTI14_PE=((uint32_t)0x0400)
   SYSCFG_EXTICR4_EXTI14_PF=((uint32_t)0x0500)
   SYSCFG_EXTICR4_EXTI14_PG=((uint32_t)0x0600)
   SYSCFG_EXTICR4_EXTI14_PH=((uint32_t)0x0700)
   SYSCFG_EXTICR4_EXTI14_PI=((uint32_t)0x0800)
   SYSCFG_EXTICR4_EXTI14_PJ=((uint32_t)0x0900)
   SYSCFG_EXTICR4_EXTI15=((uint32_t)0xF000)
   SYSCFG_EXTICR4_EXTI15_PA=((uint32_t)0x0000)
   SYSCFG_EXTICR4_EXTI15_PB=((uint32_t)0x1000)
   SYSCFG_EXTICR4_EXTI15_PC=((uint32_t)0x2000)
   SYSCFG_EXTICR4_EXTI15_PD=((uint32_t)0x3000)
   SYSCFG_EXTICR4_EXTI15_PE=((uint32_t)0x4000)
   SYSCFG_EXTICR4_EXTI15_PF=((uint32_t)0x5000)
   SYSCFG_EXTICR4_EXTI15_PG=((uint32_t)0x6000)
   SYSCFG_EXTICR4_EXTI15_PH=((uint32_t)0x7000)
   SYSCFG_EXTICR4_EXTI15_PI=((uint32_t)0x8000)
   SYSCFG_EXTICR4_EXTI15_PJ=((uint32_t)0x9000)
   SYSCFG_FLAG_RC48=RCC_FLAG_HSI48
   SYSCFG_FLAG_SENSOR_ADC=ADC_FLAG_SENSOR
   SYSCFG_FLAG_VREF_ADC=ADC_FLAG_VREFINT
   SYSCFG_FLAG_VREF_READY=SYSCFG_FLAG_VREFINT_READY
   SYSCFG_MEMRMP_MEM_MODE=((uint32_t)0x00000007)
   SYSCFG_MEMRMP_MEM_MODE_0=((uint32_t)0x00000001)
   SYSCFG_MEMRMP_MEM_MODE_1=((uint32_t)0x00000002)
   SYSCFG_MEMRMP_MEM_MODE_2=((uint32_t)0x00000004)
   SYSCFG_MEMRMP_UFB_MODE=((uint32_t)0x00000100)
   SYSCFG_PMC_ADC1DC2=((uint32_t)0x00010000)
   SYSCFG_PMC_ADC2DC2=((uint32_t)0x00020000)
   SYSCFG_PMC_ADC3DC2=((uint32_t)0x00040000)
   SYSCFG_PMC_ADCxDC2=((uint32_t)0x00070000)
   SYSCFG_PMC_MII_RMII_SEL=((uint32_t)0x00800000)
   SYSCFG_SWP_FMC=((uint32_t)0x00000C00)
   SysTick=((SysTick_Type *) SysTick_BASE )
   SysTick_BASE=(SCS_BASE + 0x0010UL)
   SysTick_CALIB_NOREF_Msk=(1UL << SysTick_CALIB_NOREF_Pos)
   SysTick_CALIB_NOREF_Pos=31
   SysTick_CALIB_SKEW_Msk=(1UL << SysTick_CALIB_SKEW_Pos)
   SysTick_CALIB_SKEW_Pos=30
   SysTick_CALIB_TENMS_Msk=(0xFFFFFFUL )
   SysTick_CALIB_TENMS_Pos=0
   SYSTICK_CLKSOURCE_HCLK=((uint32_t)0x00000004)
   SYSTICK_CLKSOURCE_HCLK_DIV8=((uint32_t)0x00000000)
   SysTick_CTRL_CLKSOURCE_Msk=(1UL << SysTick_CTRL_CLKSOURCE_Pos)
   SysTick_CTRL_CLKSOURCE_Pos=2
   SysTick_CTRL_COUNTFLAG_Msk=(1UL << SysTick_CTRL_COUNTFLAG_Pos)
   SysTick_CTRL_COUNTFLAG_Pos=16
   SysTick_CTRL_ENABLE_Msk=(1UL )
   SysTick_CTRL_ENABLE_Pos=0
   SysTick_CTRL_TICKINT_Msk=(1UL << SysTick_CTRL_TICKINT_Pos)
   SysTick_CTRL_TICKINT_Pos=1
   SysTick_LOAD_RELOAD_Msk=(0xFFFFFFUL )
   SysTick_LOAD_RELOAD_Pos=0
   SysTick_VAL_CURRENT_Msk=(0xFFFFFFUL )
   SysTick_VAL_CURRENT_Pos=0
   TEXTAREAWITHWILDCARD_HPP=
   TEXTAREA_HPP=
   TEXTPROVIDER_HPP=
   TEXTS_HPP=
   TEXTUREMAPTYPES_HPP=
   TEXT_LOCATION_FLASH_ATTRIBUTE=__attribute__ ((section ("TextFlashSection"))) __attribute__ ((aligned(4)))
   TEXT_LOCATION_FLASH_PRAGMA=
   TICK_INT_PRIORITY=((uint32_t)0x01)
   TIM10=((TIM_TypeDef *) TIM10_BASE)
   TIM10_BASE=(APB2PERIPH_BASE + 0x4400)
   TIM11=((TIM_TypeDef *) TIM11_BASE)
   TIM11_BASE=(APB2PERIPH_BASE + 0x4800)
   TIM12=((TIM_TypeDef *) TIM12_BASE)
   TIM12_BASE=(APB1PERIPH_BASE + 0x1800)
   TIM13=((TIM_TypeDef *) TIM13_BASE)
   TIM13_BASE=(APB1PERIPH_BASE + 0x1C00)
   TIM14=((TIM_TypeDef *) TIM14_BASE)
   TIM14_BASE=(APB1PERIPH_BASE + 0x2000)
   TIM1=((TIM_TypeDef *) TIM1_BASE)
   TIM1_BASE=(APB2PERIPH_BASE + 0x0000)
   TIM2=((TIM_TypeDef *) TIM2_BASE)
   TIM2_BASE=(APB1PERIPH_BASE + 0x0000)
   TIM3=((TIM_TypeDef *) TIM3_BASE)
   TIM3_BASE=(APB1PERIPH_BASE + 0x0400)
   TIM4=((TIM_TypeDef *) TIM4_BASE)
   TIM4_BASE=(APB1PERIPH_BASE + 0x0800)
   TIM5=((TIM_TypeDef *) TIM5_BASE)
   TIM5_BASE=(APB1PERIPH_BASE + 0x0C00)
   TIM6=((TIM_TypeDef *) TIM6_BASE)
   TIM6_BASE=(APB1PERIPH_BASE + 0x1000)
   TIM7=((TIM_TypeDef *) TIM7_BASE)
   TIM7_BASE=(APB1PERIPH_BASE + 0x1400)
   TIM8=((TIM_TypeDef *) TIM8_BASE)
   TIM8_BASE=(APB2PERIPH_BASE + 0x0400)
   TIM9=((TIM_TypeDef *) TIM9_BASE)
   TIM9_BASE=(APB2PERIPH_BASE + 0x4000)
   timeradd(tvp,uvp,vvp)=do { (vvp)->tv_sec = (tvp)->tv_sec + (uvp)->tv_sec; (vvp)->tv_usec = (tvp)->tv_usec + (uvp)->tv_usec; if ((vvp)->tv_usec >= 1000000) { (vvp)->tv_sec++; (vvp)->tv_usec -= 1000000; } } while (0)
   timerclear(tvp)=((tvp)->tv_sec = (tvp)->tv_usec = 0)
   timercmp(tvp,uvp,cmp)=(((tvp)->tv_sec == (uvp)->tv_sec) ? ((tvp)->tv_usec cmp (uvp)->tv_usec) : ((tvp)->tv_sec cmp (uvp)->tv_sec))
   timerisset(tvp)=((tvp)->tv_sec || (tvp)->tv_usec)
   timersub(tvp,uvp,vvp)=do { (vvp)->tv_sec = (tvp)->tv_sec - (uvp)->tv_sec; (vvp)->tv_usec = (tvp)->tv_usec - (uvp)->tv_usec; if ((vvp)->tv_usec < 0) { (vvp)->tv_sec--; (vvp)->tv_usec += 1000000; } } while (0)
   TIMER_ABSTIME=4
   TIMESPEC_TO_TIMEVAL(tv,ts)=do { (tv)->tv_sec = (ts)->tv_sec; (tv)->tv_usec = (ts)->tv_nsec / 1000; } while (0)
   TIMEVAL_TO_TIMESPEC(tv,ts)=do { (ts)->tv_sec = (tv)->tv_sec; (ts)->tv_nsec = (tv)->tv_usec * 1000; } while (0)
   TIMPRE_BitNumber=RCC_TIMPRE_BIT_NUMBER
   TIM_ARR_ARR=((uint32_t)0xFFFF)
   TIM_BDTR_AOE=((uint32_t)0x4000)
   TIM_BDTR_BKE=((uint32_t)0x1000)
   TIM_BDTR_BKP=((uint32_t)0x2000)
   TIM_BDTR_DTG=((uint32_t)0x00FF)
   TIM_BDTR_DTG_0=((uint32_t)0x0001)
   TIM_BDTR_DTG_1=((uint32_t)0x0002)
   TIM_BDTR_DTG_2=((uint32_t)0x0004)
   TIM_BDTR_DTG_3=((uint32_t)0x0008)
   TIM_BDTR_DTG_4=((uint32_t)0x0010)
   TIM_BDTR_DTG_5=((uint32_t)0x0020)
   TIM_BDTR_DTG_6=((uint32_t)0x0040)
   TIM_BDTR_DTG_7=((uint32_t)0x0080)
   TIM_BDTR_LOCK=((uint32_t)0x0300)
   TIM_BDTR_LOCK_0=((uint32_t)0x0100)
   TIM_BDTR_LOCK_1=((uint32_t)0x0200)
   TIM_BDTR_MOE=((uint32_t)0x8000)
   TIM_BDTR_OSSI=((uint32_t)0x0400)
   TIM_BDTR_OSSR=((uint32_t)0x0800)
   TIM_CCER_CC1E=((uint32_t)0x0001)
   TIM_CCER_CC1NE=((uint32_t)0x0004)
   TIM_CCER_CC1NP=((uint32_t)0x0008)
   TIM_CCER_CC1P=((uint32_t)0x0002)
   TIM_CCER_CC2E=((uint32_t)0x0010)
   TIM_CCER_CC2NE=((uint32_t)0x0040)
   TIM_CCER_CC2NP=((uint32_t)0x0080)
   TIM_CCER_CC2P=((uint32_t)0x0020)
   TIM_CCER_CC3E=((uint32_t)0x0100)
   TIM_CCER_CC3NE=((uint32_t)0x0400)
   TIM_CCER_CC3NP=((uint32_t)0x0800)
   TIM_CCER_CC3P=((uint32_t)0x0200)
   TIM_CCER_CC4E=((uint32_t)0x1000)
   TIM_CCER_CC4NP=((uint32_t)0x8000)
   TIM_CCER_CC4P=((uint32_t)0x2000)
   TIM_CCMR1_CC1S=((uint32_t)0x0003)
   TIM_CCMR1_CC1S_0=((uint32_t)0x0001)
   TIM_CCMR1_CC1S_1=((uint32_t)0x0002)
   TIM_CCMR1_CC2S=((uint32_t)0x0300)
   TIM_CCMR1_CC2S_0=((uint32_t)0x0100)
   TIM_CCMR1_CC2S_1=((uint32_t)0x0200)
   TIM_CCMR1_IC1F=((uint32_t)0x00F0)
   TIM_CCMR1_IC1F_0=((uint32_t)0x0010)
   TIM_CCMR1_IC1F_1=((uint32_t)0x0020)
   TIM_CCMR1_IC1F_2=((uint32_t)0x0040)
   TIM_CCMR1_IC1F_3=((uint32_t)0x0080)
   TIM_CCMR1_IC1PSC=((uint32_t)0x000C)
   TIM_CCMR1_IC1PSC_0=((uint32_t)0x0004)
   TIM_CCMR1_IC1PSC_1=((uint32_t)0x0008)
   TIM_CCMR1_IC2F=((uint32_t)0xF000)
   TIM_CCMR1_IC2F_0=((uint32_t)0x1000)
   TIM_CCMR1_IC2F_1=((uint32_t)0x2000)
   TIM_CCMR1_IC2F_2=((uint32_t)0x4000)
   TIM_CCMR1_IC2F_3=((uint32_t)0x8000)
   TIM_CCMR1_IC2PSC=((uint32_t)0x0C00)
   TIM_CCMR1_IC2PSC_0=((uint32_t)0x0400)
   TIM_CCMR1_IC2PSC_1=((uint32_t)0x0800)
   TIM_CCMR1_OC1CE=((uint32_t)0x0080)
   TIM_CCMR1_OC1FE=((uint32_t)0x0004)
   TIM_CCMR1_OC1M=((uint32_t)0x0070)
   TIM_CCMR1_OC1M_0=((uint32_t)0x0010)
   TIM_CCMR1_OC1M_1=((uint32_t)0x0020)
   TIM_CCMR1_OC1M_2=((uint32_t)0x0040)
   TIM_CCMR1_OC1PE=((uint32_t)0x0008)
   TIM_CCMR1_OC2CE=((uint32_t)0x8000)
   TIM_CCMR1_OC2FE=((uint32_t)0x0400)
   TIM_CCMR1_OC2M=((uint32_t)0x7000)
   TIM_CCMR1_OC2M_0=((uint32_t)0x1000)
   TIM_CCMR1_OC2M_1=((uint32_t)0x2000)
   TIM_CCMR1_OC2M_2=((uint32_t)0x4000)
   TIM_CCMR1_OC2PE=((uint32_t)0x0800)
   TIM_CCMR2_CC3S=((uint32_t)0x0003)
   TIM_CCMR2_CC3S_0=((uint32_t)0x0001)
   TIM_CCMR2_CC3S_1=((uint32_t)0x0002)
   TIM_CCMR2_CC4S=((uint32_t)0x0300)
   TIM_CCMR2_CC4S_0=((uint32_t)0x0100)
   TIM_CCMR2_CC4S_1=((uint32_t)0x0200)
   TIM_CCMR2_IC3F=((uint32_t)0x00F0)
   TIM_CCMR2_IC3F_0=((uint32_t)0x0010)
   TIM_CCMR2_IC3F_1=((uint32_t)0x0020)
   TIM_CCMR2_IC3F_2=((uint32_t)0x0040)
   TIM_CCMR2_IC3F_3=((uint32_t)0x0080)
   TIM_CCMR2_IC3PSC=((uint32_t)0x000C)
   TIM_CCMR2_IC3PSC_0=((uint32_t)0x0004)
   TIM_CCMR2_IC3PSC_1=((uint32_t)0x0008)
   TIM_CCMR2_IC4F=((uint32_t)0xF000)
   TIM_CCMR2_IC4F_0=((uint32_t)0x1000)
   TIM_CCMR2_IC4F_1=((uint32_t)0x2000)
   TIM_CCMR2_IC4F_2=((uint32_t)0x4000)
   TIM_CCMR2_IC4F_3=((uint32_t)0x8000)
   TIM_CCMR2_IC4PSC=((uint32_t)0x0C00)
   TIM_CCMR2_IC4PSC_0=((uint32_t)0x0400)
   TIM_CCMR2_IC4PSC_1=((uint32_t)0x0800)
   TIM_CCMR2_OC3CE=((uint32_t)0x0080)
   TIM_CCMR2_OC3FE=((uint32_t)0x0004)
   TIM_CCMR2_OC3M=((uint32_t)0x0070)
   TIM_CCMR2_OC3M_0=((uint32_t)0x0010)
   TIM_CCMR2_OC3M_1=((uint32_t)0x0020)
   TIM_CCMR2_OC3M_2=((uint32_t)0x0040)
   TIM_CCMR2_OC3PE=((uint32_t)0x0008)
   TIM_CCMR2_OC4CE=((uint32_t)0x8000)
   TIM_CCMR2_OC4FE=((uint32_t)0x0400)
   TIM_CCMR2_OC4M=((uint32_t)0x7000)
   TIM_CCMR2_OC4M_0=((uint32_t)0x1000)
   TIM_CCMR2_OC4M_1=((uint32_t)0x2000)
   TIM_CCMR2_OC4M_2=((uint32_t)0x4000)
   TIM_CCMR2_OC4PE=((uint32_t)0x0800)
   TIM_CCR1_CCR1=((uint32_t)0xFFFF)
   TIM_CCR2_CCR2=((uint32_t)0xFFFF)
   TIM_CCR3_CCR3=((uint32_t)0xFFFF)
   TIM_CCR4_CCR4=((uint32_t)0xFFFF)
   TIM_CHANNEL_1=((uint32_t)0x0000)
   TIM_CHANNEL_2=((uint32_t)0x0004)
   TIM_CNT_CNT=((uint32_t)0xFFFF)
   TIM_CR1_ARPE=((uint32_t)0x0080)
   TIM_CR1_CEN=((uint32_t)0x0001)
   TIM_CR1_CKD=((uint32_t)0x0300)
   TIM_CR1_CKD_0=((uint32_t)0x0100)
   TIM_CR1_CKD_1=((uint32_t)0x0200)
   TIM_CR1_CMS=((uint32_t)0x0060)
   TIM_CR1_CMS_0=((uint32_t)0x0020)
   TIM_CR1_CMS_1=((uint32_t)0x0040)
   TIM_CR1_DIR=((uint32_t)0x0010)
   TIM_CR1_OPM=((uint32_t)0x0008)
   TIM_CR1_UDIS=((uint32_t)0x0002)
   TIM_CR1_URS=((uint32_t)0x0004)
   TIM_CR2_CCDS=((uint32_t)0x0008)
   TIM_CR2_CCPC=((uint32_t)0x0001)
   TIM_CR2_CCUS=((uint32_t)0x0004)
   TIM_CR2_MMS=((uint32_t)0x0070)
   TIM_CR2_MMS_0=((uint32_t)0x0010)
   TIM_CR2_MMS_1=((uint32_t)0x0020)
   TIM_CR2_MMS_2=((uint32_t)0x0040)
   TIM_CR2_OIS1=((uint32_t)0x0100)
   TIM_CR2_OIS1N=((uint32_t)0x0200)
   TIM_CR2_OIS2=((uint32_t)0x0400)
   TIM_CR2_OIS2N=((uint32_t)0x0800)
   TIM_CR2_OIS3=((uint32_t)0x1000)
   TIM_CR2_OIS3N=((uint32_t)0x2000)
   TIM_CR2_OIS4=((uint32_t)0x4000)
   TIM_CR2_TI1S=((uint32_t)0x0080)
   TIM_DCR_DBA=((uint32_t)0x001F)
   TIM_DCR_DBA_0=((uint32_t)0x0001)
   TIM_DCR_DBA_1=((uint32_t)0x0002)
   TIM_DCR_DBA_2=((uint32_t)0x0004)
   TIM_DCR_DBA_3=((uint32_t)0x0008)
   TIM_DCR_DBA_4=((uint32_t)0x0010)
   TIM_DCR_DBL=((uint32_t)0x1F00)
   TIM_DCR_DBL_0=((uint32_t)0x0100)
   TIM_DCR_DBL_1=((uint32_t)0x0200)
   TIM_DCR_DBL_2=((uint32_t)0x0400)
   TIM_DCR_DBL_3=((uint32_t)0x0800)
   TIM_DCR_DBL_4=((uint32_t)0x1000)
   TIM_DIER_BIE=((uint32_t)0x0080)
   TIM_DIER_CC1DE=((uint32_t)0x0200)
   TIM_DIER_CC1IE=((uint32_t)0x0002)
   TIM_DIER_CC2DE=((uint32_t)0x0400)
   TIM_DIER_CC2IE=((uint32_t)0x0004)
   TIM_DIER_CC3DE=((uint32_t)0x0800)
   TIM_DIER_CC3IE=((uint32_t)0x0008)
   TIM_DIER_CC4DE=((uint32_t)0x1000)
   TIM_DIER_CC4IE=((uint32_t)0x0010)
   TIM_DIER_COMDE=((uint32_t)0x2000)
   TIM_DIER_COMIE=((uint32_t)0x0020)
   TIM_DIER_TDE=((uint32_t)0x4000)
   TIM_DIER_TIE=((uint32_t)0x0040)
   TIM_DIER_UDE=((uint32_t)0x0100)
   TIM_DIER_UIE=((uint32_t)0x0001)
   TIM_DMABase_ARR=TIM_DMABASE_ARR
   TIM_DMABase_BDTR=TIM_DMABASE_BDTR
   TIM_DMABase_CCER=TIM_DMABASE_CCER
   TIM_DMABase_CCMR1=TIM_DMABASE_CCMR1
   TIM_DMABase_CCMR2=TIM_DMABASE_CCMR2
   TIM_DMABase_CCMR3=TIM_DMABASE_CCMR3
   TIM_DMABase_CCR1=TIM_DMABASE_CCR1
   TIM_DMABase_CCR2=TIM_DMABASE_CCR2
   TIM_DMABase_CCR3=TIM_DMABASE_CCR3
   TIM_DMABase_CCR4=TIM_DMABASE_CCR4
   TIM_DMABase_CCR5=TIM_DMABASE_CCR5
   TIM_DMABase_CCR6=TIM_DMABASE_CCR6
   TIM_DMABase_CNT=TIM_DMABASE_CNT
   TIM_DMABase_CR1=TIM_DMABASE_CR1
   TIM_DMABase_CR2=TIM_DMABASE_CR2
   TIM_DMABase_DCR=TIM_DMABASE_DCR
   TIM_DMABase_DIER=TIM_DMABASE_DIER
   TIM_DMABase_DMAR=TIM_DMABASE_DMAR
   TIM_DMABase_EGR=TIM_DMABASE_EGR
   TIM_DMABase_OR1=TIM_DMABASE_OR1
   TIM_DMABase_OR2=TIM_DMABASE_OR2
   TIM_DMABase_OR3=TIM_DMABASE_OR3
   TIM_DMABase_OR=TIM_DMABASE_OR
   TIM_DMABase_PSC=TIM_DMABASE_PSC
   TIM_DMABase_RCR=TIM_DMABASE_RCR
   TIM_DMABase_SMCR=TIM_DMABASE_SMCR
   TIM_DMABase_SR=TIM_DMABASE_SR
   TIM_DMABurstLength_10Transfers=TIM_DMABURSTLENGTH_10TRANSFERS
   TIM_DMABurstLength_11Transfers=TIM_DMABURSTLENGTH_11TRANSFERS
   TIM_DMABurstLength_12Transfers=TIM_DMABURSTLENGTH_12TRANSFERS
   TIM_DMABurstLength_13Transfers=TIM_DMABURSTLENGTH_13TRANSFERS
   TIM_DMABurstLength_14Transfers=TIM_DMABURSTLENGTH_14TRANSFERS
   TIM_DMABurstLength_15Transfers=TIM_DMABURSTLENGTH_15TRANSFERS
   TIM_DMABurstLength_16Transfers=TIM_DMABURSTLENGTH_16TRANSFERS
   TIM_DMABurstLength_17Transfers=TIM_DMABURSTLENGTH_17TRANSFERS
   TIM_DMABurstLength_18Transfers=TIM_DMABURSTLENGTH_18TRANSFERS
   TIM_DMABurstLength_1Transfer=TIM_DMABURSTLENGTH_1TRANSFER
   TIM_DMABurstLength_2Transfers=TIM_DMABURSTLENGTH_2TRANSFERS
   TIM_DMABurstLength_3Transfers=TIM_DMABURSTLENGTH_3TRANSFERS
   TIM_DMABurstLength_4Transfers=TIM_DMABURSTLENGTH_4TRANSFERS
   TIM_DMABurstLength_5Transfers=TIM_DMABURSTLENGTH_5TRANSFERS
   TIM_DMABurstLength_6Transfers=TIM_DMABURSTLENGTH_6TRANSFERS
   TIM_DMABurstLength_7Transfers=TIM_DMABURSTLENGTH_7TRANSFERS
   TIM_DMABurstLength_8Transfers=TIM_DMABURSTLENGTH_8TRANSFERS
   TIM_DMABurstLength_9Transfers=TIM_DMABURSTLENGTH_9TRANSFERS
   TIM_DMAR_DMAB=((uint32_t)0xFFFF)
   TIM_EGR_BG=((uint32_t)0x80)
   TIM_EGR_CC1G=((uint32_t)0x02)
   TIM_EGR_CC2G=((uint32_t)0x04)
   TIM_EGR_CC3G=((uint32_t)0x08)
   TIM_EGR_CC4G=((uint32_t)0x10)
   TIM_EGR_COMG=((uint32_t)0x20)
   TIM_EGR_TG=((uint32_t)0x40)
   TIM_EGR_UG=((uint32_t)0x01)
   TIM_EventSource_Break2=TIM_EVENTSOURCE_BREAK2
   TIM_EventSource_Break=TIM_EVENTSOURCE_BREAK
   TIM_EventSource_CC1=TIM_EVENTSOURCE_CC1
   TIM_EventSource_CC2=TIM_EVENTSOURCE_CC2
   TIM_EventSource_CC3=TIM_EVENTSOURCE_CC3
   TIM_EventSource_CC4=TIM_EVENTSOURCE_CC4
   TIM_EventSource_COM=TIM_EVENTSOURCE_COM
   TIM_EventSource_Trigger=TIM_EVENTSOURCE_TRIGGER
   TIM_EventSource_Update=TIM_EVENTSOURCE_UPDATE
   TIM_GET_CLEAR_IT=__HAL_TIM_CLEAR_IT
   TIM_GET_ITSTATUS=__HAL_TIM_GET_IT_SOURCE
   TIM_OR_ITR1_RMP=((uint32_t)0x0C00)
   TIM_OR_ITR1_RMP_0=((uint32_t)0x0400)
   TIM_OR_ITR1_RMP_1=((uint32_t)0x0800)
   TIM_OR_TI4_RMP=((uint32_t)0x00C0)
   TIM_OR_TI4_RMP_0=((uint32_t)0x0040)
   TIM_OR_TI4_RMP_1=((uint32_t)0x0080)
   TIM_OUTPUTNSTATE_DISABLE=((uint32_t)0x0000)
   TIM_OUTPUTNSTATE_ENABLE=(TIM_CCER_CC1NE)
   TIM_OUTPUTSTATE_DISABLE=((uint32_t)0x0000)
   TIM_OUTPUTSTATE_ENABLE=(TIM_CCER_CC1E)
   TIM_PSC_PSC=((uint32_t)0xFFFF)
   TIM_RCR_REP=((uint32_t)0xFF)
   TIM_SMCR_ECE=((uint32_t)0x4000)
   TIM_SMCR_ETF=((uint32_t)0x0F00)
   TIM_SMCR_ETF_0=((uint32_t)0x0100)
   TIM_SMCR_ETF_1=((uint32_t)0x0200)
   TIM_SMCR_ETF_2=((uint32_t)0x0400)
   TIM_SMCR_ETF_3=((uint32_t)0x0800)
   TIM_SMCR_ETP=((uint32_t)0x8000)
   TIM_SMCR_ETPS=((uint32_t)0x3000)
   TIM_SMCR_ETPS_0=((uint32_t)0x1000)
   TIM_SMCR_ETPS_1=((uint32_t)0x2000)
   TIM_SMCR_MSM=((uint32_t)0x0080)
   TIM_SMCR_SMS=((uint32_t)0x0007)
   TIM_SMCR_SMS_0=((uint32_t)0x0001)
   TIM_SMCR_SMS_1=((uint32_t)0x0002)
   TIM_SMCR_SMS_2=((uint32_t)0x0004)
   TIM_SMCR_TS=((uint32_t)0x0070)
   TIM_SMCR_TS_0=((uint32_t)0x0010)
   TIM_SMCR_TS_1=((uint32_t)0x0020)
   TIM_SMCR_TS_2=((uint32_t)0x0040)
   TIM_SR_BIF=((uint32_t)0x0080)
   TIM_SR_CC1IF=((uint32_t)0x0002)
   TIM_SR_CC1OF=((uint32_t)0x0200)
   TIM_SR_CC2IF=((uint32_t)0x0004)
   TIM_SR_CC2OF=((uint32_t)0x0400)
   TIM_SR_CC3IF=((uint32_t)0x0008)
   TIM_SR_CC3OF=((uint32_t)0x0800)
   TIM_SR_CC4IF=((uint32_t)0x0010)
   TIM_SR_CC4OF=((uint32_t)0x1000)
   TIM_SR_COMIF=((uint32_t)0x0020)
   TIM_SR_TIF=((uint32_t)0x0040)
   TIM_SR_UIF=((uint32_t)0x0001)
   TIM_TS_ITR0=((uint32_t)0x0000)
   TIM_TS_ITR1=((uint32_t)0x0010)
   TIM_TS_ITR2=((uint32_t)0x0020)
   TIM_TS_ITR3=((uint32_t)0x0030)
   TLOSS=5
   TMP_MAX=26
   TOGGLEBUTTON_HPP=
   TOUCHCONTROLLER_HPP=
   TOUCHGFXINIT_HPP=
   touchgfx_enable_stdio()=
   TOUCHGFX_GUI_BASESCREENADAPTOR_H_=
   touchgfx_printf(format,...)=
   TPI=((TPI_Type *) TPI_BASE )
   TPI_ACPR_PRESCALER_Msk=(0x1FFFUL )
   TPI_ACPR_PRESCALER_Pos=0
   TPI_BASE=(0xE0040000UL)
   TPI_DEVID_AsynClkIn_Msk=(0x1UL << TPI_DEVID_AsynClkIn_Pos)
   TPI_DEVID_AsynClkIn_Pos=5
   TPI_DEVID_MANCVALID_Msk=(0x1UL << TPI_DEVID_MANCVALID_Pos)
   TPI_DEVID_MANCVALID_Pos=10
   TPI_DEVID_MinBufSz_Msk=(0x7UL << TPI_DEVID_MinBufSz_Pos)
   TPI_DEVID_MinBufSz_Pos=6
   TPI_DEVID_NrTraceInput_Msk=(0x1FUL )
   TPI_DEVID_NrTraceInput_Pos=0
   TPI_DEVID_NRZVALID_Msk=(0x1UL << TPI_DEVID_NRZVALID_Pos)
   TPI_DEVID_NRZVALID_Pos=11
   TPI_DEVID_PTINVALID_Msk=(0x1UL << TPI_DEVID_PTINVALID_Pos)
   TPI_DEVID_PTINVALID_Pos=9
   TPI_DEVTYPE_MajorType_Msk=(0xFUL << TPI_DEVTYPE_MajorType_Pos)
   TPI_DEVTYPE_MajorType_Pos=4
   TPI_DEVTYPE_SubType_Msk=(0xFUL )
   TPI_DEVTYPE_SubType_Pos=0
   TPI_FFCR_EnFCont_Msk=(0x1UL << TPI_FFCR_EnFCont_Pos)
   TPI_FFCR_EnFCont_Pos=1
   TPI_FFCR_TrigIn_Msk=(0x1UL << TPI_FFCR_TrigIn_Pos)
   TPI_FFCR_TrigIn_Pos=8
   TPI_FFSR_FlInProg_Msk=(0x1UL )
   TPI_FFSR_FlInProg_Pos=0
   TPI_FFSR_FtNonStop_Msk=(0x1UL << TPI_FFSR_FtNonStop_Pos)
   TPI_FFSR_FtNonStop_Pos=3
   TPI_FFSR_FtStopped_Msk=(0x1UL << TPI_FFSR_FtStopped_Pos)
   TPI_FFSR_FtStopped_Pos=1
   TPI_FFSR_TCPresent_Msk=(0x1UL << TPI_FFSR_TCPresent_Pos)
   TPI_FFSR_TCPresent_Pos=2
   TPI_FIFO0_ETM0_Msk=(0xFFUL )
   TPI_FIFO0_ETM0_Pos=0
   TPI_FIFO0_ETM1_Msk=(0xFFUL << TPI_FIFO0_ETM1_Pos)
   TPI_FIFO0_ETM1_Pos=8
   TPI_FIFO0_ETM2_Msk=(0xFFUL << TPI_FIFO0_ETM2_Pos)
   TPI_FIFO0_ETM2_Pos=16
   TPI_FIFO0_ETM_ATVALID_Msk=(0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)
   TPI_FIFO0_ETM_ATVALID_Pos=26
   TPI_FIFO0_ETM_bytecount_Msk=(0x3UL << TPI_FIFO0_ETM_bytecount_Pos)
   TPI_FIFO0_ETM_bytecount_Pos=24
   TPI_FIFO0_ITM_ATVALID_Msk=(0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)
   TPI_FIFO0_ITM_ATVALID_Pos=29
   TPI_FIFO0_ITM_bytecount_Msk=(0x3UL << TPI_FIFO0_ITM_bytecount_Pos)
   TPI_FIFO0_ITM_bytecount_Pos=27
   TPI_FIFO1_ETM_ATVALID_Msk=(0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)
   TPI_FIFO1_ETM_ATVALID_Pos=26
   TPI_FIFO1_ETM_bytecount_Msk=(0x3UL << TPI_FIFO1_ETM_bytecount_Pos)
   TPI_FIFO1_ETM_bytecount_Pos=24
   TPI_FIFO1_ITM0_Msk=(0xFFUL )
   TPI_FIFO1_ITM0_Pos=0
   TPI_FIFO1_ITM1_Msk=(0xFFUL << TPI_FIFO1_ITM1_Pos)
   TPI_FIFO1_ITM1_Pos=8
   TPI_FIFO1_ITM2_Msk=(0xFFUL << TPI_FIFO1_ITM2_Pos)
   TPI_FIFO1_ITM2_Pos=16
   TPI_FIFO1_ITM_ATVALID_Msk=(0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)
   TPI_FIFO1_ITM_ATVALID_Pos=29
   TPI_FIFO1_ITM_bytecount_Msk=(0x3UL << TPI_FIFO1_ITM_bytecount_Pos)
   TPI_FIFO1_ITM_bytecount_Pos=27
   TPI_ITATBCTR0_ATREADY_Msk=(0x1UL )
   TPI_ITATBCTR0_ATREADY_Pos=0
   TPI_ITATBCTR2_ATREADY_Msk=(0x1UL )
   TPI_ITATBCTR2_ATREADY_Pos=0
   TPI_ITCTRL_Mode_Msk=(0x1UL )
   TPI_ITCTRL_Mode_Pos=0
   TPI_SPPR_TXMODE_Msk=(0x3UL )
   TPI_SPPR_TXMODE_Pos=0
   TPI_TRIGGER_TRIGGER_Msk=(0x1UL )
   TPI_TRIGGER_TRIGGER_Pos=0
   TRANSITION_HPP=
   TSC_SYNC_POL_FALL=TSC_SYNC_POLARITY_FALLING
   TSC_SYNC_POL_RISE_HIGH=TSC_SYNC_POLARITY_RISING
   TS_I2C_ADDRESS=((uint16_t)0x54)
   TS_INT_EXTI_IRQn=EXTI9_5_IRQn
   TS_INT_GPIO_CLK_DISABLE()=__HAL_RCC_GPIOJ_CLK_DISABLE()
   TS_INT_GPIO_CLK_ENABLE()=__HAL_RCC_GPIOJ_CLK_ENABLE()
   TS_INT_GPIO_PORT=((GPIO_TypeDef*)GPIOJ)
   TS_INT_PIN=((uint32_t)GPIO_PIN_5)
   TYPEDTEXTDATABASE_HPP=
   TYPEDTEXT_HPP=
   TYPEERASEDATA_BYTE=FLASH_TYPEERASEDATA_BYTE
   TYPEERASEDATA_HALFWORD=FLASH_TYPEERASEDATA_HALFWORD
   TYPEERASEDATA_WORD=FLASH_TYPEERASEDATA_WORD
   TYPEERASE_MASSERASE=FLASH_TYPEERASE_MASSERASE
   TYPEERASE_PAGEERASE=FLASH_TYPEERASE_PAGES
   TYPEERASE_PAGES=FLASH_TYPEERASE_PAGES
   TYPEERASE_SECTORS=FLASH_TYPEERASE_SECTORS
   TYPEPROGRAMDATA_BYTE=FLASH_TYPEPROGRAMDATA_BYTE
   TYPEPROGRAMDATA_FASTBYTE=FLASH_TYPEPROGRAMDATA_FASTBYTE
   TYPEPROGRAMDATA_FASTHALFWORD=FLASH_TYPEPROGRAMDATA_FASTHALFWORD
   TYPEPROGRAMDATA_FASTWORD=FLASH_TYPEPROGRAMDATA_FASTWORD
   TYPEPROGRAMDATA_HALFWORD=FLASH_TYPEPROGRAMDATA_HALFWORD
   TYPEPROGRAMDATA_WORD=FLASH_TYPEPROGRAMDATA_WORD
   TYPEPROGRAM_BYTE=FLASH_TYPEPROGRAM_BYTE
   TYPEPROGRAM_DOUBLEWORD=FLASH_TYPEPROGRAM_DOUBLEWORD
   TYPEPROGRAM_FAST=FLASH_TYPEPROGRAM_FAST
   TYPEPROGRAM_FASTBYTE=FLASH_TYPEPROGRAM_BYTE
   TYPEPROGRAM_FASTHALFWORD=FLASH_TYPEPROGRAM_HALFWORD
   TYPEPROGRAM_FASTWORD=FLASH_TYPEPROGRAM_WORD
   TYPEPROGRAM_FAST_AND_LAST=FLASH_TYPEPROGRAM_FAST_AND_LAST
   TYPEPROGRAM_HALFWORD=FLASH_TYPEPROGRAM_HALFWORD
   TYPEPROGRAM_WORD=FLASH_TYPEPROGRAM_WORD
   TYPES_HPP=
   tzname=_tzname
   UART4=((USART_TypeDef *) UART4_BASE)
   UART4_BASE=(APB1PERIPH_BASE + 0x4C00)
   UART5=((USART_TypeDef *) UART5_BASE)
   UART5_BASE=(APB1PERIPH_BASE + 0x5000)
   UART7=((USART_TypeDef *) UART7_BASE)
   UART7_BASE=(APB1PERIPH_BASE + 0x7800)
   UART8=((USART_TypeDef *) UART8_BASE)
   UART8_BASE=(APB1PERIPH_BASE + 0x7C00)
   UART_BRR_SAMPLING16(_PCLK_,_BAUD_)=((UART_DIVMANT_SAMPLING16((_PCLK_), (_BAUD_)) << 4)|(UART_DIVFRAQ_SAMPLING16((_PCLK_), (_BAUD_)) & 0x0F))
   UART_BRR_SAMPLING8(_PCLK_,_BAUD_)=((UART_DIVMANT_SAMPLING8((_PCLK_), (_BAUD_)) << 4)|(UART_DIVFRAQ_SAMPLING8((_PCLK_), (_BAUD_)) & 0x0F))
   UART_CR1_REG_INDEX=1
   UART_CR2_REG_INDEX=2
   UART_CR3_REG_INDEX=3
   UART_DIVFRAQ_SAMPLING16(_PCLK_,_BAUD_)=(((UART_DIV_SAMPLING16((_PCLK_), (_BAUD_)) - (UART_DIVMANT_SAMPLING16((_PCLK_), (_BAUD_)) * 100)) * 16 + 50) / 100)
   UART_DIVFRAQ_SAMPLING8(_PCLK_,_BAUD_)=(((UART_DIV_SAMPLING8((_PCLK_), (_BAUD_)) - (UART_DIVMANT_SAMPLING8((_PCLK_), (_BAUD_)) * 100)) * 16 + 50) / 100)
   UART_DIVMANT_SAMPLING16(_PCLK_,_BAUD_)=(UART_DIV_SAMPLING16((_PCLK_), (_BAUD_))/100)
   UART_DIVMANT_SAMPLING8(_PCLK_,_BAUD_)=(UART_DIV_SAMPLING8((_PCLK_), (_BAUD_))/100)
   UART_DIV_SAMPLING16(_PCLK_,_BAUD_)=(((_PCLK_)*25)/(4*(_BAUD_)))
   UART_DIV_SAMPLING8(_PCLK_,_BAUD_)=(((_PCLK_)*25)/(2*(_BAUD_)))
   UART_FLAG_CTS=((uint32_t)USART_SR_CTS)
   UART_FLAG_FE=((uint32_t)USART_SR_FE)
   UART_FLAG_IDLE=((uint32_t)USART_SR_IDLE)
   UART_FLAG_LBD=((uint32_t)USART_SR_LBD)
   UART_FLAG_NE=((uint32_t)USART_SR_NE)
   UART_FLAG_ORE=((uint32_t)USART_SR_ORE)
   UART_FLAG_PE=((uint32_t)USART_SR_PE)
   UART_FLAG_RXNE=((uint32_t)USART_SR_RXNE)
   UART_FLAG_TC=((uint32_t)USART_SR_TC)
   UART_FLAG_TXE=((uint32_t)USART_SR_TXE)
   UART_HWCONTROL_CTS=((uint32_t)USART_CR3_CTSE)
   UART_HWCONTROL_NONE=((uint32_t)0x00000000)
   UART_HWCONTROL_RTS=((uint32_t)USART_CR3_RTSE)
   UART_HWCONTROL_RTS_CTS=((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE))
   UART_IT_CTS=((uint32_t)(UART_CR3_REG_INDEX << 28 | USART_CR3_CTSIE))
   UART_IT_ERR=((uint32_t)(UART_CR3_REG_INDEX << 28 | USART_CR3_EIE))
   UART_IT_IDLE=((uint32_t)(UART_CR1_REG_INDEX << 28 | USART_CR1_IDLEIE))
   UART_IT_LBD=((uint32_t)(UART_CR2_REG_INDEX << 28 | USART_CR2_LBDIE))
   UART_IT_MASK=((uint32_t)0x0000FFFF)
   UART_IT_PE=((uint32_t)(UART_CR1_REG_INDEX << 28 | USART_CR1_PEIE))
   UART_IT_RXNE=((uint32_t)(UART_CR1_REG_INDEX << 28 | USART_CR1_RXNEIE))
   UART_IT_TC=((uint32_t)(UART_CR1_REG_INDEX << 28 | USART_CR1_TCIE))
   UART_IT_TXE=((uint32_t)(UART_CR1_REG_INDEX << 28 | USART_CR1_TXEIE))
   UART_LINBREAKDETECTLENGTH_10B=((uint32_t)0x00000000)
   UART_LINBREAKDETECTLENGTH_11B=((uint32_t)0x00000020)
   UART_MODE_RX=((uint32_t)USART_CR1_RE)
   UART_MODE_TX=((uint32_t)USART_CR1_TE)
   UART_MODE_TX_RX=((uint32_t)(USART_CR1_TE |USART_CR1_RE))
   UART_ONEBIT_SAMPLING_DISABLED=UART_ONE_BIT_SAMPLE_DISABLE
   UART_ONEBIT_SAMPLING_ENABLED=UART_ONE_BIT_SAMPLE_ENABLE
   UART_ONE_BIT_SAMPLE_DISABLED=UART_ONE_BIT_SAMPLE_DISABLE
   UART_ONE_BIT_SAMPLE_ENABLED=UART_ONE_BIT_SAMPLE_ENABLE
   UART_OVERSAMPLING_16=((uint32_t)0x00000000)
   UART_OVERSAMPLING_8=((uint32_t)USART_CR1_OVER8)
   UART_PARITY_EVEN=((uint32_t)USART_CR1_PCE)
   UART_PARITY_NONE=((uint32_t)0x00000000)
   UART_PARITY_ODD=((uint32_t)(USART_CR1_PCE | USART_CR1_PS))
   UART_STATE_DISABLE=((uint32_t)0x00000000)
   UART_STATE_ENABLE=((uint32_t)USART_CR1_UE)
   UART_STOPBITS_1=((uint32_t)0x00000000)
   UART_STOPBITS_2=((uint32_t)USART_CR2_STOP_1)
   UART_WAKEUPMETHODE_ADDRESSMARK=UART_WAKEUPMETHOD_ADDRESSMARK
   UART_WAKEUPMETHODE_IDLELINE=UART_WAKEUPMETHOD_IDLELINE
   UART_WAKEUPMETHOD_ADDRESSMARK=((uint32_t)0x00000800)
   UART_WAKEUPMETHOD_IDLELINE=((uint32_t)0x00000000)
   UART_WORDLENGTH_8B=((uint32_t)0x00000000)
   UART_WORDLENGTH_9B=((uint32_t)USART_CR1_M)
   UFB_MODE_BitNumber=UFB_MODE_BIT_NUMBER
   UIEVENTLISTENER_HPP=
   UINT16_C(x)=__UINT16_C(x)
   UINT16_MAX=(__UINT16_MAX__)
   UINT32_C(x)=__UINT32_C(x)
   UINT32_MAX=(__UINT32_MAX__)
   UINT64_C(x)=__UINT64_C(x)
   UINT64_MAX=(__UINT64_MAX__)
   UINT8_C(x)=__UINT8_C(x)
   UINT8_MAX=(__UINT8_MAX__)
   UINTMAX_C(x)=__UINTMAX_C(x)
   UINTMAX_MAX=(__UINTMAX_MAX__)
   UINTPTR_MAX=(__UINTPTR_MAX__)
   UINT_FAST16_MAX=(__UINT_FAST16_MAX__)
   UINT_FAST32_MAX=(__UINT_FAST32_MAX__)
   UINT_FAST64_MAX=(__UINT_FAST64_MAX__)
   UINT_FAST8_MAX=(__UINT_FAST8_MAX__)
   UINT_LEAST16_MAX=(__UINT_LEAST16_MAX__)
   UINT_LEAST32_MAX=(__UINT_LEAST32_MAX__)
   UINT_LEAST64_MAX=(__UINT_LEAST64_MAX__)
   UINT_LEAST8_MAX=(__UINT_LEAST8_MAX__)
   UNDERFLOW=4
   UNICODE_HPP=
   unsigned=+0
   unsigned=signed
   UNUSED(x)=((void)(x))
   USART1=((USART_TypeDef *) USART1_BASE)
   USART1_BASE=(APB2PERIPH_BASE + 0x1000)
   USART2=((USART_TypeDef *) USART2_BASE)
   USART2_BASE=(APB1PERIPH_BASE + 0x4400)
   USART3=((USART_TypeDef *) USART3_BASE)
   USART3_BASE=(APB1PERIPH_BASE + 0x4800)
   USART6=((USART_TypeDef *) USART6_BASE)
   USART6_BASE=(APB2PERIPH_BASE + 0x1400)
   USARTNACK_DISABLED=USART_NACK_DISABLE
   USARTNACK_ENABLED=USART_NACK_ENABLE
   USART_BRR_DIV_Fraction=((uint32_t)0x000F)
   USART_BRR_DIV_Mantissa=((uint32_t)0xFFF0)
   USART_CLOCK_DISABLED=USART_CLOCK_DISABLE
   USART_CLOCK_ENABLED=USART_CLOCK_ENABLE
   USART_CR1_IDLEIE=((uint32_t)0x0010)
   USART_CR1_M=((uint32_t)0x1000)
   USART_CR1_OVER8=((uint32_t)0x8000)
   USART_CR1_PCE=((uint32_t)0x0400)
   USART_CR1_PEIE=((uint32_t)0x0100)
   USART_CR1_PS=((uint32_t)0x0200)
   USART_CR1_RE=((uint32_t)0x0004)
   USART_CR1_RWU=((uint32_t)0x0002)
   USART_CR1_RXNEIE=((uint32_t)0x0020)
   USART_CR1_SBK=((uint32_t)0x0001)
   USART_CR1_TCIE=((uint32_t)0x0040)
   USART_CR1_TE=((uint32_t)0x0008)
   USART_CR1_TXEIE=((uint32_t)0x0080)
   USART_CR1_UE=((uint32_t)0x2000)
   USART_CR1_WAKE=((uint32_t)0x0800)
   USART_CR2_ADD=((uint32_t)0x000F)
   USART_CR2_CLKEN=((uint32_t)0x0800)
   USART_CR2_CPHA=((uint32_t)0x0200)
   USART_CR2_CPOL=((uint32_t)0x0400)
   USART_CR2_LBCL=((uint32_t)0x0100)
   USART_CR2_LBDIE=((uint32_t)0x0040)
   USART_CR2_LBDL=((uint32_t)0x0020)
   USART_CR2_LINEN=((uint32_t)0x4000)
   USART_CR2_STOP=((uint32_t)0x3000)
   USART_CR2_STOP_0=((uint32_t)0x1000)
   USART_CR2_STOP_1=((uint32_t)0x2000)
   USART_CR3_CTSE=((uint32_t)0x0200)
   USART_CR3_CTSIE=((uint32_t)0x0400)
   USART_CR3_DMAR=((uint32_t)0x0040)
   USART_CR3_DMAT=((uint32_t)0x0080)
   USART_CR3_EIE=((uint32_t)0x0001)
   USART_CR3_HDSEL=((uint32_t)0x0008)
   USART_CR3_IREN=((uint32_t)0x0002)
   USART_CR3_IRLP=((uint32_t)0x0004)
   USART_CR3_NACK=((uint32_t)0x0010)
   USART_CR3_ONEBIT=((uint32_t)0x0800)
   USART_CR3_RTSE=((uint32_t)0x0100)
   USART_CR3_SCEN=((uint32_t)0x0020)
   USART_DR_DR=((uint32_t)0x01FF)
   USART_GTPR_GT=((uint32_t)0xFF00)
   USART_GTPR_PSC=((uint32_t)0x00FF)
   USART_GTPR_PSC_0=((uint32_t)0x0001)
   USART_GTPR_PSC_1=((uint32_t)0x0002)
   USART_GTPR_PSC_2=((uint32_t)0x0004)
   USART_GTPR_PSC_3=((uint32_t)0x0008)
   USART_GTPR_PSC_4=((uint32_t)0x0010)
   USART_GTPR_PSC_5=((uint32_t)0x0020)
   USART_GTPR_PSC_6=((uint32_t)0x0040)
   USART_GTPR_PSC_7=((uint32_t)0x0080)
   USART_SR_CTS=((uint32_t)0x0200)
   USART_SR_FE=((uint32_t)0x0002)
   USART_SR_IDLE=((uint32_t)0x0010)
   USART_SR_LBD=((uint32_t)0x0100)
   USART_SR_NE=((uint32_t)0x0004)
   USART_SR_ORE=((uint32_t)0x0008)
   USART_SR_PE=((uint32_t)0x0001)
   USART_SR_RXNE=((uint32_t)0x0020)
   USART_SR_TC=((uint32_t)0x0040)
   USART_SR_TXE=((uint32_t)0x0080)
   USB_EXTI_LINE_WAKEUP=USB_WAKEUP_EXTI_LINE
   USB_FS_EXTI_LINE_WAKEUP=USB_OTG_FS_WAKEUP_EXTI_LINE
   USB_FS_EXTI_TRIGGER_BOTH_EDGE=USB_OTG_FS_WAKEUP_EXTI_RISING_FALLING_EDGE
   USB_FS_EXTI_TRIGGER_FALLING_EDGE=USB_OTG_FS_WAKEUP_EXTI_FALLING_EDGE
   USB_FS_EXTI_TRIGGER_RISING_EDGE=USB_OTG_FS_WAKEUP_EXTI_RISING_EDGE
   USB_HS_EXTI_LINE_WAKEUP=USB_OTG_HS_WAKEUP_EXTI_LINE
   USB_HS_EXTI_TRIGGER_BOTH_EDGE=USB_OTG_HS_WAKEUP_EXTI_RISING_FALLING_EDGE
   USB_HS_EXTI_TRIGGER_FALLING_EDGE=USB_OTG_HS_WAKEUP_EXTI_FALLING_EDGE
   USB_HS_EXTI_TRIGGER_RISING_EDGE=USB_OTG_HS_WAKEUP_EXTI_RISING_EDGE
   USB_OTG_BCNT=((uint32_t)0x00007FF0)
   USB_OTG_CHNUM=((uint32_t)0x0000000F)
   USB_OTG_CHNUM_0=((uint32_t)0x00000001)
   USB_OTG_CHNUM_1=((uint32_t)0x00000002)
   USB_OTG_CHNUM_2=((uint32_t)0x00000004)
   USB_OTG_CHNUM_3=((uint32_t)0x00000008)
   USB_OTG_CID_PRODUCT_ID=((uint32_t)0xFFFFFFFF)
   USB_OTG_DAINTMSK_IEPM=((uint32_t)0x0000FFFF)
   USB_OTG_DAINTMSK_OEPM=((uint32_t)0xFFFF0000)
   USB_OTG_DAINT_IEPINT=((uint32_t)0x0000FFFF)
   USB_OTG_DAINT_OEPINT=((uint32_t)0xFFFF0000)
   USB_OTG_DCFG_DAD=((uint32_t)0x000007F0)
   USB_OTG_DCFG_DAD_0=((uint32_t)0x00000010)
   USB_OTG_DCFG_DAD_1=((uint32_t)0x00000020)
   USB_OTG_DCFG_DAD_2=((uint32_t)0x00000040)
   USB_OTG_DCFG_DAD_3=((uint32_t)0x00000080)
   USB_OTG_DCFG_DAD_4=((uint32_t)0x00000100)
   USB_OTG_DCFG_DAD_5=((uint32_t)0x00000200)
   USB_OTG_DCFG_DAD_6=((uint32_t)0x00000400)
   USB_OTG_DCFG_DSPD=((uint32_t)0x00000003)
   USB_OTG_DCFG_DSPD_0=((uint32_t)0x00000001)
   USB_OTG_DCFG_DSPD_1=((uint32_t)0x00000002)
   USB_OTG_DCFG_NZLSOHSK=((uint32_t)0x00000004)
   USB_OTG_DCFG_PERSCHIVL=((uint32_t)0x03000000)
   USB_OTG_DCFG_PERSCHIVL_0=((uint32_t)0x01000000)
   USB_OTG_DCFG_PERSCHIVL_1=((uint32_t)0x02000000)
   USB_OTG_DCFG_PFIVL=((uint32_t)0x00001800)
   USB_OTG_DCFG_PFIVL_0=((uint32_t)0x00000800)
   USB_OTG_DCFG_PFIVL_1=((uint32_t)0x00001000)
   USB_OTG_DCTL_CGINAK=((uint32_t)0x00000100)
   USB_OTG_DCTL_CGONAK=((uint32_t)0x00000400)
   USB_OTG_DCTL_GINSTS=((uint32_t)0x00000004)
   USB_OTG_DCTL_GONSTS=((uint32_t)0x00000008)
   USB_OTG_DCTL_POPRGDNE=((uint32_t)0x00000800)
   USB_OTG_DCTL_RWUSIG=((uint32_t)0x00000001)
   USB_OTG_DCTL_SDIS=((uint32_t)0x00000002)
   USB_OTG_DCTL_SGINAK=((uint32_t)0x00000080)
   USB_OTG_DCTL_SGONAK=((uint32_t)0x00000200)
   USB_OTG_DCTL_TCTL=((uint32_t)0x00000070)
   USB_OTG_DCTL_TCTL_0=((uint32_t)0x00000010)
   USB_OTG_DCTL_TCTL_1=((uint32_t)0x00000020)
   USB_OTG_DCTL_TCTL_2=((uint32_t)0x00000040)
   USB_OTG_DEACHINTMSK_IEP1INTM=((uint32_t)0x00000002)
   USB_OTG_DEACHINTMSK_OEP1INTM=((uint32_t)0x00020000)
   USB_OTG_DEACHINT_IEP1INT=((uint32_t)0x00000002)
   USB_OTG_DEACHINT_OEP1INT=((uint32_t)0x00020000)
   USB_OTG_DEVICE_BASE=((uint32_t )0x800)
   USB_OTG_DIEPCTL_CNAK=((uint32_t)0x04000000)
   USB_OTG_DIEPCTL_EONUM_DPID=((uint32_t)0x00010000)
   USB_OTG_DIEPCTL_EPDIS=((uint32_t)0x40000000)
   USB_OTG_DIEPCTL_EPENA=((uint32_t)0x80000000)
   USB_OTG_DIEPCTL_EPTYP=((uint32_t)0x000C0000)
   USB_OTG_DIEPCTL_EPTYP_0=((uint32_t)0x00040000)
   USB_OTG_DIEPCTL_EPTYP_1=((uint32_t)0x00080000)
   USB_OTG_DIEPCTL_MPSIZ=((uint32_t)0x000007FF)
   USB_OTG_DIEPCTL_NAKSTS=((uint32_t)0x00020000)
   USB_OTG_DIEPCTL_SD0PID_SEVNFRM=((uint32_t)0x10000000)
   USB_OTG_DIEPCTL_SNAK=((uint32_t)0x08000000)
   USB_OTG_DIEPCTL_SODDFRM=((uint32_t)0x20000000)
   USB_OTG_DIEPCTL_STALL=((uint32_t)0x00200000)
   USB_OTG_DIEPCTL_TXFNUM=((uint32_t)0x03C00000)
   USB_OTG_DIEPCTL_TXFNUM_0=((uint32_t)0x00400000)
   USB_OTG_DIEPCTL_TXFNUM_1=((uint32_t)0x00800000)
   USB_OTG_DIEPCTL_TXFNUM_2=((uint32_t)0x01000000)
   USB_OTG_DIEPCTL_TXFNUM_3=((uint32_t)0x02000000)
   USB_OTG_DIEPCTL_USBAEP=((uint32_t)0x00008000)
   USB_OTG_DIEPDMA_DMAADDR=((uint32_t)0xFFFFFFFF)
   USB_OTG_DIEPEACHMSK1_BIM=((uint32_t)0x00000200)
   USB_OTG_DIEPEACHMSK1_EPDM=((uint32_t)0x00000002)
   USB_OTG_DIEPEACHMSK1_INEPNEM=((uint32_t)0x00000040)
   USB_OTG_DIEPEACHMSK1_INEPNMM=((uint32_t)0x00000020)
   USB_OTG_DIEPEACHMSK1_ITTXFEMSK=((uint32_t)0x00000010)
   USB_OTG_DIEPEACHMSK1_NAKM=((uint32_t)0x00002000)
   USB_OTG_DIEPEACHMSK1_TOM=((uint32_t)0x00000008)
   USB_OTG_DIEPEACHMSK1_TXFURM=((uint32_t)0x00000100)
   USB_OTG_DIEPEACHMSK1_XFRCM=((uint32_t)0x00000001)
   USB_OTG_DIEPEMPMSK_INEPTXFEM=((uint32_t)0x0000FFFF)
   USB_OTG_DIEPINT_BERR=((uint32_t)0x00001000)
   USB_OTG_DIEPINT_BNA=((uint32_t)0x00000200)
   USB_OTG_DIEPINT_EPDISD=((uint32_t)0x00000002)
   USB_OTG_DIEPINT_INEPNE=((uint32_t)0x00000040)
   USB_OTG_DIEPINT_ITTXFE=((uint32_t)0x00000010)
   USB_OTG_DIEPINT_NAK=((uint32_t)0x00002000)
   USB_OTG_DIEPINT_PKTDRPSTS=((uint32_t)0x00000800)
   USB_OTG_DIEPINT_TOC=((uint32_t)0x00000008)
   USB_OTG_DIEPINT_TXFE=((uint32_t)0x00000080)
   USB_OTG_DIEPINT_TXFIFOUDRN=((uint32_t)0x00000100)
   USB_OTG_DIEPINT_XFRC=((uint32_t)0x00000001)
   USB_OTG_DIEPMSK_BIM=((uint32_t)0x00000200)
   USB_OTG_DIEPMSK_EPDM=((uint32_t)0x00000002)
   USB_OTG_DIEPMSK_INEPNEM=((uint32_t)0x00000040)
   USB_OTG_DIEPMSK_INEPNMM=((uint32_t)0x00000020)
   USB_OTG_DIEPMSK_ITTXFEMSK=((uint32_t)0x00000010)
   USB_OTG_DIEPMSK_TOM=((uint32_t)0x00000008)
   USB_OTG_DIEPMSK_TXFURM=((uint32_t)0x00000100)
   USB_OTG_DIEPMSK_XFRCM=((uint32_t)0x00000001)
   USB_OTG_DIEPTSIZ_MULCNT=((uint32_t)0x60000000)
   USB_OTG_DIEPTSIZ_PKTCNT=((uint32_t)0x1FF80000)
   USB_OTG_DIEPTSIZ_XFRSIZ=((uint32_t)0x0007FFFF)
   USB_OTG_DIEPTXF_INEPTXFD=((uint32_t)0xFFFF0000)
   USB_OTG_DIEPTXF_INEPTXSA=((uint32_t)0x0000FFFF)
   USB_OTG_DOEPCTL_CNAK=((uint32_t)0x04000000)
   USB_OTG_DOEPCTL_EPDIS=((uint32_t)0x40000000)
   USB_OTG_DOEPCTL_EPENA=((uint32_t)0x80000000)
   USB_OTG_DOEPCTL_EPTYP=((uint32_t)0x000C0000)
   USB_OTG_DOEPCTL_EPTYP_0=((uint32_t)0x00040000)
   USB_OTG_DOEPCTL_EPTYP_1=((uint32_t)0x00080000)
   USB_OTG_DOEPCTL_MPSIZ=((uint32_t)0x000007FF)
   USB_OTG_DOEPCTL_NAKSTS=((uint32_t)0x00020000)
   USB_OTG_DOEPCTL_SD0PID_SEVNFRM=((uint32_t)0x10000000)
   USB_OTG_DOEPCTL_SNAK=((uint32_t)0x08000000)
   USB_OTG_DOEPCTL_SNPM=((uint32_t)0x00100000)
   USB_OTG_DOEPCTL_SODDFRM=((uint32_t)0x20000000)
   USB_OTG_DOEPCTL_STALL=((uint32_t)0x00200000)
   USB_OTG_DOEPCTL_USBAEP=((uint32_t)0x00008000)
   USB_OTG_DOEPEACHMSK1_BERRM=((uint32_t)0x00001000)
   USB_OTG_DOEPEACHMSK1_BIM=((uint32_t)0x00000200)
   USB_OTG_DOEPEACHMSK1_EPDM=((uint32_t)0x00000002)
   USB_OTG_DOEPEACHMSK1_INEPNEM=((uint32_t)0x00000040)
   USB_OTG_DOEPEACHMSK1_INEPNMM=((uint32_t)0x00000020)
   USB_OTG_DOEPEACHMSK1_ITTXFEMSK=((uint32_t)0x00000010)
   USB_OTG_DOEPEACHMSK1_NAKM=((uint32_t)0x00002000)
   USB_OTG_DOEPEACHMSK1_NYETM=((uint32_t)0x00004000)
   USB_OTG_DOEPEACHMSK1_TOM=((uint32_t)0x00000008)
   USB_OTG_DOEPEACHMSK1_TXFURM=((uint32_t)0x00000100)
   USB_OTG_DOEPEACHMSK1_XFRCM=((uint32_t)0x00000001)
   USB_OTG_DOEPINT_B2BSTUP=((uint32_t)0x00000040)
   USB_OTG_DOEPINT_EPDISD=((uint32_t)0x00000002)
   USB_OTG_DOEPINT_NYET=((uint32_t)0x00004000)
   USB_OTG_DOEPINT_OTEPDIS=((uint32_t)0x00000010)
   USB_OTG_DOEPINT_STUP=((uint32_t)0x00000008)
   USB_OTG_DOEPINT_XFRC=((uint32_t)0x00000001)
   USB_OTG_DOEPMSK_B2BSTUP=((uint32_t)0x00000040)
   USB_OTG_DOEPMSK_BOIM=((uint32_t)0x00000200)
   USB_OTG_DOEPMSK_EPDM=((uint32_t)0x00000002)
   USB_OTG_DOEPMSK_OPEM=((uint32_t)0x00000100)
   USB_OTG_DOEPMSK_OTEPDM=((uint32_t)0x00000010)
   USB_OTG_DOEPMSK_STUPM=((uint32_t)0x00000008)
   USB_OTG_DOEPMSK_XFRCM=((uint32_t)0x00000001)
   USB_OTG_DOEPTSIZ_PKTCNT=((uint32_t)0x1FF80000)
   USB_OTG_DOEPTSIZ_STUPCNT=((uint32_t)0x60000000)
   USB_OTG_DOEPTSIZ_STUPCNT_0=((uint32_t)0x20000000)
   USB_OTG_DOEPTSIZ_STUPCNT_1=((uint32_t)0x40000000)
   USB_OTG_DOEPTSIZ_XFRSIZ=((uint32_t)0x0007FFFF)
   USB_OTG_DPID=((uint32_t)0x00018000)
   USB_OTG_DPID_0=((uint32_t)0x00008000)
   USB_OTG_DPID_1=((uint32_t)0x00010000)
   USB_OTG_DSTS_EERR=((uint32_t)0x00000008)
   USB_OTG_DSTS_ENUMSPD=((uint32_t)0x00000006)
   USB_OTG_DSTS_ENUMSPD_0=((uint32_t)0x00000002)
   USB_OTG_DSTS_ENUMSPD_1=((uint32_t)0x00000004)
   USB_OTG_DSTS_FNSOF=((uint32_t)0x003FFF00)
   USB_OTG_DSTS_SUSPSTS=((uint32_t)0x00000001)
   USB_OTG_DTHRCTL_ARPEN=((uint32_t)0x08000000)
   USB_OTG_DTHRCTL_ISOTHREN=((uint32_t)0x00000002)
   USB_OTG_DTHRCTL_NONISOTHREN=((uint32_t)0x00000001)
   USB_OTG_DTHRCTL_RXTHREN=((uint32_t)0x00010000)
   USB_OTG_DTHRCTL_RXTHRLEN=((uint32_t)0x03FE0000)
   USB_OTG_DTHRCTL_RXTHRLEN_0=((uint32_t)0x00020000)
   USB_OTG_DTHRCTL_RXTHRLEN_1=((uint32_t)0x00040000)
   USB_OTG_DTHRCTL_RXTHRLEN_2=((uint32_t)0x00080000)
   USB_OTG_DTHRCTL_RXTHRLEN_3=((uint32_t)0x00100000)
   USB_OTG_DTHRCTL_RXTHRLEN_4=((uint32_t)0x00200000)
   USB_OTG_DTHRCTL_RXTHRLEN_5=((uint32_t)0x00400000)
   USB_OTG_DTHRCTL_RXTHRLEN_6=((uint32_t)0x00800000)
   USB_OTG_DTHRCTL_RXTHRLEN_7=((uint32_t)0x01000000)
   USB_OTG_DTHRCTL_RXTHRLEN_8=((uint32_t)0x02000000)
   USB_OTG_DTHRCTL_TXTHRLEN=((uint32_t)0x000007FC)
   USB_OTG_DTHRCTL_TXTHRLEN_0=((uint32_t)0x00000004)
   USB_OTG_DTHRCTL_TXTHRLEN_1=((uint32_t)0x00000008)
   USB_OTG_DTHRCTL_TXTHRLEN_2=((uint32_t)0x00000010)
   USB_OTG_DTHRCTL_TXTHRLEN_3=((uint32_t)0x00000020)
   USB_OTG_DTHRCTL_TXTHRLEN_4=((uint32_t)0x00000040)
   USB_OTG_DTHRCTL_TXTHRLEN_5=((uint32_t)0x00000080)
   USB_OTG_DTHRCTL_TXTHRLEN_6=((uint32_t)0x00000100)
   USB_OTG_DTHRCTL_TXTHRLEN_7=((uint32_t)0x00000200)
   USB_OTG_DTHRCTL_TXTHRLEN_8=((uint32_t)0x00000400)
   USB_OTG_DTXFSTS_INEPTFSAV=((uint32_t)0x0000FFFF)
   USB_OTG_DVBUSDIS_VBUSDT=((uint32_t)0x0000FFFF)
   USB_OTG_DVBUSPULSE_DVBUSP=((uint32_t)0x00000FFF)
   USB_OTG_EPNUM=((uint32_t)0x0000000F)
   USB_OTG_EPNUM_0=((uint32_t)0x00000001)
   USB_OTG_EPNUM_1=((uint32_t)0x00000002)
   USB_OTG_EPNUM_2=((uint32_t)0x00000004)
   USB_OTG_EPNUM_3=((uint32_t)0x00000008)
   USB_OTG_EP_REG_SIZE=((uint32_t )0x20)
   USB_OTG_FIFO_BASE=((uint32_t )0x1000)
   USB_OTG_FIFO_SIZE=((uint32_t )0x1000)
   USB_OTG_FRMNUM=((uint32_t)0x01E00000)
   USB_OTG_FRMNUM_0=((uint32_t)0x00200000)
   USB_OTG_FRMNUM_1=((uint32_t)0x00400000)
   USB_OTG_FRMNUM_2=((uint32_t)0x00800000)
   USB_OTG_FRMNUM_3=((uint32_t)0x01000000)
   USB_OTG_FS=((USB_OTG_GlobalTypeDef *) USB_OTG_FS_PERIPH_BASE)
   USB_OTG_FS_HOST_MAX_CHANNEL_NBR=12
   USB_OTG_FS_MAX_IN_ENDPOINTS=6
   USB_OTG_FS_MAX_OUT_ENDPOINTS=6
   USB_OTG_FS_PERIPH_BASE=((uint32_t )0x50000000)
   USB_OTG_FS_TOTAL_FIFO_SIZE=1280
   USB_OTG_GAHBCFG_DMAEN=((uint32_t)0x00000020)
   USB_OTG_GAHBCFG_GINT=((uint32_t)0x00000001)
   USB_OTG_GAHBCFG_HBSTLEN=((uint32_t)0x0000001E)
   USB_OTG_GAHBCFG_HBSTLEN_0=((uint32_t)0x00000002)
   USB_OTG_GAHBCFG_HBSTLEN_1=((uint32_t)0x00000004)
   USB_OTG_GAHBCFG_HBSTLEN_2=((uint32_t)0x00000008)
   USB_OTG_GAHBCFG_HBSTLEN_3=((uint32_t)0x00000010)
   USB_OTG_GAHBCFG_PTXFELVL=((uint32_t)0x00000100)
   USB_OTG_GAHBCFG_TXFELVL=((uint32_t)0x00000080)
   USB_OTG_GCCFG_PWRDWN=((uint32_t)0x00010000)
   USB_OTG_GCCFG_VBDEN=((uint32_t)0x00200000)
   USB_OTG_GINTMSK_CIDSCHGM=((uint32_t)0x10000000)
   USB_OTG_GINTMSK_DISCINT=((uint32_t)0x20000000)
   USB_OTG_GINTMSK_ENUMDNEM=((uint32_t)0x00002000)
   USB_OTG_GINTMSK_EOPFM=((uint32_t)0x00008000)
   USB_OTG_GINTMSK_EPMISM=((uint32_t)0x00020000)
   USB_OTG_GINTMSK_ESUSPM=((uint32_t)0x00000400)
   USB_OTG_GINTMSK_FSUSPM=((uint32_t)0x00400000)
   USB_OTG_GINTMSK_GINAKEFFM=((uint32_t)0x00000040)
   USB_OTG_GINTMSK_GONAKEFFM=((uint32_t)0x00000080)
   USB_OTG_GINTMSK_HCIM=((uint32_t)0x02000000)
   USB_OTG_GINTMSK_IEPINT=((uint32_t)0x00040000)
   USB_OTG_GINTMSK_IISOIXFRM=((uint32_t)0x00100000)
   USB_OTG_GINTMSK_ISOODRPM=((uint32_t)0x00004000)
   USB_OTG_GINTMSK_LPMINTM=((uint32_t)0x08000000)
   USB_OTG_GINTMSK_MMISM=((uint32_t)0x00000002)
   USB_OTG_GINTMSK_NPTXFEM=((uint32_t)0x00000020)
   USB_OTG_GINTMSK_OEPINT=((uint32_t)0x00080000)
   USB_OTG_GINTMSK_OTGINT=((uint32_t)0x00000004)
   USB_OTG_GINTMSK_PRTIM=((uint32_t)0x01000000)
   USB_OTG_GINTMSK_PTXFEM=((uint32_t)0x04000000)
   USB_OTG_GINTMSK_PXFRM_IISOOXFRM=((uint32_t)0x00200000)
   USB_OTG_GINTMSK_RSTDEM=((uint32_t)0x00800000)
   USB_OTG_GINTMSK_RXFLVLM=((uint32_t)0x00000010)
   USB_OTG_GINTMSK_SOFM=((uint32_t)0x00000008)
   USB_OTG_GINTMSK_SRQIM=((uint32_t)0x40000000)
   USB_OTG_GINTMSK_USBRST=((uint32_t)0x00001000)
   USB_OTG_GINTMSK_USBSUSPM=((uint32_t)0x00000800)
   USB_OTG_GINTMSK_WUIM=((uint32_t)0x80000000)
   USB_OTG_GINTSTS_BOUTNAKEFF=((uint32_t)0x00000080)
   USB_OTG_GINTSTS_CIDSCHG=((uint32_t)0x10000000)
   USB_OTG_GINTSTS_CMOD=((uint32_t)0x00000001)
   USB_OTG_GINTSTS_DATAFSUSP=((uint32_t)0x00400000)
   USB_OTG_GINTSTS_DISCINT=((uint32_t)0x20000000)
   USB_OTG_GINTSTS_ENUMDNE=((uint32_t)0x00002000)
   USB_OTG_GINTSTS_EOPF=((uint32_t)0x00008000)
   USB_OTG_GINTSTS_ESUSP=((uint32_t)0x00000400)
   USB_OTG_GINTSTS_GINAKEFF=((uint32_t)0x00000040)
   USB_OTG_GINTSTS_HCINT=((uint32_t)0x02000000)
   USB_OTG_GINTSTS_HPRTINT=((uint32_t)0x01000000)
   USB_OTG_GINTSTS_IEPINT=((uint32_t)0x00040000)
   USB_OTG_GINTSTS_IISOIXFR=((uint32_t)0x00100000)
   USB_OTG_GINTSTS_ISOODRP=((uint32_t)0x00004000)
   USB_OTG_GINTSTS_LPMINT=((uint32_t)0x08000000)
   USB_OTG_GINTSTS_MMIS=((uint32_t)0x00000002)
   USB_OTG_GINTSTS_NPTXFE=((uint32_t)0x00000020)
   USB_OTG_GINTSTS_OEPINT=((uint32_t)0x00080000)
   USB_OTG_GINTSTS_OTGINT=((uint32_t)0x00000004)
   USB_OTG_GINTSTS_PTXFE=((uint32_t)0x04000000)
   USB_OTG_GINTSTS_PXFR_INCOMPISOOUT=((uint32_t)0x00200000)
   USB_OTG_GINTSTS_RSTDET=((uint32_t)0x00800000)
   USB_OTG_GINTSTS_RXFLVL=((uint32_t)0x00000010)
   USB_OTG_GINTSTS_SOF=((uint32_t)0x00000008)
   USB_OTG_GINTSTS_SRQINT=((uint32_t)0x40000000)
   USB_OTG_GINTSTS_USBRST=((uint32_t)0x00001000)
   USB_OTG_GINTSTS_USBSUSP=((uint32_t)0x00000800)
   USB_OTG_GINTSTS_WKUINT=((uint32_t)0x80000000)
   USB_OTG_GLOBAL_BASE=((uint32_t )0x000)
   USB_OTG_GLPMCFG_BESL=((uint32_t)0x0000003C)
   USB_OTG_GLPMCFG_BESLTHRS=((uint32_t)0x00000F00)
   USB_OTG_GLPMCFG_ENBESL=((uint32_t)0x10000000)
   USB_OTG_GLPMCFG_L1DSEN=((uint32_t)0x00001000)
   USB_OTG_GLPMCFG_L1RSMOK=((uint32_t)0x00010000)
   USB_OTG_GLPMCFG_L1SSEN=((uint32_t)0x00000080)
   USB_OTG_GLPMCFG_LPMACK=((uint32_t)0x00000002)
   USB_OTG_GLPMCFG_LPMCHIDX=((uint32_t)0x001E0000)
   USB_OTG_GLPMCFG_LPMEN=((uint32_t)0x00000001)
   USB_OTG_GLPMCFG_LPMRCNT=((uint32_t)0x00E00000)
   USB_OTG_GLPMCFG_LPMRCNTSTS=((uint32_t)0x0E000000)
   USB_OTG_GLPMCFG_LPMRSP=((uint32_t)0x00006000)
   USB_OTG_GLPMCFG_REMWAKE=((uint32_t)0x00000040)
   USB_OTG_GLPMCFG_SLPSTS=((uint32_t)0x00008000)
   USB_OTG_GLPMCFG_SNDLPM=((uint32_t)0x01000000)
   USB_OTG_GNPTXSTS_NPTQXSAV=((uint32_t)0x00FF0000)
   USB_OTG_GNPTXSTS_NPTQXSAV_0=((uint32_t)0x00010000)
   USB_OTG_GNPTXSTS_NPTQXSAV_1=((uint32_t)0x00020000)
   USB_OTG_GNPTXSTS_NPTQXSAV_2=((uint32_t)0x00040000)
   USB_OTG_GNPTXSTS_NPTQXSAV_3=((uint32_t)0x00080000)
   USB_OTG_GNPTXSTS_NPTQXSAV_4=((uint32_t)0x00100000)
   USB_OTG_GNPTXSTS_NPTQXSAV_5=((uint32_t)0x00200000)
   USB_OTG_GNPTXSTS_NPTQXSAV_6=((uint32_t)0x00400000)
   USB_OTG_GNPTXSTS_NPTQXSAV_7=((uint32_t)0x00800000)
   USB_OTG_GNPTXSTS_NPTXFSAV=((uint32_t)0x0000FFFF)
   USB_OTG_GNPTXSTS_NPTXQTOP=((uint32_t)0x7F000000)
   USB_OTG_GNPTXSTS_NPTXQTOP_0=((uint32_t)0x01000000)
   USB_OTG_GNPTXSTS_NPTXQTOP_1=((uint32_t)0x02000000)
   USB_OTG_GNPTXSTS_NPTXQTOP_2=((uint32_t)0x04000000)
   USB_OTG_GNPTXSTS_NPTXQTOP_3=((uint32_t)0x08000000)
   USB_OTG_GNPTXSTS_NPTXQTOP_4=((uint32_t)0x10000000)
   USB_OTG_GNPTXSTS_NPTXQTOP_5=((uint32_t)0x20000000)
   USB_OTG_GNPTXSTS_NPTXQTOP_6=((uint32_t)0x40000000)
   USB_OTG_GOTGCTL_ASVLD=((uint32_t)0x00040000)
   USB_OTG_GOTGCTL_AVALOEN=((uint32_t)0x00000010)
   USB_OTG_GOTGCTL_AVALOVAL=((uint32_t)0x00000020)
   USB_OTG_GOTGCTL_BSESVLD=((uint32_t)0x00080000)
   USB_OTG_GOTGCTL_BVALOEN=((uint32_t)0x00000040)
   USB_OTG_GOTGCTL_BVALOVAL=((uint32_t)0x00000080)
   USB_OTG_GOTGCTL_CIDSTS=((uint32_t)0x00010000)
   USB_OTG_GOTGCTL_DBCT=((uint32_t)0x00020000)
   USB_OTG_GOTGCTL_DHNPEN=((uint32_t)0x00000800)
   USB_OTG_GOTGCTL_EHEN=((uint32_t)0x00001000)
   USB_OTG_GOTGCTL_HNGSCS=((uint32_t)0x00000100)
   USB_OTG_GOTGCTL_HNPRQ=((uint32_t)0x00000200)
   USB_OTG_GOTGCTL_HSHNPEN=((uint32_t)0x00000400)
   USB_OTG_GOTGCTL_OTGVER=((uint32_t)0x00100000)
   USB_OTG_GOTGCTL_SRQ=((uint32_t)0x00000002)
   USB_OTG_GOTGCTL_SRQSCS=((uint32_t)0x00000001)
   USB_OTG_GOTGCTL_VBVALOEN=((uint32_t)0x00000004)
   USB_OTG_GOTGCTL_VBVALOVAL=((uint32_t)0x00000008)
   USB_OTG_GOTGINT_ADTOCHG=((uint32_t)0x00040000)
   USB_OTG_GOTGINT_DBCDNE=((uint32_t)0x00080000)
   USB_OTG_GOTGINT_HNGDET=((uint32_t)0x00020000)
   USB_OTG_GOTGINT_HNSSCHG=((uint32_t)0x00000200)
   USB_OTG_GOTGINT_IDCHNG=((uint32_t)0x00100000)
   USB_OTG_GOTGINT_SEDET=((uint32_t)0x00000004)
   USB_OTG_GOTGINT_SRSSCHG=((uint32_t)0x00000100)
   USB_OTG_GPWRDN_ADPIF=((uint32_t)0x00800000)
   USB_OTG_GPWRDN_ADPMEN=((uint32_t)0x00000001)
   USB_OTG_GRSTCTL_AHBIDL=((uint32_t)0x80000000)
   USB_OTG_GRSTCTL_CSRST=((uint32_t)0x00000001)
   USB_OTG_GRSTCTL_DMAREQ=((uint32_t)0x40000000)
   USB_OTG_GRSTCTL_FCRST=((uint32_t)0x00000004)
   USB_OTG_GRSTCTL_HSRST=((uint32_t)0x00000002)
   USB_OTG_GRSTCTL_RXFFLSH=((uint32_t)0x00000010)
   USB_OTG_GRSTCTL_TXFFLSH=((uint32_t)0x00000020)
   USB_OTG_GRSTCTL_TXFNUM=((uint32_t)0x000007C0)
   USB_OTG_GRSTCTL_TXFNUM_0=((uint32_t)0x00000040)
   USB_OTG_GRSTCTL_TXFNUM_1=((uint32_t)0x00000080)
   USB_OTG_GRSTCTL_TXFNUM_2=((uint32_t)0x00000100)
   USB_OTG_GRSTCTL_TXFNUM_3=((uint32_t)0x00000200)
   USB_OTG_GRSTCTL_TXFNUM_4=((uint32_t)0x00000400)
   USB_OTG_GRXFSIZ_RXFD=((uint32_t)0x0000FFFF)
   USB_OTG_GRXSTSP_BCNT=((uint32_t)0x00007FF0)
   USB_OTG_GRXSTSP_DPID=((uint32_t)0x00018000)
   USB_OTG_GRXSTSP_EPNUM=((uint32_t)0x0000000F)
   USB_OTG_GRXSTSP_PKTSTS=((uint32_t)0x001E0000)
   USB_OTG_GUSBCFG_CTXPKT=((uint32_t)0x80000000)
   USB_OTG_GUSBCFG_FDMOD=((uint32_t)0x40000000)
   USB_OTG_GUSBCFG_FHMOD=((uint32_t)0x20000000)
   USB_OTG_GUSBCFG_HNPCAP=((uint32_t)0x00000200)
   USB_OTG_GUSBCFG_PCCI=((uint32_t)0x00800000)
   USB_OTG_GUSBCFG_PHYLPCS=((uint32_t)0x00008000)
   USB_OTG_GUSBCFG_PHYSEL=((uint32_t)0x00000040)
   USB_OTG_GUSBCFG_PTCI=((uint32_t)0x01000000)
   USB_OTG_GUSBCFG_SRPCAP=((uint32_t)0x00000100)
   USB_OTG_GUSBCFG_TOCAL=((uint32_t)0x00000007)
   USB_OTG_GUSBCFG_TOCAL_0=((uint32_t)0x00000001)
   USB_OTG_GUSBCFG_TOCAL_1=((uint32_t)0x00000002)
   USB_OTG_GUSBCFG_TOCAL_2=((uint32_t)0x00000004)
   USB_OTG_GUSBCFG_TRDT=((uint32_t)0x00003C00)
   USB_OTG_GUSBCFG_TRDT_0=((uint32_t)0x00000400)
   USB_OTG_GUSBCFG_TRDT_1=((uint32_t)0x00000800)
   USB_OTG_GUSBCFG_TRDT_2=((uint32_t)0x00001000)
   USB_OTG_GUSBCFG_TRDT_3=((uint32_t)0x00002000)
   USB_OTG_GUSBCFG_TSDPS=((uint32_t)0x00400000)
   USB_OTG_GUSBCFG_ULPIAR=((uint32_t)0x00040000)
   USB_OTG_GUSBCFG_ULPICSM=((uint32_t)0x00080000)
   USB_OTG_GUSBCFG_ULPIEVBUSD=((uint32_t)0x00100000)
   USB_OTG_GUSBCFG_ULPIEVBUSI=((uint32_t)0x00200000)
   USB_OTG_GUSBCFG_ULPIFSLS=((uint32_t)0x00020000)
   USB_OTG_GUSBCFG_ULPIIPD=((uint32_t)0x02000000)
   USB_OTG_HAINTMSK_HAINTM=((uint32_t)0x0000FFFF)
   USB_OTG_HAINT_HAINT=((uint32_t)0x0000FFFF)
   USB_OTG_HCCHAR_CHDIS=((uint32_t)0x40000000)
   USB_OTG_HCCHAR_CHENA=((uint32_t)0x80000000)
   USB_OTG_HCCHAR_DAD=((uint32_t)0x1FC00000)
   USB_OTG_HCCHAR_DAD_0=((uint32_t)0x00400000)
   USB_OTG_HCCHAR_DAD_1=((uint32_t)0x00800000)
   USB_OTG_HCCHAR_DAD_2=((uint32_t)0x01000000)
   USB_OTG_HCCHAR_DAD_3=((uint32_t)0x02000000)
   USB_OTG_HCCHAR_DAD_4=((uint32_t)0x04000000)
   USB_OTG_HCCHAR_DAD_5=((uint32_t)0x08000000)
   USB_OTG_HCCHAR_DAD_6=((uint32_t)0x10000000)
   USB_OTG_HCCHAR_EPDIR=((uint32_t)0x00008000)
   USB_OTG_HCCHAR_EPNUM=((uint32_t)0x00007800)
   USB_OTG_HCCHAR_EPNUM_0=((uint32_t)0x00000800)
   USB_OTG_HCCHAR_EPNUM_1=((uint32_t)0x00001000)
   USB_OTG_HCCHAR_EPNUM_2=((uint32_t)0x00002000)
   USB_OTG_HCCHAR_EPNUM_3=((uint32_t)0x00004000)
   USB_OTG_HCCHAR_EPTYP=((uint32_t)0x000C0000)
   USB_OTG_HCCHAR_EPTYP_0=((uint32_t)0x00040000)
   USB_OTG_HCCHAR_EPTYP_1=((uint32_t)0x00080000)
   USB_OTG_HCCHAR_LSDEV=((uint32_t)0x00020000)
   USB_OTG_HCCHAR_MC=((uint32_t)0x00300000)
   USB_OTG_HCCHAR_MC_0=((uint32_t)0x00100000)
   USB_OTG_HCCHAR_MC_1=((uint32_t)0x00200000)
   USB_OTG_HCCHAR_MPSIZ=((uint32_t)0x000007FF)
   USB_OTG_HCCHAR_ODDFRM=((uint32_t)0x20000000)
   USB_OTG_HCDMA_DMAADDR=((uint32_t)0xFFFFFFFF)
   USB_OTG_HCFG_FSLSPCS=((uint32_t)0x00000003)
   USB_OTG_HCFG_FSLSPCS_0=((uint32_t)0x00000001)
   USB_OTG_HCFG_FSLSPCS_1=((uint32_t)0x00000002)
   USB_OTG_HCFG_FSLSS=((uint32_t)0x00000004)
   USB_OTG_HCINTMSK_ACKM=((uint32_t)0x00000020)
   USB_OTG_HCINTMSK_AHBERR=((uint32_t)0x00000004)
   USB_OTG_HCINTMSK_BBERRM=((uint32_t)0x00000100)
   USB_OTG_HCINTMSK_CHHM=((uint32_t)0x00000002)
   USB_OTG_HCINTMSK_DTERRM=((uint32_t)0x00000400)
   USB_OTG_HCINTMSK_FRMORM=((uint32_t)0x00000200)
   USB_OTG_HCINTMSK_NAKM=((uint32_t)0x00000010)
   USB_OTG_HCINTMSK_NYET=((uint32_t)0x00000040)
   USB_OTG_HCINTMSK_STALLM=((uint32_t)0x00000008)
   USB_OTG_HCINTMSK_TXERRM=((uint32_t)0x00000080)
   USB_OTG_HCINTMSK_XFRCM=((uint32_t)0x00000001)
   USB_OTG_HCINT_ACK=((uint32_t)0x00000020)
   USB_OTG_HCINT_AHBERR=((uint32_t)0x00000004)
   USB_OTG_HCINT_BBERR=((uint32_t)0x00000100)
   USB_OTG_HCINT_CHH=((uint32_t)0x00000002)
   USB_OTG_HCINT_DTERR=((uint32_t)0x00000400)
   USB_OTG_HCINT_FRMOR=((uint32_t)0x00000200)
   USB_OTG_HCINT_NAK=((uint32_t)0x00000010)
   USB_OTG_HCINT_NYET=((uint32_t)0x00000040)
   USB_OTG_HCINT_STALL=((uint32_t)0x00000008)
   USB_OTG_HCINT_TXERR=((uint32_t)0x00000080)
   USB_OTG_HCINT_XFRC=((uint32_t)0x00000001)
   USB_OTG_HCSPLT_COMPLSPLT=((uint32_t)0x00010000)
   USB_OTG_HCSPLT_HUBADDR=((uint32_t)0x00003F80)
   USB_OTG_HCSPLT_HUBADDR_0=((uint32_t)0x00000080)
   USB_OTG_HCSPLT_HUBADDR_1=((uint32_t)0x00000100)
   USB_OTG_HCSPLT_HUBADDR_2=((uint32_t)0x00000200)
   USB_OTG_HCSPLT_HUBADDR_3=((uint32_t)0x00000400)
   USB_OTG_HCSPLT_HUBADDR_4=((uint32_t)0x00000800)
   USB_OTG_HCSPLT_HUBADDR_5=((uint32_t)0x00001000)
   USB_OTG_HCSPLT_HUBADDR_6=((uint32_t)0x00002000)
   USB_OTG_HCSPLT_PRTADDR=((uint32_t)0x0000007F)
   USB_OTG_HCSPLT_PRTADDR_0=((uint32_t)0x00000001)
   USB_OTG_HCSPLT_PRTADDR_1=((uint32_t)0x00000002)
   USB_OTG_HCSPLT_PRTADDR_2=((uint32_t)0x00000004)
   USB_OTG_HCSPLT_PRTADDR_3=((uint32_t)0x00000008)
   USB_OTG_HCSPLT_PRTADDR_4=((uint32_t)0x00000010)
   USB_OTG_HCSPLT_PRTADDR_5=((uint32_t)0x00000020)
   USB_OTG_HCSPLT_PRTADDR_6=((uint32_t)0x00000040)
   USB_OTG_HCSPLT_SPLITEN=((uint32_t)0x80000000)
   USB_OTG_HCSPLT_XACTPOS=((uint32_t)0x0000C000)
   USB_OTG_HCSPLT_XACTPOS_0=((uint32_t)0x00004000)
   USB_OTG_HCSPLT_XACTPOS_1=((uint32_t)0x00008000)
   USB_OTG_HCTSIZ_DOPING=((uint32_t)0x80000000)
   USB_OTG_HCTSIZ_DPID=((uint32_t)0x60000000)
   USB_OTG_HCTSIZ_DPID_0=((uint32_t)0x20000000)
   USB_OTG_HCTSIZ_DPID_1=((uint32_t)0x40000000)
   USB_OTG_HCTSIZ_PKTCNT=((uint32_t)0x1FF80000)
   USB_OTG_HCTSIZ_XFRSIZ=((uint32_t)0x0007FFFF)
   USB_OTG_HFIR_FRIVL=((uint32_t)0x0000FFFF)
   USB_OTG_HFNUM_FRNUM=((uint32_t)0x0000FFFF)
   USB_OTG_HFNUM_FTREM=((uint32_t)0xFFFF0000)
   USB_OTG_HOST_BASE=((uint32_t )0x400)
   USB_OTG_HOST_CHANNEL_BASE=((uint32_t )0x500)
   USB_OTG_HOST_CHANNEL_SIZE=((uint32_t )0x20)
   USB_OTG_HOST_PORT_BASE=((uint32_t )0x440)
   USB_OTG_HPRT_PCDET=((uint32_t)0x00000002)
   USB_OTG_HPRT_PCSTS=((uint32_t)0x00000001)
   USB_OTG_HPRT_PENA=((uint32_t)0x00000004)
   USB_OTG_HPRT_PENCHNG=((uint32_t)0x00000008)
   USB_OTG_HPRT_PLSTS=((uint32_t)0x00000C00)
   USB_OTG_HPRT_PLSTS_0=((uint32_t)0x00000400)
   USB_OTG_HPRT_PLSTS_1=((uint32_t)0x00000800)
   USB_OTG_HPRT_POCA=((uint32_t)0x00000010)
   USB_OTG_HPRT_POCCHNG=((uint32_t)0x00000020)
   USB_OTG_HPRT_PPWR=((uint32_t)0x00001000)
   USB_OTG_HPRT_PRES=((uint32_t)0x00000040)
   USB_OTG_HPRT_PRST=((uint32_t)0x00000100)
   USB_OTG_HPRT_PSPD=((uint32_t)0x00060000)
   USB_OTG_HPRT_PSPD_0=((uint32_t)0x00020000)
   USB_OTG_HPRT_PSPD_1=((uint32_t)0x00040000)
   USB_OTG_HPRT_PSUSP=((uint32_t)0x00000080)
   USB_OTG_HPRT_PTCTL=((uint32_t)0x0001E000)
   USB_OTG_HPRT_PTCTL_0=((uint32_t)0x00002000)
   USB_OTG_HPRT_PTCTL_1=((uint32_t)0x00004000)
   USB_OTG_HPRT_PTCTL_2=((uint32_t)0x00008000)
   USB_OTG_HPRT_PTCTL_3=((uint32_t)0x00010000)
   USB_OTG_HPTXFSIZ_PTXFD=((uint32_t)0xFFFF0000)
   USB_OTG_HPTXFSIZ_PTXSA=((uint32_t)0x0000FFFF)
   USB_OTG_HPTXSTS_PTXFSAVL=((uint32_t)0x0000FFFF)
   USB_OTG_HPTXSTS_PTXQSAV=((uint32_t)0x00FF0000)
   USB_OTG_HPTXSTS_PTXQSAV_0=((uint32_t)0x00010000)
   USB_OTG_HPTXSTS_PTXQSAV_1=((uint32_t)0x00020000)
   USB_OTG_HPTXSTS_PTXQSAV_2=((uint32_t)0x00040000)
   USB_OTG_HPTXSTS_PTXQSAV_3=((uint32_t)0x00080000)
   USB_OTG_HPTXSTS_PTXQSAV_4=((uint32_t)0x00100000)
   USB_OTG_HPTXSTS_PTXQSAV_5=((uint32_t)0x00200000)
   USB_OTG_HPTXSTS_PTXQSAV_6=((uint32_t)0x00400000)
   USB_OTG_HPTXSTS_PTXQSAV_7=((uint32_t)0x00800000)
   USB_OTG_HPTXSTS_PTXQTOP=((uint32_t)0xFF000000)
   USB_OTG_HPTXSTS_PTXQTOP_0=((uint32_t)0x01000000)
   USB_OTG_HPTXSTS_PTXQTOP_1=((uint32_t)0x02000000)
   USB_OTG_HPTXSTS_PTXQTOP_2=((uint32_t)0x04000000)
   USB_OTG_HPTXSTS_PTXQTOP_3=((uint32_t)0x08000000)
   USB_OTG_HPTXSTS_PTXQTOP_4=((uint32_t)0x10000000)
   USB_OTG_HPTXSTS_PTXQTOP_5=((uint32_t)0x20000000)
   USB_OTG_HPTXSTS_PTXQTOP_6=((uint32_t)0x40000000)
   USB_OTG_HPTXSTS_PTXQTOP_7=((uint32_t)0x80000000)
   USB_OTG_HS=((USB_OTG_GlobalTypeDef *) USB_OTG_HS_PERIPH_BASE)
   USB_OTG_HS_HOST_MAX_CHANNEL_NBR=16
   USB_OTG_HS_MAX_IN_ENDPOINTS=8
   USB_OTG_HS_PERIPH_BASE=((uint32_t )0x40040000)
   USB_OTG_HS_TOTAL_FIFO_SIZE=4096
   USB_OTG_IN_ENDPOINT_BASE=((uint32_t )0x900)
   USB_OTG_NPTXFD=((uint32_t)0xFFFF0000)
   USB_OTG_NPTXFSA=((uint32_t)0x0000FFFF)
   USB_OTG_OUT_ENDPOINT_BASE=((uint32_t )0xB00)
   USB_OTG_PCGCCTL_BASE=((uint32_t )0xE00)
   USB_OTG_PCGCCTL_GATECLK=((uint32_t)0x00000002)
   USB_OTG_PCGCCTL_PHYSUSP=((uint32_t)0x00000010)
   USB_OTG_PCGCCTL_STOPCLK=((uint32_t)0x00000001)
   USB_OTG_PCGCR_GATEHCLK=((uint32_t)0x00000002)
   USB_OTG_PCGCR_PHYSUSP=((uint32_t)0x00000010)
   USB_OTG_PCGCR_STPPCLK=((uint32_t)0x00000001)
   USB_OTG_PKTSTS=((uint32_t)0x001E0000)
   USB_OTG_PKTSTS_0=((uint32_t)0x00020000)
   USB_OTG_PKTSTS_1=((uint32_t)0x00040000)
   USB_OTG_PKTSTS_2=((uint32_t)0x00080000)
   USB_OTG_PKTSTS_3=((uint32_t)0x00100000)
   USB_OTG_TX0FD=((uint32_t)0xFFFF0000)
   USB_OTG_TX0FSA=((uint32_t)0x0000FFFF)
   USER_BUTTON_EXTI_IRQn=WAKEUP_BUTTON_EXTI_IRQn
   USER_BUTTON_GPIO_CLK_DISABLE()=WAKEUP_BUTTON_GPIO_CLK_DISABLE()
   USER_BUTTON_GPIO_CLK_ENABLE()=WAKEUP_BUTTON_GPIO_CLK_ENABLE()
   USER_BUTTON_GPIO_PORT=WAKEUP_BUTTON_GPIO_PORT
   USER_BUTTON_PIN=WAKEUP_BUTTON_PIN
   USE_RTOS=0
   UTILITYSCREEN_PRESENTER_HPP=
   UTILITYSCREEN_VIEW_BASE_HPP=
   UTILITYSCREEN_VIEW_HPP=
   UTILS_HPP=
   va_arg(v,l)=__builtin_va_arg(v,l)
   va_copy(d,s)=__builtin_va_copy(d,s)
   va_end(v)=__builtin_va_end(v)
   va_start(v,l)=__builtin_va_start(v,l)
   VDD_VALUE=((uint32_t)3300)
   VIEW_HPP=
   VLAN_TAG=ETH_VLAN_TAG
   VOLTAGE_RANGE_1=FLASH_VOLTAGE_RANGE_1
   VOLTAGE_RANGE_2=FLASH_VOLTAGE_RANGE_2
   VOLTAGE_RANGE_3=FLASH_VOLTAGE_RANGE_3
   VOLTAGE_RANGE_4=FLASH_VOLTAGE_RANGE_4
   WAKEUP_BUTTON_EXTI_IRQn=EXTI0_IRQn
   WAKEUP_BUTTON_GPIO_CLK_DISABLE()=__HAL_RCC_GPIOA_CLK_DISABLE()
   WAKEUP_BUTTON_GPIO_CLK_ENABLE()=__HAL_RCC_GPIOA_CLK_ENABLE()
   WAKEUP_BUTTON_GPIO_PORT=GPIOA
   WAKEUP_BUTTON_PIN=GPIO_PIN_0
   WCHAR_MAX=(__WCHAR_MAX__)
   WCHAR_MIN=(__WCHAR_MIN__)
   WIDGET_HPP=
   WINT_MAX=(__WINT_MAX__)
   WINT_MIN=(__WINT_MIN__)
   WRITE_DISABLE_CMD=0x04
   WRITE_ENABLE_CMD=0x06
   WRITE_ENHANCED_VOL_CFG_REG_CMD=0x61
   WRITE_LOCK_REG_CMD=0xE5
   WRITE_NONVOL_CFG_REG_CMD=0xB1
   WRITE_REG(REG,VAL)=((REG) = (VAL))
   WRITE_STATUS_REG_CMD=0x01
   WRITE_VOL_CFG_REG_CMD=0x81
   WRPAREA_BANK1_AREAA=OB_WRPAREA_BANK1_AREAA
   WRPAREA_BANK1_AREAB=OB_WRPAREA_BANK1_AREAB
   WRPAREA_BANK2_AREAA=OB_WRPAREA_BANK2_AREAA
   WRPAREA_BANK2_AREAB=OB_WRPAREA_BANK2_AREAB
   WRPSTATE_DISABLE=OB_WRPSTATE_DISABLE
   WRPSTATE_ENABLE=OB_WRPSTATE_ENABLE
   WUPP_BIT_NUMBER=POSITION_VAL(PWR_CSR_WUPP)
   WWDG=((WWDG_TypeDef *) WWDG_BASE)
   WWDG_BASE=(APB1PERIPH_BASE + 0x2C00)
   WWDG_CFR_EWI=((uint32_t)0x0200)
   WWDG_CFR_W0=((uint32_t)0x0001)
   WWDG_CFR_W1=((uint32_t)0x0002)
   WWDG_CFR_W2=((uint32_t)0x0004)
   WWDG_CFR_W3=((uint32_t)0x0008)
   WWDG_CFR_W4=((uint32_t)0x0010)
   WWDG_CFR_W5=((uint32_t)0x0020)
   WWDG_CFR_W6=((uint32_t)0x0040)
   WWDG_CFR_W=((uint32_t)0x007F)
   WWDG_CFR_WDGTB0=((uint32_t)0x0080)
   WWDG_CFR_WDGTB1=((uint32_t)0x0100)
   WWDG_CFR_WDGTB=((uint32_t)0x0180)
   WWDG_CR_T0=((uint32_t)0x01)
   WWDG_CR_T1=((uint32_t)0x02)
   WWDG_CR_T2=((uint32_t)0x04)
   WWDG_CR_T3=((uint32_t)0x08)
   WWDG_CR_T4=((uint32_t)0x10)
   WWDG_CR_T5=((uint32_t)0x20)
   WWDG_CR_T6=((uint32_t)0x40)
   WWDG_CR_T=((uint32_t)0x7F)
   WWDG_CR_WDGA=((uint32_t)0x80)
   WWDG_SR_EWIF=((uint32_t)0x01)
   xPSR_C_Msk=(1UL << xPSR_C_Pos)
   xPSR_C_Pos=29
   xPSR_GE_Msk=(0xFUL << xPSR_GE_Pos)
   xPSR_GE_Pos=16
   xPSR_ISR_Msk=(0x1FFUL )
   xPSR_ISR_Pos=0
   xPSR_IT_Msk=(3UL << xPSR_IT_Pos)
   xPSR_IT_Pos=25
   xPSR_N_Msk=(1UL << xPSR_N_Pos)
   xPSR_N_Pos=31
   xPSR_Q_Msk=(1UL << xPSR_Q_Pos)
   xPSR_Q_Pos=27
   xPSR_T_Msk=(1UL << xPSR_T_Pos)
   xPSR_T_Pos=24
   xPSR_V_Msk=(1UL << xPSR_V_Pos)
   xPSR_V_Pos=28
   xPSR_Z_Msk=(1UL << xPSR_Z_Pos)
   xPSR_Z_Pos=30
   _Alignof(x)=alignof(x)
   _ANSIDECL_H_=
   _ANSI_STDARG_H_=
   _ANSI_STDDEF_H=
   _ATEXIT_DYNAMIC_ALLOC=1
   _ATEXIT_INIT={_NULL, 0, {_NULL}, {{_NULL}, {_NULL}, 0, 0}}
   _ATEXIT_SIZE=32
   _ATFILE_SOURCE=1
   _ATTRIBUTE(attrs)=__attribute__ (attrs)
   _BEGIN_STD_C=extern "C" {
   _BIG_ENDIAN=4321
   _BLKCNT_T_DECLARED=
   _BLKSIZE_T_DECLARED=
   _BSDTYPES_DEFINED=
   _BSD_PTRDIFF_T_=
   _BSD_SIZE_T_=
   _BSD_SIZE_T_DEFINED_=
   _BSD_WCHAR_T_=
   _BYTE_ORDER=_LITTLE_ENDIAN
   _CLOCKID_T_=unsigned long
   _CLOCKID_T_DECLARED=
   _CLOCKS_PER_SEC_=100
   _CLOCK_T_=unsigned long
   _CLOCK_T_DECLARED=
   _CONCEPT_CHECK_H=1
   _CPP_TYPE_TRAITS_H=1
   _CXXABI_INIT_EXCEPTION_H=1
   _DEFAULT_SOURCE=1
   _DEV_T_DECLARED=
   _ELIDABLE_INLINE=static __inline__
   _END_STD_C=}
   _EXCEPTION_DEFINES_H=1
   _EXCEPTION_PTR_H=
   _EXT_TYPE_TRAITS=1
   _flockfile(fp)=(((fp)->_flags & __SSTR) ? 0 : __lock_acquire_recursive((fp)->_lock))
   _FSBLKCNT_T_DECLARED=
   _FSEEK_OPTIMIZATION=1
   _FSTDIO=
   _funlockfile(fp)=(((fp)->_flags & __SSTR) ? 0 : __lock_release_recursive((fp)->_lock))
   _FVWRITE_IN_STREAMIO=1
   _GCC_MAX_ALIGN_T=
   _GCC_PTRDIFF_T=
   _GCC_SIZE_T=
   _GCC_WCHAR_T=
   _GCC_WRAP_STDINT_H=
   _GID_T_DECLARED=
   _GLIBCXX11_USE_C99_MATH=1
   _GLIBCXX11_USE_C99_STDIO=1
   _GLIBCXX11_USE_C99_STDLIB=1
   _GLIBCXX11_USE_C99_WCHAR=1
   _GLIBCXX14_CONSTEXPR=constexpr
   _GLIBCXX17_CONSTEXPR=
   _GLIBCXX17_DEPRECATED=
   _GLIBCXX17_INLINE=
   _GLIBCXX98_USE_C99_MATH=1
   _GLIBCXX98_USE_C99_STDIO=1
   _GLIBCXX98_USE_C99_STDLIB=1
   _GLIBCXX98_USE_C99_WCHAR=1
   _GLIBCXX_ABI_TAG_CXX11=__attribute ((__abi_tag__ ("cxx11")))
   _GLIBCXX_ATOMIC_BUILTINS=1
   _GLIBCXX_BEGIN_EXTERN_C=extern "C" {
   _GLIBCXX_BEGIN_NAMESPACE_ALGO=
   _GLIBCXX_BEGIN_NAMESPACE_CONTAINER=
   _GLIBCXX_BEGIN_NAMESPACE_CXX11=namespace __cxx11 {
   _GLIBCXX_BEGIN_NAMESPACE_LDBL=
   _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11=_GLIBCXX_BEGIN_NAMESPACE_CXX11
   _GLIBCXX_BEGIN_NAMESPACE_VERSION=
   _GLIBCXX_BITS_STD_ABS_H=
   _GLIBCXX_CDTOR_CALLABI=
   _GLIBCXX_CMATH=1
   _GLIBCXX_CONST=__attribute__ ((__const__))
   _GLIBCXX_CONSTEXPR=constexpr
   _GLIBCXX_CPU_DEFINES=1
   _GLIBCXX_CSIGNAL=1
   _GLIBCXX_CTIME=1
   _GLIBCXX_CXX_CONFIG_H=1
   _GLIBCXX_DEFAULT_ABI_TAG=_GLIBCXX_ABI_TAG_CXX11
   _GLIBCXX_DEPRECATED=__attribute__ ((__deprecated__))
   _GLIBCXX_END_EXTERN_C=}
   _GLIBCXX_END_NAMESPACE_ALGO=
   _GLIBCXX_END_NAMESPACE_CONTAINER=
   _GLIBCXX_END_NAMESPACE_CXX11=}
   _GLIBCXX_END_NAMESPACE_LDBL=
   _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11=_GLIBCXX_END_NAMESPACE_CXX11
   _GLIBCXX_END_NAMESPACE_VERSION=
   _GLIBCXX_EXTERN_TEMPLATE=1
   _GLIBCXX_FAST_MATH=0
   _GLIBCXX_FORWARD(_Tp,__val)=std::forward<_Tp>(__val)
   _GLIBCXX_FULLY_DYNAMIC_STRING=0
   _GLIBCXX_HAS_NESTED_TYPE(_NTYPE)=template<typename _Tp, typename = __void_t<>> struct __has_##_NTYPE : false_type { }; template<typename _Tp> struct __has_##_NTYPE<_Tp, __void_t<typename _Tp::_NTYPE>> : true_type { };
   _GLIBCXX_HAVE_ACOSF=1
   _GLIBCXX_HAVE_ASINF=1
   _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE=1
   _GLIBCXX_HAVE_ATAN2F=1
   _GLIBCXX_HAVE_ATANF=1
   _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY=1
   _GLIBCXX_HAVE_CDTOR_CALLABI=0
   _GLIBCXX_HAVE_CEILF=1
   _GLIBCXX_HAVE_COMPLEX_H=1
   _GLIBCXX_HAVE_COSF=1
   _GLIBCXX_HAVE_COSHF=1
   _GLIBCXX_HAVE_EBADMSG=1
   _GLIBCXX_HAVE_ECANCELED=1
   _GLIBCXX_HAVE_ECHILD=1
   _GLIBCXX_HAVE_EIDRM=1
   _GLIBCXX_HAVE_ENODATA=1
   _GLIBCXX_HAVE_ENOLINK=1
   _GLIBCXX_HAVE_ENOSPC=1
   _GLIBCXX_HAVE_ENOSR=1
   _GLIBCXX_HAVE_ENOSTR=1
   _GLIBCXX_HAVE_ENOTRECOVERABLE=1
   _GLIBCXX_HAVE_ENOTSUP=1
   _GLIBCXX_HAVE_EOVERFLOW=1
   _GLIBCXX_HAVE_EOWNERDEAD=1
   _GLIBCXX_HAVE_EPERM=1
   _GLIBCXX_HAVE_EPROTO=1
   _GLIBCXX_HAVE_ETIME=1
   _GLIBCXX_HAVE_ETIMEDOUT=1
   _GLIBCXX_HAVE_ETXTBSY=1
   _GLIBCXX_HAVE_EWOULDBLOCK=1
   _GLIBCXX_HAVE_EXPF=1
   _GLIBCXX_HAVE_FABSF=1
   _GLIBCXX_HAVE_FCNTL_H=1
   _GLIBCXX_HAVE_FLOAT_H=1
   _GLIBCXX_HAVE_FLOORF=1
   _GLIBCXX_HAVE_FMODF=1
   _GLIBCXX_HAVE_FREXPF=1
   _GLIBCXX_HAVE_GETIPINFO=1
   _GLIBCXX_HAVE_GETS=1
   _GLIBCXX_HAVE_HYPOT=1
   _GLIBCXX_HAVE_ICONV=1
   _GLIBCXX_HAVE_IEEEFP_H=1
   _GLIBCXX_HAVE_INT64_T=1
   _GLIBCXX_HAVE_INT64_T_LONG_LONG=1
   _GLIBCXX_HAVE_INTTYPES_H=1
   _GLIBCXX_HAVE_ISWBLANK=1
   _GLIBCXX_HAVE_LC_MESSAGES=1
   _GLIBCXX_HAVE_LDEXPF=1
   _GLIBCXX_HAVE_LIMIT_AS=0
   _GLIBCXX_HAVE_LIMIT_DATA=0
   _GLIBCXX_HAVE_LIMIT_FSIZE=0
   _GLIBCXX_HAVE_LIMIT_RSS=0
   _GLIBCXX_HAVE_LIMIT_VMEM=0
   _GLIBCXX_HAVE_LOCALE_H=1
   _GLIBCXX_HAVE_LOG10F=1
   _GLIBCXX_HAVE_LOGF=1
   _GLIBCXX_HAVE_MACHINE_ENDIAN_H=1
   _GLIBCXX_HAVE_MACHINE_PARAM_H=1
   _GLIBCXX_HAVE_MBSTATE_T=1
   _GLIBCXX_HAVE_MEMALIGN=1
   _GLIBCXX_HAVE_MEMORY_H=1
   _GLIBCXX_HAVE_MODFF=1
   _GLIBCXX_HAVE_POWF=1
   _GLIBCXX_HAVE_SINF=1
   _GLIBCXX_HAVE_SINHF=1
   _GLIBCXX_HAVE_SLEEP=1
   _GLIBCXX_HAVE_SQRTF=1
   _GLIBCXX_HAVE_STDALIGN_H=1
   _GLIBCXX_HAVE_STDBOOL_H=1
   _GLIBCXX_HAVE_STDINT_H=1
   _GLIBCXX_HAVE_STDLIB_H=1
   _GLIBCXX_HAVE_STRERROR_R=1
   _GLIBCXX_HAVE_STRINGS_H=1
   _GLIBCXX_HAVE_STRING_H=1
   _GLIBCXX_HAVE_STRTOF=1
   _GLIBCXX_HAVE_SYS_PARAM_H=1
   _GLIBCXX_HAVE_SYS_RESOURCE_H=1
   _GLIBCXX_HAVE_SYS_STAT_H=1
   _GLIBCXX_HAVE_SYS_TIME_H=1
   _GLIBCXX_HAVE_SYS_TYPES_H=1
   _GLIBCXX_HAVE_S_ISREG=1
   _GLIBCXX_HAVE_TANF=1
   _GLIBCXX_HAVE_TANHF=1
   _GLIBCXX_HAVE_TGMATH_H=1
   _GLIBCXX_HAVE_UNISTD_H=1
   _GLIBCXX_HAVE_USLEEP=1
   _GLIBCXX_HAVE_UTIME_H=1
   _GLIBCXX_HAVE_VFWSCANF=1
   _GLIBCXX_HAVE_VSWSCANF=1
   _GLIBCXX_HAVE_VWSCANF=1
   _GLIBCXX_HAVE_WCHAR_H=1
   _GLIBCXX_HAVE_WCSTOF=1
   _GLIBCXX_HAVE_WCTYPE_H=1
   _GLIBCXX_HOSTED=1
   _GLIBCXX_INCLUDE_NEXT_C_HEADERS=
   _GLIBCXX_INLINE_VERSION=0
   _GLIBCXX_MANGLE_SIZE_T=j
   _GLIBCXX_MATH_H=1
   _GLIBCXX_MOVE(__val)=std::move(__val)
   _GLIBCXX_NAMESPACE_CXX11=__cxx11::
   _GLIBCXX_NAMESPACE_LDBL=
   _GLIBCXX_NAMESPACE_LDBL_OR_CXX11=_GLIBCXX_NAMESPACE_CXX11
   _GLIBCXX_NESTED_EXCEPTION_H=1
   _GLIBCXX_NOEXCEPT=noexcept
   _GLIBCXX_NOEXCEPT_IF(_COND)=noexcept(_COND)
   _GLIBCXX_NOEXCEPT_PARM=
   _GLIBCXX_NOEXCEPT_QUAL=
   _GLIBCXX_NORETURN=__attribute__ ((__noreturn__))
   _GLIBCXX_NOTHROW=_GLIBCXX_USE_NOEXCEPT
   _GLIBCXX_OS_DEFINES=1
   _GLIBCXX_PACKAGE_BUGREPORT=""
   _GLIBCXX_PACKAGE_NAME="package-unused"
   _GLIBCXX_PACKAGE_STRING="package-unused version-unused"
   _GLIBCXX_PACKAGE_TARNAME="libstdc++"
   _GLIBCXX_PACKAGE_URL=""
   _GLIBCXX_PACKAGE__GLIBCXX_VERSION="version-unused"
   _GLIBCXX_PSEUDO_VISIBILITY(V)=
   _GLIBCXX_PTRDIFF_T_IS_INT=1
   _GLIBCXX_PURE=__attribute__ ((__pure__))
   _GLIBCXX_RELEASE=8
   _GLIBCXX_SIZE_T_IS_UINT=1
   _GLIBCXX_STDIO_EOF=-1
   _GLIBCXX_STDIO_SEEK_CUR=1
   _GLIBCXX_STDIO_SEEK_END=2
   _GLIBCXX_STD_A=std
   _GLIBCXX_STD_C=std
   _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A)=
   _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A)=
   _GLIBCXX_THROW(_EXC)=
   _GLIBCXX_THROW_OR_ABORT(_EXC)=(__builtin_abort())
   _GLIBCXX_TXN_SAFE=
   _GLIBCXX_TXN_SAFE_DYN=
   _GLIBCXX_TYPE_TRAITS=1
   _GLIBCXX_USE_ALLOCATOR_NEW=1
   _GLIBCXX_USE_C99_COMPLEX=_GLIBCXX11_USE_C99_COMPLEX
   _GLIBCXX_USE_C99_CTYPE_TR1=1
   _GLIBCXX_USE_C99_INTTYPES_TR1=1
   _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1=1
   _GLIBCXX_USE_C99_MATH=_GLIBCXX11_USE_C99_MATH
   _GLIBCXX_USE_C99_MATH_TR1=1
   _GLIBCXX_USE_C99_STDINT_TR1=1
   _GLIBCXX_USE_C99_STDIO=_GLIBCXX11_USE_C99_STDIO
   _GLIBCXX_USE_C99_STDLIB=_GLIBCXX11_USE_C99_STDLIB
   _GLIBCXX_USE_C99_WCHAR=_GLIBCXX11_USE_C99_WCHAR
   _GLIBCXX_USE_CONSTEXPR=constexpr
   _GLIBCXX_USE_CXX11_ABI=1
   _GLIBCXX_USE_DEPRECATED=1
   _GLIBCXX_USE_DUAL_ABI=1
   _GLIBCXX_USE_FCHMOD=1
   _GLIBCXX_USE_FCHMODAT=1
   _GLIBCXX_USE_GETTIMEOFDAY=1
   _GLIBCXX_USE_LONG_LONG=1
   _GLIBCXX_USE_NOEXCEPT=noexcept
   _GLIBCXX_USE_SC_NPROCESSORS_ONLN=1
   _GLIBCXX_USE_TMPNAM=1
   _GLIBCXX_USE_WCHAR_T=1
   _GLIBCXX_USE_WEAK_REF=__GXX_WEAK__
   _GLIBCXX_VERBOSE=1
   _GLIBCXX_VISIBILITY(V)=__attribute__ ((__visibility__ (#V)))
   _GLIBCXX_WEAK_DEFINITION=
   _GLOBAL_ATEXIT=(_GLOBAL_REENT->_atexit)
   _GLOBAL_REENT=_global_impure_ptr
   _GTHREAD_USE_MUTEX_TIMEDLOCK=1
   _GXX_NULLPTR_T=
   _HASH_BYTES_H=1
   _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL=1
   _HAVE_LONG_DOUBLE=1
   _howmany(x,y)=(((x)+((y)-1))/(y))
   _ID_T_DECLARED=
   _IEEE_=__fdlibm_ieee
   _INO_T_DECLARED=
   _INT16_T_DECLARED=
   _INT32_EQ_LONG=
   _INT32_T_DECLARED=
   _INT64_T_DECLARED=
   _INT8_T_DECLARED=
   _INTMAX_T_DECLARED=
   _INTPTR_EQ_INT=
   _INTPTR_T_DECLARED=
   _IN_ADDR_T_DECLARED=
   _IN_PORT_T_DECLARED=
   _IOFBF=0
   _IOLBF=1
   _IONBF=2
   _KEY_T_DECLARED=
   _Kmax=(sizeof (size_t) << 3)
   _LDBL_EQ_DBL=1
   _LIB_VERSION=__fdlib_version
   _LIB_VERSION_TYPE=enum __fdlibm_version
   _LITTLE_ENDIAN=1234
   _LOCK_RECURSIVE_T=_LOCK_T
   _LONG_DOUBLE=long double
   _MACHINE__DEFAULT_TYPES_H=
   _MACHINE__TYPES_H=
   _MACHSTDLIB_H_=
   _MACHTIME_H_=
   _MATH_H_=
   _MB_LEN_MAX=1
   _MODE_T_DECLARED=
   _MOVE_H=1
   _M_LN2=0.693147180559945309417
   _NEW=
   _NEWLIB_ALLOCA_H=
   _NEWLIB_STDIO_H=
   _NEWLIB_VERSION="3.0.0"
   _NEWLIB_VERSION_H__=1
   _NLINK_T_DECLARED=
   _NOINLINE=__attribute__ ((__noinline__))
   _NOINLINE_STATIC=_NOINLINE static
   _Nonnull=
   _Noreturn=[[noreturn]]
   _NOTHROW=__attribute__ ((__nothrow__))
   _NULL=0
   _Nullable=
   _Null_unspecified=
   _N_LISTS=30
   _OFF_T_DECLARED=
   _PDP_ENDIAN=3412
   _PID_T_DECLARED=
   _POINTER_INT=long
   _POSIX_=__fdlibm_posix
   _POSIX_C_SOURCE=200809L
   _POSIX_SOURCE=1
   _PTHREAD_COND_INITIALIZER=((pthread_cond_t) 0xFFFFFFFF)
   _PTHREAD_MUTEX_INITIALIZER=((pthread_mutex_t) 0xFFFFFFFF)
   _PTHREAD_ONCE_INIT={ 1, 0 }
   _PTRDIFF_T=
   _PTRDIFF_T_=
   _PTRDIFF_T_DECLARED=
   _QUAD_HIGHWORD=1
   _QUAD_LOWWORD=0
   _RAND48_ADD=(0x000b)
   _RAND48_MULT_0=(0xe66d)
   _RAND48_MULT_1=(0xdeec)
   _RAND48_MULT_2=(0x0005)
   _RAND48_SEED_0=(0x330e)
   _RAND48_SEED_1=(0xabcd)
   _RAND48_SEED_2=(0x1234)
   _READ_WRITE_BUFSIZE_TYPE=int
   _READ_WRITE_RETURN_TYPE=int
   _REENT=_impure_ptr
   _REENT_ASCTIME_BUF(ptr)=((ptr)->_new._reent._asctime_buf)
   _REENT_ASCTIME_SIZE=26
   _REENT_CHECK_ASCTIME_BUF(ptr)=
   _REENT_CHECK_EMERGENCY(ptr)=
   _REENT_CHECK_MISC(ptr)=
   _REENT_CHECK_MP(ptr)=
   _REENT_CHECK_RAND48(ptr)=
   _REENT_CHECK_SIGNAL_BUF(ptr)=
   _REENT_CHECK_TM(ptr)=
   _REENT_EMERGENCY(ptr)=((ptr)->_emergency)
   _REENT_EMERGENCY_SIZE=25
   _REENT_GETDATE_ERR_P(ptr)=(&((ptr)->_new._reent._getdate_err))
   _REENT_INIT(var)={ 0, _REENT_STDIO_STREAM(&(var), 0), _REENT_STDIO_STREAM(&(var), 1), _REENT_STDIO_STREAM(&(var), 2), 0, "", 0, _NULL, 0, _NULL, _NULL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, "", {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0, _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {0, {0}}, {0, {0}}, {0, {0}}, "", "", 0, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REENT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }
   _REENT_INIT_ATEXIT=_NULL, _ATEXIT_INIT,
   _REENT_INIT_PTR(var)={ memset((var), 0, sizeof(*(var))); _REENT_INIT_PTR_ZEROED(var); }
   _REENT_INIT_PTR_ZEROED(var)={ (var)->_stdin = _REENT_STDIO_STREAM(var, 0); (var)->_stdout = _REENT_STDIO_STREAM(var, 1); (var)->_stderr = _REENT_STDIO_STREAM(var, 2); (var)->_new._reent._rand_next = 1; (var)->_new._reent._r48._seed[0] = _RAND48_SEED_0; (var)->_new._reent._r48._seed[1] = _RAND48_SEED_1; (var)->_new._reent._r48._seed[2] = _RAND48_SEED_2; (var)->_new._reent._r48._mult[0] = _RAND48_MULT_0; (var)->_new._reent._r48._mult[1] = _RAND48_MULT_1; (var)->_new._reent._r48._mult[2] = _RAND48_MULT_2; (var)->_new._reent._r48._add = _RAND48_ADD; }
   _REENT_L64A_BUF(ptr)=((ptr)->_new._reent._l64a_buf)
   _REENT_MBLEN_STATE(ptr)=((ptr)->_new._reent._mblen_state)
   _REENT_MBRLEN_STATE(ptr)=((ptr)->_new._reent._mbrlen_state)
   _REENT_MBRTOWC_STATE(ptr)=((ptr)->_new._reent._mbrtowc_state)
   _REENT_MBSRTOWCS_STATE(ptr)=((ptr)->_new._reent._mbsrtowcs_state)
   _REENT_MBTOWC_STATE(ptr)=((ptr)->_new._reent._mbtowc_state)
   _REENT_MP_FREELIST(ptr)=((ptr)->_freelist)
   _REENT_MP_P5S(ptr)=((ptr)->_p5s)
   _REENT_MP_RESULT(ptr)=((ptr)->_result)
   _REENT_MP_RESULT_K(ptr)=((ptr)->_result_k)
   _REENT_RAND48_ADD(ptr)=((ptr)->_new._reent._r48._add)
   _REENT_RAND48_MULT(ptr)=((ptr)->_new._reent._r48._mult)
   _REENT_RAND48_SEED(ptr)=((ptr)->_new._reent._r48._seed)
   _REENT_RAND_NEXT(ptr)=((ptr)->_new._reent._rand_next)
   _REENT_SIGNAL_BUF(ptr)=((ptr)->_new._reent._signal_buf)
   _REENT_SIGNAL_SIZE=24
   _REENT_SIGNGAM(ptr)=((ptr)->_new._reent._gamma_signgam)
   _REENT_SMALL_CHECK_INIT(ptr)=
   _REENT_STDIO_STREAM(var,index)=&(var)->__sf[index]
   _REENT_STRTOK_LAST(ptr)=((ptr)->_new._reent._strtok_last)
   _REENT_TM(ptr)=(&(ptr)->_new._reent._localtime_buf)
   _REENT_WCRTOMB_STATE(ptr)=((ptr)->_new._reent._wcrtomb_state)
   _REENT_WCSRTOMBS_STATE(ptr)=((ptr)->_new._reent._wcsrtombs_state)
   _REENT_WCTOMB_STATE(ptr)=((ptr)->_new._reent._wctomb_state)
   _RETARGETABLE_LOCKING=1
   _SIGNAL_H_=
   _SIGSET_T_DECLARED=
   _SIZET_=
   _SIZE_T=
   _SIZE_T_=
   _SIZE_T_DECLARED=
   _SIZE_T_DEFINED=
   _SIZE_T_DEFINED_=
   _SSIZE_T_DECLARED=
   _Static_assert(x,y)=static_assert(x, y)
   _STDARG_H=
   _STDDEF_H=
   _STDDEF_H_=
   _stderr_r(x)=((x)->_stderr)
   _STDINT_H=
   _stdin_r(x)=((x)->_stdin)
   _STDIO_H_=
   _STDLIB_H_=
   _stdout_r(x)=((x)->_stdout)
   _STRINGS_H_=
   _STRING_H_=
   _SUSECONDS_T_DECLARED=
   _SVID_=__fdlibm_svid
   _SYS_CDEFS_H_=
   _SYS_FEATURES_H=
   _SYS_REENT_H_=
   _SYS_SCHED_H_=
   _SYS_SELECT_H=
   _SYS_SIGNAL_H=
   _SYS_SIZE_T_H=
   _SYS_TIMESPEC_H_=
   _SYS_TYPES_FD_SET=
   _SYS_TYPES_H=
   _SYS__INTSUP_H=
   _SYS__PTHREADTYPES_H_=
   _SYS__SIGSET_H_=
   _SYS__STDINT_H=
   _SYS__TIMESPEC_H_=
   _SYS__TIMEVAL_H_=
   _SYS__TYPES_H=
   _Thread_local=thread_local
   _TIMER_T_=unsigned long
   _TIMER_T_DECLARED=
   _TIMEVAL_DEFINED=
   _TIME_H_=
   _TIME_T_=__int_least64_t
   _TIME_T_DECLARED=
   _TYPEINFO=
   _T_PTRDIFF=
   _T_PTRDIFF_=
   _T_SIZE=
   _T_SIZE_=
   _T_WCHAR=
   _T_WCHAR_=
   _UID_T_DECLARED=
   _UINT16_T_DECLARED=
   _UINT32_T_DECLARED=
   _UINT64_T_DECLARED=
   _UINT8_T_DECLARED=
   _UINTMAX_T_DECLARED=
   _UINTPTR_T_DECLARED=
   _UNBUF_STREAM_OPT=1
   _USECONDS_T_DECLARED=
   _VA_LIST=
   _VA_LIST_=
   _VA_LIST_DEFINED=
   _VA_LIST_T_H=
   _WANT_IO_C99_FORMATS=1
   _WANT_IO_LONG_DOUBLE=1
   _WANT_IO_LONG_LONG=1
   _WANT_REGISTER_FINI=1
   _WCHAR_T=
   _WCHAR_T_=
   _WCHAR_T_DECLARED=
   _WCHAR_T_DEFINED=
   _WCHAR_T_DEFINED_=
   _WCHAR_T_H=
   _WIDE_ORIENT=1
   _WINT_T=
   _XLOCALE_H=
   _XOPEN_=__fdlibm_xopen
   __ADC12_CLK_DISABLE=__HAL_RCC_ADC12_CLK_DISABLE
   __ADC12_CLK_ENABLE=__HAL_RCC_ADC12_CLK_ENABLE
   __ADC12_FORCE_RESET=__HAL_RCC_ADC12_FORCE_RESET
   __ADC12_IS_CLK_DISABLED=__HAL_RCC_ADC12_IS_CLK_DISABLED
   __ADC12_IS_CLK_ENABLED=__HAL_RCC_ADC12_IS_CLK_ENABLED
   __ADC12_RELEASE_RESET=__HAL_RCC_ADC12_RELEASE_RESET
   __ADC1_CLK_DISABLE=__HAL_RCC_ADC1_CLK_DISABLE
   __ADC1_CLK_ENABLE=__HAL_RCC_ADC1_CLK_ENABLE
   __ADC1_CLK_SLEEP_DISABLE=__HAL_RCC_ADC1_CLK_SLEEP_DISABLE
   __ADC1_CLK_SLEEP_ENABLE=__HAL_RCC_ADC1_CLK_SLEEP_ENABLE
   __ADC1_FORCE_RESET=__HAL_RCC_ADC1_FORCE_RESET
   __ADC1_IS_CLK_DISABLED=__HAL_RCC_ADC1_IS_CLK_DISABLED
   __ADC1_IS_CLK_ENABLED=__HAL_RCC_ADC1_IS_CLK_ENABLED
   __ADC1_RELEASE_RESET=__HAL_RCC_ADC1_RELEASE_RESET
   __ADC2_CLK_DISABLE=__HAL_RCC_ADC2_CLK_DISABLE
   __ADC2_CLK_ENABLE=__HAL_RCC_ADC2_CLK_ENABLE
   __ADC2_CLK_SLEEP_DISABLE=__HAL_RCC_ADC2_CLK_SLEEP_DISABLE
   __ADC2_CLK_SLEEP_ENABLE=__HAL_RCC_ADC2_CLK_SLEEP_ENABLE
   __ADC2_FORCE_RESET=__HAL_RCC_ADC2_FORCE_RESET
   __ADC2_RELEASE_RESET=__HAL_RCC_ADC2_RELEASE_RESET
   __ADC34_CLK_DISABLE=__HAL_RCC_ADC34_CLK_DISABLE
   __ADC34_CLK_ENABLE=__HAL_RCC_ADC34_CLK_ENABLE
   __ADC34_FORCE_RESET=__HAL_RCC_ADC34_FORCE_RESET
   __ADC34_IS_CLK_DISABLED=__HAL_RCC_ADC34_IS_CLK_DISABLED
   __ADC34_IS_CLK_ENABLED=__HAL_RCC_ADC34_IS_CLK_ENABLED
   __ADC34_RELEASE_RESET=__HAL_RCC_ADC34_RELEASE_RESET
   __ADC3_CLK_DISABLE=__HAL_RCC_ADC3_CLK_DISABLE
   __ADC3_CLK_ENABLE=__HAL_RCC_ADC3_CLK_ENABLE
   __ADC3_CLK_SLEEP_DISABLE=__HAL_RCC_ADC3_CLK_SLEEP_DISABLE
   __ADC3_CLK_SLEEP_ENABLE=__HAL_RCC_ADC3_CLK_SLEEP_ENABLE
   __ADC3_FORCE_RESET=__HAL_RCC_ADC3_FORCE_RESET
   __ADC3_RELEASE_RESET=__HAL_RCC_ADC3_RELEASE_RESET
   __ADC_CLK_DISABLE=__HAL_RCC_ADC_CLK_DISABLE
   __ADC_CLK_ENABLE=__HAL_RCC_ADC_CLK_ENABLE
   __ADC_CLK_SLEEP_DISABLE=__HAL_RCC_ADC_CLK_SLEEP_DISABLE
   __ADC_CLK_SLEEP_ENABLE=__HAL_RCC_ADC_CLK_SLEEP_ENABLE
   __ADC_DISABLE=__HAL_ADC_DISABLE
   __ADC_ENABLE=__HAL_ADC_ENABLE
   __ADC_FORCE_RESET=__HAL_RCC_ADC_FORCE_RESET
   __ADC_IS_ENABLED=ADC_IS_ENABLE
   __ADC_MULTIMODE_IS_ENABLED=ADC_MULTIMODE_IS_ENABLE
   __ADC_RELEASE_RESET=__HAL_RCC_ADC_RELEASE_RESET
   __ADDR_1st_CYCLE=ADDR_1ST_CYCLE
   __ADDR_2nd_CYCLE=ADDR_2ND_CYCLE
   __ADDR_3rd_CYCLE=ADDR_3RD_CYCLE
   __ADDR_4th_CYCLE=ADDR_4TH_CYCLE
   __AES_CLK_DISABLE=__HAL_RCC_AES_CLK_DISABLE
   __AES_CLK_ENABLE=__HAL_RCC_AES_CLK_ENABLE
   __AES_CLK_SLEEP_DISABLE=__HAL_RCC_AES_CLK_SLEEP_DISABLE
   __AES_CLK_SLEEP_ENABLE=__HAL_RCC_AES_CLK_SLEEP_ENABLE
   __AES_FORCE_RESET=__HAL_RCC_AES_FORCE_RESET
   __AES_RELEASE_RESET=__HAL_RCC_AES_RELEASE_RESET
   __AFIO_CLK_DISABLE=__HAL_RCC_AFIO_CLK_DISABLE
   __AFIO_CLK_ENABLE=__HAL_RCC_AFIO_CLK_ENABLE
   __AFIO_FORCE_RESET=__HAL_RCC_AFIO_FORCE_RESET
   __AFIO_RELEASE_RESET=__HAL_RCC_AFIO_RELEASE_RESET
   __AHB1_FORCE_RESET=__HAL_RCC_AHB1_FORCE_RESET
   __AHB1_RELEASE_RESET=__HAL_RCC_AHB1_RELEASE_RESET
   __AHB2_FORCE_RESET=__HAL_RCC_AHB2_FORCE_RESET
   __AHB2_RELEASE_RESET=__HAL_RCC_AHB2_RELEASE_RESET
   __AHB3_FORCE_RESET=__HAL_RCC_AHB3_FORCE_RESET
   __AHB3_RELEASE_RESET=__HAL_RCC_AHB3_RELEASE_RESET
   __AHB_FORCE_RESET=__HAL_RCC_AHB_FORCE_RESET
   __AHB_RELEASE_RESET=__HAL_RCC_AHB_RELEASE_RESET
   __aligned(x)=__attribute__((__aligned__(x)))
   __ALIGN_BEGIN=
   __ALIGN_END=__attribute__ ((aligned (4)))
   __alloc_align(x)=__attribute__((__alloc_align__(x)))
   __alloc_size(x)=__attribute__((__alloc_size__(x)))
   __alloc_size2(n,x)=__attribute__((__alloc_size__(n, x)))
   __always_inline=__inline__ __attribute__((__always_inline__))
   __APB1_FORCE_RESET=__HAL_RCC_APB1_FORCE_RESET
   __APB1_RELEASE_RESET=__HAL_RCC_APB1_RELEASE_RESET
   __APB2_FORCE_RESET=__HAL_RCC_APB2_FORCE_RESET
   __APB2_RELEASE_RESET=__HAL_RCC_APB2_RELEASE_RESET
   __arg_type_tag(arg_kind,arg_idx,type_tag_idx)=
   __ARRAY_ADDRESS=ARRAY_ADDRESS
   __ASM=__asm
   __ASMNAME(cname)=__XSTRING (__USER_LABEL_PREFIX__) cname
   __asserts_exclusive(...)=__lock_annotate(assert_exclusive_lock(__VA_ARGS__))
   __asserts_shared(...)=__lock_annotate(assert_shared_lock(__VA_ARGS__))
   __ASSERT_FUNC=__PRETTY_FUNCTION__
   __ATFILE_VISIBLE=1
   __attribute_format_strfmon__(a,b)=
   __ATTRIBUTE_IMPURE_PTR__=
   __attribute_malloc__=
   __attribute_pure__=
   __BEGIN_DECLS=extern "C" {
   __BIT_TYPES_DEFINED__=1
   __BKPSRAM_CLK_DISABLE=__HAL_RCC_BKPSRAM_CLK_DISABLE
   __BKPSRAM_CLK_ENABLE=__HAL_RCC_BKPSRAM_CLK_ENABLE
   __BKPSRAM_CLK_SLEEP_DISABLE=__HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE
   __BKPSRAM_CLK_SLEEP_ENABLE=__HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE
   __BKPT(value)=__ASM volatile ("bkpt "#value)
   __BKP_CLK_DISABLE=__HAL_RCC_BKP_CLK_DISABLE
   __BKP_CLK_ENABLE=__HAL_RCC_BKP_CLK_ENABLE
   __BKP_FORCE_RESET=__HAL_RCC_BKP_FORCE_RESET
   __BKP_RELEASE_RESET=__HAL_RCC_BKP_RELEASE_RESET
   __bounded=
   __BSD_VISIBLE=1
   __bswap16(_x)=__builtin_bswap16(_x)
   __bswap32(_x)=__builtin_bswap32(_x)
   __bswap64(_x)=__builtin_bswap64(_x)
   __builtin_offsetof(T,m)=(reinterpret_cast <size_t>(&reinterpret_cast <const volatile char &>(static_cast<T*> (0)->m)))
   __builtin_types_compatible_p(x,y)=__builtin_types_compatible_p(sizeof(x),sizeof(y))
   __builtin_va_arg(ap,type)=*(typeof(type) *)ap
   __caddr_t_defined=
   __CAN1_CLK_DISABLE=__HAL_RCC_CAN1_CLK_DISABLE
   __CAN1_CLK_ENABLE=__HAL_RCC_CAN1_CLK_ENABLE
   __CAN1_CLK_SLEEP_DISABLE=__HAL_RCC_CAN1_CLK_SLEEP_DISABLE
   __CAN1_CLK_SLEEP_ENABLE=__HAL_RCC_CAN1_CLK_SLEEP_ENABLE
   __CAN1_FORCE_RESET=__HAL_RCC_CAN1_FORCE_RESET
   __CAN1_RELEASE_RESET=__HAL_RCC_CAN1_RELEASE_RESET
   __CAN2_CLK_DISABLE=__HAL_RCC_CAN2_CLK_DISABLE
   __CAN2_CLK_ENABLE=__HAL_RCC_CAN2_CLK_ENABLE
   __CAN2_CLK_SLEEP_DISABLE=__HAL_RCC_CAN2_CLK_SLEEP_DISABLE
   __CAN2_CLK_SLEEP_ENABLE=__HAL_RCC_CAN2_CLK_SLEEP_ENABLE
   __CAN2_FORCE_RESET=__HAL_RCC_CAN2_FORCE_RESET
   __CAN2_RELEASE_RESET=__HAL_RCC_CAN2_RELEASE_RESET
   __CAN_CLK_DISABLE=__HAL_RCC_CAN1_CLK_DISABLE
   __CAN_CLK_ENABLE=__HAL_RCC_CAN1_CLK_ENABLE
   __CAN_FORCE_RESET=__HAL_RCC_CAN1_FORCE_RESET
   __CAN_RELEASE_RESET=__HAL_RCC_CAN1_RELEASE_RESET
   __catch(X)=if (false)
   __CCMDATARAMEN_CLK_DISABLE=__HAL_RCC_CCMDATARAMEN_CLK_DISABLE
   __CCMDATARAMEN_CLK_ENABLE=__HAL_RCC_CCMDATARAMEN_CLK_ENABLE
   __CC_SUPPORTS_DYNAMIC_ARRAY_INIT=1
   __CC_SUPPORTS_INLINE=1
   __CC_SUPPORTS_VARADIC_XXX=1
   __CC_SUPPORTS_WARNING=1
   __CC_SUPPORTS___FUNC__=1
   __CC_SUPPORTS___INLINE=1
   __CC_SUPPORTS___INLINE__=1
   __CDT_PARSER__=90800
   __CEC_CLK_DISABLE=__HAL_RCC_CEC_CLK_DISABLE
   __CEC_CLK_ENABLE=__HAL_RCC_CEC_CLK_ENABLE
   __CEC_FORCE_RESET=__HAL_RCC_CEC_FORCE_RESET
   __CEC_IS_CLK_DISABLED=__HAL_RCC_CEC_IS_CLK_DISABLED
   __CEC_IS_CLK_ENABLED=__HAL_RCC_CEC_IS_CLK_ENABLED
   __CEC_RELEASE_RESET=__HAL_RCC_CEC_RELEASE_RESET
   __clockid_t_defined=
   __clock_t_defined=
   __CM4_CMSIS_VERSION=((__CM4_CMSIS_VERSION_MAIN << 16) | __CM4_CMSIS_VERSION_SUB )
   __CM4_CMSIS_VERSION_MAIN=(0x04)
   __CM4_CMSIS_VERSION_SUB=(0x00)
   __CM4_REV=0x0001
   __CMSIS_GCC_OUT_REG(r)="=r" (r)
   __CMSIS_GCC_USE_REG(r)="r" (r)
   __compar_fn_t_defined=
   __compiler_membar()=__asm __volatile(" " : : : "memory")
   __complex__=_Complex
   __COMP_CLK_DISABLE=__HAL_RCC_COMP_CLK_DISABLE
   __COMP_CLK_ENABLE=__HAL_RCC_COMP_CLK_ENABLE
   __COMP_CLK_SLEEP_DISABLE=__HAL_RCC_COMP_CLK_SLEEP_DISABLE
   __COMP_CLK_SLEEP_ENABLE=__HAL_RCC_COMP_CLK_SLEEP_ENABLE
   __COMP_FORCE_RESET=__HAL_RCC_COMP_FORCE_RESET
   __COMP_RELEASE_RESET=__HAL_RCC_COMP_RELEASE_RESET
   __CONCAT(x,y)=__CONCAT1(x,y)
   __CONCAT1(x,y)=x ## y
   __const=const
   __containerof(x,s,m)=({ const volatile __typeof(((s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
   __COPYRIGHT(s)=struct __hack
   __CORE_CM4_H_DEPENDANT=
   __CORE_CM4_H_GENERIC=
   __CORE_CMFUNC_H=
   __CORE_CMINSTR_H=
   __CORE_CMSIMD_H=
   __CORTEX_M=(0x04)
   __COUNTER__=0
   __cpp_lib_integral_constant_callable=201304
   __cpp_lib_is_final=201402L
   __cpp_lib_is_null_pointer=201309
   __cpp_lib_is_swappable=201603
   __cpp_lib_result_of_sfinae=201210
   __cpp_lib_transformation_trait_aliases=201304
   __cpp_lib_uncaught_exceptions=201411
   __cpp_lib_void_t=201411
   __CRC_CLK_DISABLE=__HAL_RCC_CRC_CLK_DISABLE
   __CRC_CLK_ENABLE=__HAL_RCC_CRC_CLK_ENABLE
   __CRC_CLK_SLEEP_DISABLE=__HAL_RCC_CRC_CLK_SLEEP_DISABLE
   __CRC_CLK_SLEEP_ENABLE=__HAL_RCC_CRC_CLK_SLEEP_ENABLE
   __CRC_FORCE_RESET=__HAL_RCC_CRC_FORCE_RESET
   __CRC_IS_CLK_DISABLED=__HAL_RCC_CRC_IS_CLK_DISABLED
   __CRC_IS_CLK_ENABLED=__HAL_RCC_CRC_IS_CLK_ENABLED
   __CRC_RELEASE_RESET=__HAL_RCC_CRC_RELEASE_RESET
   __CRS_CLK_DISABLE=__HAL_RCC_CRS_CLK_DISABLE
   __CRS_CLK_ENABLE=__HAL_RCC_CRS_CLK_ENABLE
   __CRS_CLK_SLEEP_DISABLE=__HAL_RCC_CRS_CLK_SLEEP_DISABLE
   __CRS_CLK_SLEEP_ENABLE=__HAL_RCC_CRS_CLK_SLEEP_ENABLE
   __CRS_FORCE_RESET=__HAL_RCC_CRS_FORCE_RESET
   __CRS_RELEASE_RESET=__HAL_RCC_CRS_RELEASE_RESET
   __CRYP_CLK_DISABLE=__HAL_RCC_CRYP_CLK_DISABLE
   __CRYP_CLK_ENABLE=__HAL_RCC_CRYP_CLK_ENABLE
   __CRYP_CLK_SLEEP_DISABLE=__HAL_RCC_CRYP_CLK_SLEEP_DISABLE
   __CRYP_CLK_SLEEP_ENABLE=__HAL_RCC_CRYP_CLK_SLEEP_ENABLE
   __CRYP_FORCE_RESET=__HAL_RCC_CRYP_FORCE_RESET
   __CRYP_RELEASE_RESET=__HAL_RCC_CRYP_RELEASE_RESET
   __DAC1_CLK_DISABLE=__HAL_RCC_DAC1_CLK_DISABLE
   __DAC1_CLK_ENABLE=__HAL_RCC_DAC1_CLK_ENABLE
   __DAC1_CLK_SLEEP_DISABLE=__HAL_RCC_DAC1_CLK_SLEEP_DISABLE
   __DAC1_CLK_SLEEP_ENABLE=__HAL_RCC_DAC1_CLK_SLEEP_ENABLE
   __DAC1_FORCE_RESET=__HAL_RCC_DAC1_FORCE_RESET
   __DAC1_IS_CLK_DISABLED=__HAL_RCC_DAC1_IS_CLK_DISABLED
   __DAC1_IS_CLK_ENABLED=__HAL_RCC_DAC1_IS_CLK_ENABLED
   __DAC1_RELEASE_RESET=__HAL_RCC_DAC1_RELEASE_RESET
   __DAC2_CLK_DISABLE=__HAL_RCC_DAC2_CLK_DISABLE
   __DAC2_CLK_ENABLE=__HAL_RCC_DAC2_CLK_ENABLE
   __DAC2_FORCE_RESET=__HAL_RCC_DAC2_FORCE_RESET
   __DAC2_IS_CLK_DISABLED=__HAL_RCC_DAC2_IS_CLK_DISABLED
   __DAC2_IS_CLK_ENABLED=__HAL_RCC_DAC2_IS_CLK_ENABLED
   __DAC2_RELEASE_RESET=__HAL_RCC_DAC2_RELEASE_RESET
   __DAC_CLK_DISABLE=__HAL_RCC_DAC_CLK_DISABLE
   __DAC_CLK_ENABLE=__HAL_RCC_DAC_CLK_ENABLE
   __DAC_CLK_SLEEP_DISABLE=__HAL_RCC_DAC_CLK_SLEEP_DISABLE
   __DAC_CLK_SLEEP_ENABLE=__HAL_RCC_DAC_CLK_SLEEP_ENABLE
   __DAC_FORCE_RESET=__HAL_RCC_DAC_FORCE_RESET
   __DAC_RELEASE_RESET=__HAL_RCC_DAC_RELEASE_RESET
   __daddr_t_defined=
   __datatype_type_tag(kind,type)=
   __DATE__="Jul 23 2019"
   __DBGMCU_CLK_DISABLE=__HAL_RCC_DBGMCU_CLK_DISABLE
   __DBGMCU_CLK_ENABLE=__HAL_RCC_DBGMCU_CLK_ENABLE
   __DBGMCU_FORCE_RESET=__HAL_RCC_DBGMCU_FORCE_RESET
   __DBGMCU_RELEASE_RESET=__HAL_RCC_DBGMCU_RELEASE_RESET
   __DCMI_CLK_DISABLE=__HAL_RCC_DCMI_CLK_DISABLE
   __DCMI_CLK_ENABLE=__HAL_RCC_DCMI_CLK_ENABLE
   __DCMI_CLK_SLEEP_DISABLE=__HAL_RCC_DCMI_CLK_SLEEP_DISABLE
   __DCMI_CLK_SLEEP_ENABLE=__HAL_RCC_DCMI_CLK_SLEEP_ENABLE
   __DCMI_FORCE_RESET=__HAL_RCC_DCMI_FORCE_RESET
   __DCMI_RELEASE_RESET=__HAL_RCC_DCMI_RELEASE_RESET
   __dead2=__attribute__((__noreturn__))
   __DECONST(type,var)=((type)(__uintptr_t)(const void *)(var))
   __DEQUALIFY(type,var)=((type)(__uintptr_t)(const volatile void *)(var))
   __DEVOLATILE(type,var)=((type)(__uintptr_t)(volatile void *)(var))
   __DFSDM_CLK_DISABLE=__HAL_RCC_DFSDM_CLK_DISABLE
   __DFSDM_CLK_ENABLE=__HAL_RCC_DFSDM_CLK_ENABLE
   __DFSDM_CLK_SLEEP_DISABLE=__HAL_RCC_DFSDM_CLK_SLEEP_DISABLE
   __DFSDM_CLK_SLEEP_ENABLE=__HAL_RCC_DFSDM_CLK_SLEEP_ENABLE
   __DFSDM_FORCE_RESET=__HAL_RCC_DFSDM_FORCE_RESET
   __DFSDM_RELEASE_RESET=__HAL_RCC_DFSDM_RELEASE_RESET
   __DIVFRAQ_SAMPLING16=UART_DIVFRAQ_SAMPLING16
   __DIVFRAQ_SAMPLING8=UART_DIVFRAQ_SAMPLING8
   __DIVMANT_SAMPLING16=UART_DIVMANT_SAMPLING16
   __DIVMANT_SAMPLING8=UART_DIVMANT_SAMPLING8
   __DIV_SAMPLING16=UART_DIV_SAMPLING16
   __DIV_SAMPLING8=UART_DIV_SAMPLING8
   __DMA1_CLK_DISABLE=__HAL_RCC_DMA1_CLK_DISABLE
   __DMA1_CLK_ENABLE=__HAL_RCC_DMA1_CLK_ENABLE
   __DMA1_CLK_SLEEP_DISABLE=__HAL_RCC_DMA1_CLK_SLEEP_DISABLE
   __DMA1_CLK_SLEEP_ENABLE=__HAL_RCC_DMA1_CLK_SLEEP_ENABLE
   __DMA1_FORCE_RESET=__HAL_RCC_DMA1_FORCE_RESET
   __DMA1_IS_CLK_DISABLED=__HAL_RCC_DMA1_IS_CLK_DISABLED
   __DMA1_IS_CLK_ENABLED=__HAL_RCC_DMA1_IS_CLK_ENABLED
   __DMA1_RELEASE_RESET=__HAL_RCC_DMA1_RELEASE_RESET
   __DMA2D_CLK_DISABLE=__HAL_RCC_DMA2D_CLK_DISABLE
   __DMA2D_CLK_ENABLE=__HAL_RCC_DMA2D_CLK_ENABLE
   __DMA2D_CLK_SLEEP_DISABLE=__HAL_RCC_DMA2D_CLK_SLEEP_DISABLE
   __DMA2D_CLK_SLEEP_ENABLE=__HAL_RCC_DMA2D_CLK_SLEEP_ENABLE
   __DMA2D_FORCE_RESET=__HAL_RCC_DMA2D_FORCE_RESET
   __DMA2D_RELEASE_RESET=__HAL_RCC_DMA2D_RELEASE_RESET
   __DMA2_CLK_DISABLE=__HAL_RCC_DMA2_CLK_DISABLE
   __DMA2_CLK_ENABLE=__HAL_RCC_DMA2_CLK_ENABLE
   __DMA2_CLK_SLEEP_DISABLE=__HAL_RCC_DMA2_CLK_SLEEP_DISABLE
   __DMA2_CLK_SLEEP_ENABLE=__HAL_RCC_DMA2_CLK_SLEEP_ENABLE
   __DMA2_FORCE_RESET=__HAL_RCC_DMA2_FORCE_RESET
   __DMA2_IS_CLK_DISABLED=__HAL_RCC_DMA2_IS_CLK_DISABLED
   __DMA2_IS_CLK_ENABLED=__HAL_RCC_DMA2_IS_CLK_ENABLED
   __DMA2_RELEASE_RESET=__HAL_RCC_DMA2_RELEASE_RESET
   __DMAx_CLK_DISABLE=__HAL_RCC_DMA2_CLK_DISABLE
   __DMAx_CLK_ENABLE=__HAL_RCC_DMA2_CLK_ENABLE
   __DOTS=, ...
   __END_DECLS=}
   __ETHMACPTP_CLK_DISABLE=__HAL_RCC_ETHMACPTP_CLK_DISABLE
   __ETHMACPTP_CLK_ENABLE=__HAL_RCC_ETHMACPTP_CLK_ENABLE
   __ETHMACPTP_CLK_SLEEP_DISABLE=__HAL_RCC_ETHMACPTP_CLK_SLEEP_DISABLE
   __ETHMACPTP_CLK_SLEEP_ENABLE=__HAL_RCC_ETHMACPTP_CLK_SLEEP_ENABLE
   __ETHMACRX_CLK_DISABLE=__HAL_RCC_ETHMACRX_CLK_DISABLE
   __ETHMACRX_CLK_ENABLE=__HAL_RCC_ETHMACRX_CLK_ENABLE
   __ETHMACRX_CLK_SLEEP_DISABLE=__HAL_RCC_ETHMACRX_CLK_SLEEP_DISABLE
   __ETHMACRX_CLK_SLEEP_ENABLE=__HAL_RCC_ETHMACRX_CLK_SLEEP_ENABLE
   __ETHMACTX_CLK_DISABLE=__HAL_RCC_ETHMACTX_CLK_DISABLE
   __ETHMACTX_CLK_ENABLE=__HAL_RCC_ETHMACTX_CLK_ENABLE
   __ETHMACTX_CLK_SLEEP_DISABLE=__HAL_RCC_ETHMACTX_CLK_SLEEP_DISABLE
   __ETHMACTX_CLK_SLEEP_ENABLE=__HAL_RCC_ETHMACTX_CLK_SLEEP_ENABLE
   __ETHMAC_CLK_DISABLE=__HAL_RCC_ETHMAC_CLK_DISABLE
   __ETHMAC_CLK_ENABLE=__HAL_RCC_ETHMAC_CLK_ENABLE
   __ETHMAC_CLK_SLEEP_DISABLE=__HAL_RCC_ETHMAC_CLK_SLEEP_DISABLE
   __ETHMAC_CLK_SLEEP_ENABLE=__HAL_RCC_ETHMAC_CLK_SLEEP_ENABLE
   __ETHMAC_FORCE_RESET=__HAL_RCC_ETHMAC_FORCE_RESET
   __ETHMAC_RELEASE_RESET=__HAL_RCC_ETHMAC_RELEASE_RESET
   __ETH_CLK_DISABLE=__HAL_RCC_ETH_CLK_DISABLE
   __ETH_CLK_ENABLE=__HAL_RCC_ETH_CLK_ENABLE
   __EXCEPTION_H=1
   __EXCEPTION__=
   __EXP(x)=__##x##__
   __EXPORT=
   __exported=__attribute__((__visibility__("default")))
   __extension__=
   __FAST16=
   __FAST32=
   __FAST64="ll"
   __FAST8=
   __fastcall=__attribute__((__fastcall__))
   __FBSDID(s)=struct __hack
   __FILE_defined=
   __FILE__="file"
   __FIREWALL_CLK_DISABLE=__HAL_RCC_FIREWALL_CLK_DISABLE
   __FIREWALL_CLK_ENABLE=__HAL_RCC_FIREWALL_CLK_ENABLE
   __FLASH_CLK_DISABLE=__HAL_RCC_FLASH_CLK_DISABLE
   __FLASH_CLK_ENABLE=__HAL_RCC_FLASH_CLK_ENABLE
   __FLASH_CLK_SLEEP_DISABLE=__HAL_RCC_FLASH_CLK_SLEEP_DISABLE
   __FLASH_CLK_SLEEP_ENABLE=__HAL_RCC_FLASH_CLK_SLEEP_ENABLE
   __FLASH_FORCE_RESET=__HAL_RCC_FLASH_FORCE_RESET
   __FLASH_RELEASE_RESET=__HAL_RCC_FLASH_RELEASE_RESET
   __flexarr=[0]
   __FLITF_CLK_DISABLE=__HAL_RCC_FLITF_CLK_DISABLE
   __FLITF_CLK_ENABLE=__HAL_RCC_FLITF_CLK_ENABLE
   __FLITF_CLK_SLEEP_DISABLE=__HAL_RCC_FLITF_CLK_SLEEP_DISABLE
   __FLITF_CLK_SLEEP_ENABLE=__HAL_RCC_FLITF_CLK_SLEEP_ENABLE
   __FLITF_FORCE_RESET=__HAL_RCC_FLITF_FORCE_RESET
   __FLITF_IS_CLK_DISABLED=__HAL_RCC_FLITF_IS_CLK_DISABLED
   __FLITF_IS_CLK_ENABLED=__HAL_RCC_FLITF_IS_CLK_ENABLED
   __FLITF_RELEASE_RESET=__HAL_RCC_FLITF_RELEASE_RESET
   __FMC_CLK_DISABLE=__HAL_RCC_FMC_CLK_DISABLE
   __FMC_CLK_ENABLE=__HAL_RCC_FMC_CLK_ENABLE
   __FMC_CLK_SLEEP_DISABLE=__HAL_RCC_FMC_CLK_SLEEP_DISABLE
   __FMC_CLK_SLEEP_ENABLE=__HAL_RCC_FMC_CLK_SLEEP_ENABLE
   __FMC_FORCE_RESET=__HAL_RCC_FMC_FORCE_RESET
   __FMC_IS_CLK_DISABLED=__HAL_RCC_FMC_IS_CLK_DISABLED
   __FMC_IS_CLK_ENABLED=__HAL_RCC_FMC_IS_CLK_ENABLED
   __FMC_NAND_CLEAR_FLAG(__INSTANCE__,__BANK__,__FLAG__)=((__INSTANCE__)->SR &= ~(__FLAG__))
   __FMC_NAND_DISABLE(__INSTANCE__,__BANK__)=((__INSTANCE__)->PCR &= ~FMC_PCR_PBKEN)
   __FMC_NAND_DISABLE_IT(__INSTANCE__,__BANK__,__INTERRUPT__)=((__INSTANCE__)->SR &= ~(__INTERRUPT__))
   __FMC_NAND_ENABLE(__INSTANCE__,__BANK__)=((__INSTANCE__)->PCR |= FMC_PCR_PBKEN)
   __FMC_NAND_ENABLE_IT(__INSTANCE__,__BANK__,__INTERRUPT__)=((__INSTANCE__)->SR |= (__INTERRUPT__))
   __FMC_NAND_GET_FLAG(__INSTANCE__,__BANK__,__FLAG__)=(((__INSTANCE__)->SR &(__FLAG__)) == (__FLAG__))
   __FMC_NORSRAM_DISABLE(__INSTANCE__,__BANK__)=((__INSTANCE__)->BTCR[(__BANK__)] &= ~FMC_BCR1_MBKEN)
   __FMC_NORSRAM_ENABLE(__INSTANCE__,__BANK__)=((__INSTANCE__)->BTCR[(__BANK__)] |= FMC_BCR1_MBKEN)
   __FMC_RELEASE_RESET=__HAL_RCC_FMC_RELEASE_RESET
   __FMC_SDRAM_CLEAR_FLAG(__INSTANCE__,__FLAG__)=((__INSTANCE__)->SDRTR |= (__FLAG__))
   __FMC_SDRAM_DISABLE_IT(__INSTANCE__,__INTERRUPT__)=((__INSTANCE__)->SDRTR &= ~(__INTERRUPT__))
   __FMC_SDRAM_ENABLE_IT(__INSTANCE__,__INTERRUPT__)=((__INSTANCE__)->SDRTR |= (__INTERRUPT__))
   __FMC_SDRAM_GET_FLAG(__INSTANCE__,__FLAG__)=(((__INSTANCE__)->SDSR &(__FLAG__)) == (__FLAG__))
   __format_arg(fmtarg)=__attribute__((__format_arg__ (fmtarg)))
   __FPU_PRESENT=1
   __FPU_USED=1
   __FSMC_CLK_DISABLE=__HAL_RCC_FSMC_CLK_DISABLE
   __FSMC_CLK_ENABLE=__HAL_RCC_FSMC_CLK_ENABLE
   __FSMC_CLK_SLEEP_DISABLE=__HAL_RCC_FSMC_CLK_SLEEP_DISABLE
   __FSMC_CLK_SLEEP_ENABLE=__HAL_RCC_FSMC_CLK_SLEEP_ENABLE
   __FSMC_FORCE_RESET=__HAL_RCC_FSMC_FORCE_RESET
   __FSMC_RELEASE_RESET=__HAL_RCC_FSMC_RELEASE_RESET
   __glibcxx_assert(_Condition)=
   __glibcxx_class_requires(_a,_b)=
   __glibcxx_class_requires2(_a,_b,_c)=
   __glibcxx_class_requires3(_a,_b,_c,_d)=
   __glibcxx_class_requires4(_a,_b,_c,_d,_e)=
   __glibcxx_function_requires(...)=
   __glibcxx_integral_traps=false
   __GLIBCXX__=20181213
   __GNUCLIKE_ASM=3
   __GNUCLIKE_BUILTIN_CONSTANT_P=1
   __GNUCLIKE_BUILTIN_MEMCPY=1
   __GNUCLIKE_BUILTIN_NEXT_ARG=1
   __GNUCLIKE_BUILTIN_STDARG=1
   __GNUCLIKE_BUILTIN_VAALIST=1
   __GNUCLIKE_BUILTIN_VARARGS=1
   __GNUCLIKE_CTOR_SECTION_HANDLING=1
   __GNUCLIKE_MATH_BUILTIN_CONSTANTS=
   __GNUCLIKE_MATH_BUILTIN_RELOPS=
   __GNUCLIKE___OFFSETOF=1
   __GNUCLIKE___SECTION=1
   __GNUCLIKE___TYPEOF=1
   __GNUC_PREREQ(maj,min)=((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   __GNUC_PREREQ__(ma,mi)=__GNUC_PREREQ(ma, mi)
   __GNUC_VA_LIST=
   __GNUC_VA_LIST_COMPATIBILITY=1
   __GNU_VISIBLE=0
   __GPIOA_CLK_DISABLE=__HAL_RCC_GPIOA_CLK_DISABLE
   __GPIOA_CLK_ENABLE=__HAL_RCC_GPIOA_CLK_ENABLE
   __GPIOA_CLK_SLEEP_DISABLE=__HAL_RCC_GPIOA_CLK_SLEEP_DISABLE
   __GPIOA_CLK_SLEEP_ENABLE=__HAL_RCC_GPIOA_CLK_SLEEP_ENABLE
   __GPIOA_FORCE_RESET=__HAL_RCC_GPIOA_FORCE_RESET
   __GPIOA_IS_CLK_DISABLED=__HAL_RCC_GPIOA_IS_CLK_DISABLED
   __GPIOA_IS_CLK_ENABLED=__HAL_RCC_GPIOA_IS_CLK_ENABLED
   __GPIOA_RELEASE_RESET=__HAL_RCC_GPIOA_RELEASE_RESET
   __GPIOB_CLK_DISABLE=__HAL_RCC_GPIOB_CLK_DISABLE
   __GPIOB_CLK_ENABLE=__HAL_RCC_GPIOB_CLK_ENABLE
   __GPIOB_CLK_SLEEP_DISABLE=__HAL_RCC_GPIOB_CLK_SLEEP_DISABLE
   __GPIOB_CLK_SLEEP_ENABLE=__HAL_RCC_GPIOB_CLK_SLEEP_ENABLE
   __GPIOB_FORCE_RESET=__HAL_RCC_GPIOB_FORCE_RESET
   __GPIOB_IS_CLK_DISABLED=__HAL_RCC_GPIOB_IS_CLK_DISABLED
   __GPIOB_IS_CLK_ENABLED=__HAL_RCC_GPIOB_IS_CLK_ENABLED
   __GPIOB_RELEASE_RESET=__HAL_RCC_GPIOB_RELEASE_RESET
   __GPIOC_CLK_DISABLE=__HAL_RCC_GPIOC_CLK_DISABLE
   __GPIOC_CLK_ENABLE=__HAL_RCC_GPIOC_CLK_ENABLE
   __GPIOC_CLK_SLEEP_DISABLE=__HAL_RCC_GPIOC_CLK_SLEEP_DISABLE
   __GPIOC_CLK_SLEEP_ENABLE=__HAL_RCC_GPIOC_CLK_SLEEP_ENABLE
   __GPIOC_FORCE_RESET=__HAL_RCC_GPIOC_FORCE_RESET
   __GPIOC_IS_CLK_DISABLED=__HAL_RCC_GPIOC_IS_CLK_DISABLED
   __GPIOC_IS_CLK_ENABLED=__HAL_RCC_GPIOC_IS_CLK_ENABLED
   __GPIOC_RELEASE_RESET=__HAL_RCC_GPIOC_RELEASE_RESET
   __GPIOD_CLK_DISABLE=__HAL_RCC_GPIOD_CLK_DISABLE
   __GPIOD_CLK_ENABLE=__HAL_RCC_GPIOD_CLK_ENABLE
   __GPIOD_CLK_SLEEP_DISABLE=__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE
   __GPIOD_CLK_SLEEP_ENABLE=__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE
   __GPIOD_FORCE_RESET=__HAL_RCC_GPIOD_FORCE_RESET
   __GPIOD_IS_CLK_DISABLED=__HAL_RCC_GPIOD_IS_CLK_DISABLED
   __GPIOD_IS_CLK_ENABLED=__HAL_RCC_GPIOD_IS_CLK_ENABLED
   __GPIOD_RELEASE_RESET=__HAL_RCC_GPIOD_RELEASE_RESET
   __GPIOE_CLK_DISABLE=__HAL_RCC_GPIOE_CLK_DISABLE
   __GPIOE_CLK_ENABLE=__HAL_RCC_GPIOE_CLK_ENABLE
   __GPIOE_CLK_SLEEP_DISABLE=__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE
   __GPIOE_CLK_SLEEP_ENABLE=__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE
   __GPIOE_FORCE_RESET=__HAL_RCC_GPIOE_FORCE_RESET
   __GPIOE_IS_CLK_DISABLED=__HAL_RCC_GPIOE_IS_CLK_DISABLED
   __GPIOE_IS_CLK_ENABLED=__HAL_RCC_GPIOE_IS_CLK_ENABLED
   __GPIOE_RELEASE_RESET=__HAL_RCC_GPIOE_RELEASE_RESET
   __GPIOF_CLK_DISABLE=__HAL_RCC_GPIOF_CLK_DISABLE
   __GPIOF_CLK_ENABLE=__HAL_RCC_GPIOF_CLK_ENABLE
   __GPIOF_CLK_SLEEP_DISABLE=__HAL_RCC_GPIOF_CLK_SLEEP_DISABLE
   __GPIOF_CLK_SLEEP_ENABLE=__HAL_RCC_GPIOF_CLK_SLEEP_ENABLE
   __GPIOF_FORCE_RESET=__HAL_RCC_GPIOF_FORCE_RESET
   __GPIOF_IS_CLK_DISABLED=__HAL_RCC_GPIOF_IS_CLK_DISABLED
   __GPIOF_IS_CLK_ENABLED=__HAL_RCC_GPIOF_IS_CLK_ENABLED
   __GPIOF_RELEASE_RESET=__HAL_RCC_GPIOF_RELEASE_RESET
   __GPIOG_CLK_DISABLE=__HAL_RCC_GPIOG_CLK_DISABLE
   __GPIOG_CLK_ENABLE=__HAL_RCC_GPIOG_CLK_ENABLE
   __GPIOG_CLK_SLEEP_DISABLE=__HAL_RCC_GPIOG_CLK_SLEEP_DISABLE
   __GPIOG_CLK_SLEEP_ENABLE=__HAL_RCC_GPIOG_CLK_SLEEP_ENABLE
   __GPIOG_FORCE_RESET=__HAL_RCC_GPIOG_FORCE_RESET
   __GPIOG_IS_CLK_DISABLED=__HAL_RCC_GPIOG_IS_CLK_DISABLED
   __GPIOG_IS_CLK_ENABLED=__HAL_RCC_GPIOG_IS_CLK_ENABLED
   __GPIOG_RELEASE_RESET=__HAL_RCC_GPIOG_RELEASE_RESET
   __GPIOH_CLK_DISABLE=__HAL_RCC_GPIOH_CLK_DISABLE
   __GPIOH_CLK_ENABLE=__HAL_RCC_GPIOH_CLK_ENABLE
   __GPIOH_CLK_SLEEP_DISABLE=__HAL_RCC_GPIOH_CLK_SLEEP_DISABLE
   __GPIOH_CLK_SLEEP_ENABLE=__HAL_RCC_GPIOH_CLK_SLEEP_ENABLE
   __GPIOH_FORCE_RESET=__HAL_RCC_GPIOH_FORCE_RESET
   __GPIOH_IS_CLK_DISABLED=__HAL_RCC_GPIOH_IS_CLK_DISABLED
   __GPIOH_IS_CLK_ENABLED=__HAL_RCC_GPIOH_IS_CLK_ENABLED
   __GPIOH_RELEASE_RESET=__HAL_RCC_GPIOH_RELEASE_RESET
   __GPIOI_CLK_DISABLE=__HAL_RCC_GPIOI_CLK_DISABLE
   __GPIOI_CLK_ENABLE=__HAL_RCC_GPIOI_CLK_ENABLE
   __GPIOI_CLK_SLEEP_DISABLE=__HAL_RCC_GPIOI_CLK_SLEEP_DISABLE
   __GPIOI_CLK_SLEEP_ENABLE=__HAL_RCC_GPIOI_CLK_SLEEP_ENABLE
   __GPIOI_FORCE_RESET=__HAL_RCC_GPIOI_FORCE_RESET
   __GPIOI_RELEASE_RESET=__HAL_RCC_GPIOI_RELEASE_RESET
   __GPIOJ_CLK_DISABLE=__HAL_RCC_GPIOJ_CLK_DISABLE
   __GPIOJ_CLK_ENABLE=__HAL_RCC_GPIOJ_CLK_ENABLE
   __GPIOJ_CLK_SLEEP_DISABLE=__HAL_RCC_GPIOJ_CLK_SLEEP_DISABLE
   __GPIOJ_CLK_SLEEP_ENABLE=__HAL_RCC_GPIOJ_CLK_SLEEP_ENABLE
   __GPIOJ_FORCE_RESET=__HAL_RCC_GPIOJ_FORCE_RESET
   __GPIOJ_RELEASE_RESET=__HAL_RCC_GPIOJ_RELEASE_RESET
   __GPIOK_CLK_DISABLE=__HAL_RCC_GPIOK_CLK_DISABLE
   __GPIOK_CLK_ENABLE=__HAL_RCC_GPIOK_CLK_ENABLE
   __GPIOK_CLK_SLEEP_DISABLE=__HAL_RCC_GPIOK_CLK_SLEEP_DISABLE
   __GPIOK_CLK_SLEEP_ENABLE=__HAL_RCC_GPIOK_CLK_SLEEP_ENABLE
   __GPIOK_RELEASE_RESET=__HAL_RCC_GPIOK_RELEASE_RESET
   __guarded_by(x)=__lock_annotate(guarded_by(x))
   __GXX_MERGED_TYPEINFO_NAMES=0
   __HAL_ADC_AWD1THRESHOLD_SHIFT_RESOLUTION=ADC_AWD1THRESHOLD_SHIFT_RESOLUTION
   __HAL_ADC_AWD23THRESHOLD_SHIFT_RESOLUTION=ADC_AWD23THRESHOLD_SHIFT_RESOLUTION
   __HAL_ADC_CALFACT_DIFF_GET=ADC_CALFACT_DIFF_GET
   __HAL_ADC_CALFACT_DIFF_SET=ADC_CALFACT_DIFF_SET
   __HAL_ADC_CFGR1_AUTOOFF=ADC_CFGR1_AUTOOFF
   __HAL_ADC_CFGR1_AUTOWAIT=ADC_CFGR1_AUTOWAIT
   __HAL_ADC_CFGR1_CONTINUOUS=ADC_CFGR1_CONTINUOUS
   __HAL_ADC_CFGR1_DMACONTREQ=ADC_CFGR1_DMACONTREQ
   __HAL_ADC_CFGR1_OVERRUN=ADC_CFGR1_OVERRUN
   __HAL_ADC_CFGR1_REG_DISCCONTINUOUS=ADC_CFGR1_REG_DISCCONTINUOUS
   __HAL_ADC_CFGR1_SCANDIR=ADC_CFGR1_SCANDIR
   __HAL_ADC_CFGR_AUTOWAIT=ADC_CFGR_AUTOWAIT
   __HAL_ADC_CFGR_AWD1CH=ADC_CFGR_AWD1CH_SHIFT
   __HAL_ADC_CFGR_AWD23CR=ADC_CFGR_AWD23CR
   __HAL_ADC_CFGR_CONTINUOUS=ADC_CFGR_CONTINUOUS
   __HAL_ADC_CFGR_DISCONTINUOUS_NUM=ADC_CFGR_DISCONTINUOUS_NUM
   __HAL_ADC_CFGR_DMACONTREQ=ADC_CFGR_DMACONTREQ
   __HAL_ADC_CFGR_EXTSEL=ADC_CFGR_EXTSEL_SET
   __HAL_ADC_CFGR_INJECT_AUTO_CONVERSION=ADC_CFGR_INJECT_AUTO_CONVERSION
   __HAL_ADC_CFGR_INJECT_CONTEXT_QUEUE=ADC_CFGR_INJECT_CONTEXT_QUEUE
   __HAL_ADC_CFGR_INJECT_DISCCONTINUOUS=ADC_CFGR_INJECT_DISCCONTINUOUS
   __HAL_ADC_CFGR_OVERRUN=ADC_CFGR_OVERRUN
   __HAL_ADC_CFGR_REG_DISCCONTINUOUS=ADC_CFGR_REG_DISCCONTINUOUS
   __HAL_ADC_CHSELR_CHANNEL=ADC_CHSELR_CHANNEL
   __HAL_ADC_CLEAR_ERRORCODE=ADC_CLEAR_ERRORCODE
   __HAL_ADC_CLOCK_PRESCALER_RANGE=ADC_CLOCK_PRESCALER_RANGE
   __HAL_ADC_COMMON_ADC_OTHER=ADC_COMMON_ADC_OTHER
   __HAL_ADC_COMMON_CCR_MULTI=ADC_COMMON_CCR_MULTI
   __HAL_ADC_COMMON_REGISTER=ADC_COMMON_REGISTER
   __HAL_ADC_CONVCYCLES_MAX_RANGE=ADC_CONVCYCLES_MAX_RANGE
   __HAL_ADC_CR1_DISCONTINUOUS=ADC_CR1_DISCONTINUOUS
   __HAL_ADC_CR1_DISCONTINUOUS_NUM=ADC_CR1_DISCONTINUOUS_NUM
   __HAL_ADC_CR1_SCAN=ADC_CR1_SCAN_SET
   __HAL_ADC_CR1_SCANCONV=ADC_CR1_SCANCONV
   __HAL_ADC_CR2_CONTINUOUS=ADC_CR2_CONTINUOUS
   __HAL_ADC_CR2_DMAContReq=ADC_CR2_DMAContReq
   __HAL_ADC_CR2_EOCSelection=ADC_CR2_EOCSelection
   __HAL_ADC_DIFSEL_CHANNEL=ADC_DIFSEL_CHANNEL
   __HAL_ADC_DISABLING_CONDITIONS=ADC_DISABLING_CONDITIONS
   __HAL_ADC_ENABLING_CONDITIONS=ADC_ENABLING_CONDITIONS
   __HAL_ADC_GET_CLOCK_PRESCALER=ADC_GET_CLOCK_PRESCALER
   __HAL_ADC_GET_RESOLUTION=ADC_GET_RESOLUTION
   __HAL_ADC_IS_CONVERSION_ONGOING=ADC_IS_CONVERSION_ONGOING
   __HAL_ADC_IS_CONVERSION_ONGOING_INJECTED=ADC_IS_CONVERSION_ONGOING_INJECTED
   __HAL_ADC_IS_CONVERSION_ONGOING_REGULAR=ADC_IS_CONVERSION_ONGOING_REGULAR
   __HAL_ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED=ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED
   __HAL_ADC_IS_ENABLED=ADC_IS_ENABLE
   __HAL_ADC_IS_SOFTWARE_START_INJECTED=ADC_IS_SOFTWARE_START_INJECTED
   __HAL_ADC_IS_SOFTWARE_START_REGULAR=ADC_IS_SOFTWARE_START_REGULAR
   __HAL_ADC_JSQR=ADC_JSQR
   __HAL_ADC_JSQR_JEXTSEL=ADC_JSQR_JEXTSEL_SET
   __HAL_ADC_JSQR_JL=ADC_JSQR_JL_SHIFT
   __HAL_ADC_JSQR_RK=ADC_JSQR_RK
   __HAL_ADC_JSQR_RK_JL=ADC_JSQR_RK_JL
   __HAL_ADC_MULTIMODE_IS_ENABLED=ADC_MULTIMODE_IS_ENABLE
   __HAL_ADC_MULTI_SLAVE=ADC_MULTI_SLAVE
   __HAL_ADC_NONMULTIMODE_OR_MULTIMODEMASTER=ADC_NONMULTIMODE_OR_MULTIMODEMASTER
   __HAL_ADC_OFFSET_SHIFT_RESOLUTION=ADC_OFFSET_SHIFT_RESOLUTION
   __HAL_ADC_OFR_CHANNEL=ADC_OFR_CHANNEL
   __HAL_ADC_SMPR1=ADC_SMPR1
   __HAL_ADC_SMPR2=ADC_SMPR2
   __HAL_ADC_SQR1=ADC_SQR1
   __HAL_ADC_SQR1_L=ADC_SQR1_L_SHIFT
   __HAL_ADC_SQR1_RK=ADC_SQR1_RK
   __HAL_ADC_SQR2_RK=ADC_SQR2_RK
   __HAL_ADC_SQR3_RK=ADC_SQR3_RK
   __HAL_ADC_TRX_HIGHTHRESHOLD=ADC_TRX_HIGHTHRESHOLD
   __HAL_CEC_GET_IT=__HAL_CEC_GET_FLAG
   __HAL_CLEAR_FLAG=__HAL_SYSCFG_CLEAR_FLAG
   __HAL_COMP_EXTI_CLEAR_FLAG(__FLAG__)=(((__FLAG__) == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_CLEAR_FLAG() : __HAL_COMP_COMP2_EXTI_CLEAR_FLAG())
   __HAL_COMP_EXTI_DISABLE_IT(__EXTILINE__)=(((__EXTILINE__) == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_DISABLE_IT() : __HAL_COMP_COMP2_EXTI_DISABLE_IT())
   __HAL_COMP_EXTI_ENABLE_IT(__EXTILINE__)=(((__EXTILINE__) == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_IT() : __HAL_COMP_COMP2_EXTI_ENABLE_IT())
   __HAL_COMP_EXTI_FALLING_IT_DISABLE(__EXTILINE__)=(((__EXTILINE__) == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE() : __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE())
   __HAL_COMP_EXTI_FALLING_IT_ENABLE(__EXTILINE__)=(((__EXTILINE__) == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE() : __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE())
   __HAL_COMP_EXTI_GET_FLAG(__FLAG__)=(((__FLAG__) == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_GET_FLAG() : __HAL_COMP_COMP2_EXTI_GET_FLAG())
   __HAL_COMP_EXTI_RISING_IT_DISABLE(__EXTILINE__)=(((__EXTILINE__) == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE() : __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE())
   __HAL_COMP_EXTI_RISING_IT_ENABLE(__EXTILINE__)=(((__EXTILINE__) == COMP_EXTI_LINE_COMP1) ? __HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE() : __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE())
   __HAL_COMP_GET_EXTI_LINE=COMP_GET_EXTI_LINE
   __HAL_CORTEX_SYSTICKCLK_CONFIG(__CLKSRC__)=do { if ((__CLKSRC__) == SYSTICK_CLKSOURCE_HCLK) { SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK; } else SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK; } while(0)
   __HAL_DBGMCU_FREEZE_CAN1()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_CAN1_STOP))
   __HAL_DBGMCU_FREEZE_CAN2()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_CAN2_STOP))
   __HAL_DBGMCU_FREEZE_I2C1_TIMEOUT()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT))
   __HAL_DBGMCU_FREEZE_I2C2_TIMEOUT()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT))
   __HAL_DBGMCU_FREEZE_I2C3_TIMEOUT()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT))
   __HAL_DBGMCU_FREEZE_IWDG()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_IWDG_STOP))
   __HAL_DBGMCU_FREEZE_RTC()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_RTC_STOP))
   __HAL_DBGMCU_FREEZE_TIM1()=(DBGMCU->APB2FZ |= (DBGMCU_APB2_FZ_DBG_TIM1_STOP))
   __HAL_DBGMCU_FREEZE_TIM10()=(DBGMCU->APB2FZ |= (DBGMCU_APB2_FZ_DBG_TIM10_STOP))
   __HAL_DBGMCU_FREEZE_TIM11()=(DBGMCU->APB2FZ |= (DBGMCU_APB2_FZ_DBG_TIM11_STOP))
   __HAL_DBGMCU_FREEZE_TIM12()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM12_STOP))
   __HAL_DBGMCU_FREEZE_TIM13()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM13_STOP))
   __HAL_DBGMCU_FREEZE_TIM14()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM14_STOP))
   __HAL_DBGMCU_FREEZE_TIM2()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM2_STOP))
   __HAL_DBGMCU_FREEZE_TIM3()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM3_STOP))
   __HAL_DBGMCU_FREEZE_TIM4()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM4_STOP))
   __HAL_DBGMCU_FREEZE_TIM5()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM5_STOP))
   __HAL_DBGMCU_FREEZE_TIM6()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM6_STOP))
   __HAL_DBGMCU_FREEZE_TIM7()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM7_STOP))
   __HAL_DBGMCU_FREEZE_TIM8()=(DBGMCU->APB2FZ |= (DBGMCU_APB2_FZ_DBG_TIM8_STOP))
   __HAL_DBGMCU_FREEZE_TIM9()=(DBGMCU->APB2FZ |= (DBGMCU_APB2_FZ_DBG_TIM9_STOP))
   __HAL_DBGMCU_FREEZE_WWDG()=(DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_WWDG_STOP))
   __HAL_DBGMCU_UNFREEZE_CAN1()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_CAN1_STOP))
   __HAL_DBGMCU_UNFREEZE_CAN2()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_CAN2_STOP))
   __HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT))
   __HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT))
   __HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT))
   __HAL_DBGMCU_UNFREEZE_IWDG()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_IWDG_STOP))
   __HAL_DBGMCU_UNFREEZE_RTC()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_RTC_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM1()=(DBGMCU->APB2FZ &= ~(DBGMCU_APB2_FZ_DBG_TIM1_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM10()=(DBGMCU->APB2FZ &= ~(DBGMCU_APB2_FZ_DBG_TIM10_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM11()=(DBGMCU->APB2FZ &= ~(DBGMCU_APB2_FZ_DBG_TIM11_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM12()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM12_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM13()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM13_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM14()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM14_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM2()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM2_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM3()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM3_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM4()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM4_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM5()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM5_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM6()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM6_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM7()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM7_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM8()=(DBGMCU->APB2FZ &= ~(DBGMCU_APB2_FZ_DBG_TIM8_STOP))
   __HAL_DBGMCU_UNFREEZE_TIM9()=(DBGMCU->APB2FZ &= ~(DBGMCU_APB2_FZ_DBG_TIM9_STOP))
   __HAL_DBGMCU_UNFREEZE_WWDG()=(DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_WWDG_STOP))
   __HAL_DHR12R1_ALIGNEMENT=DAC_DHR12R1_ALIGNMENT
   __HAL_DHR12R2_ALIGNEMENT=DAC_DHR12R2_ALIGNMENT
   __HAL_DHR12RD_ALIGNEMENT=DAC_DHR12RD_ALIGNMENT
   __HAL_DMA2D_CLEAR_FLAG(__HANDLE__,__FLAG__)=((__HANDLE__)->Instance->IFCR = (__FLAG__))
   __HAL_DMA2D_DISABLE(__HANDLE__)=((__HANDLE__)->Instance->CR &= ~DMA2D_CR_START)
   __HAL_DMA2D_DISABLE_IT(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->CR &= ~(__INTERRUPT__))
   __HAL_DMA2D_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->CR |= DMA2D_CR_START)
   __HAL_DMA2D_ENABLE_IT(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->CR |= (__INTERRUPT__))
   __HAL_DMA2D_GET_FLAG(__HANDLE__,__FLAG__)=((__HANDLE__)->Instance->ISR & (__FLAG__))
   __HAL_DMA2D_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->CR & (__INTERRUPT__))
   __HAL_DMA2D_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = HAL_DMA2D_STATE_RESET)
   __HAL_DMA_CLEAR_FLAG(__HANDLE__,__FLAG__)=(((uint32_t)((__HANDLE__)->Instance) > (uint32_t)DMA2_Stream3)? (DMA2->HIFCR = (__FLAG__)) : ((uint32_t)((__HANDLE__)->Instance) > (uint32_t)DMA1_Stream7)? (DMA2->LIFCR = (__FLAG__)) : ((uint32_t)((__HANDLE__)->Instance) > (uint32_t)DMA1_Stream3)? (DMA1->HIFCR = (__FLAG__)) : (DMA1->LIFCR = (__FLAG__)))
   __HAL_DMA_DISABLE(__HANDLE__)=((__HANDLE__)->Instance->CR &= ~DMA_SxCR_EN)
   __HAL_DMA_DISABLE_IT(__HANDLE__,__INTERRUPT__)=(((__INTERRUPT__) != DMA_IT_FE)? ((__HANDLE__)->Instance->CR &= ~(__INTERRUPT__)) : ((__HANDLE__)->Instance->FCR &= ~(__INTERRUPT__)))
   __HAL_DMA_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->CR |= DMA_SxCR_EN)
   __HAL_DMA_ENABLE_IT(__HANDLE__,__INTERRUPT__)=(((__INTERRUPT__) != DMA_IT_FE)? ((__HANDLE__)->Instance->CR |= (__INTERRUPT__)) : ((__HANDLE__)->Instance->FCR |= (__INTERRUPT__)))
   __HAL_DMA_GET_COUNTER(__HANDLE__)=((__HANDLE__)->Instance->NDTR)
   __HAL_DMA_GET_DME_FLAG_INDEX(__HANDLE__)=(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream0))? DMA_FLAG_DMEIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream0))? DMA_FLAG_DMEIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream4))? DMA_FLAG_DMEIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream4))? DMA_FLAG_DMEIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream1))? DMA_FLAG_DMEIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream1))? DMA_FLAG_DMEIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream5))? DMA_FLAG_DMEIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream5))? DMA_FLAG_DMEIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream2))? DMA_FLAG_DMEIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream2))? DMA_FLAG_DMEIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream6))? DMA_FLAG_DMEIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream6))? DMA_FLAG_DMEIF2_6 : DMA_FLAG_DMEIF3_7)
   __HAL_DMA_GET_FE_FLAG_INDEX(__HANDLE__)=(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream0))? DMA_FLAG_FEIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream0))? DMA_FLAG_FEIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream4))? DMA_FLAG_FEIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream4))? DMA_FLAG_FEIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream1))? DMA_FLAG_FEIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream1))? DMA_FLAG_FEIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream5))? DMA_FLAG_FEIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream5))? DMA_FLAG_FEIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream2))? DMA_FLAG_FEIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream2))? DMA_FLAG_FEIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream6))? DMA_FLAG_FEIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream6))? DMA_FLAG_FEIF2_6 : DMA_FLAG_FEIF3_7)
   __HAL_DMA_GET_FLAG(__HANDLE__,__FLAG__)=(((uint32_t)((__HANDLE__)->Instance) > (uint32_t)DMA2_Stream3)? (DMA2->HISR & (__FLAG__)) : ((uint32_t)((__HANDLE__)->Instance) > (uint32_t)DMA1_Stream7)? (DMA2->LISR & (__FLAG__)) : ((uint32_t)((__HANDLE__)->Instance) > (uint32_t)DMA1_Stream3)? (DMA1->HISR & (__FLAG__)) : (DMA1->LISR & (__FLAG__)))
   __HAL_DMA_GET_FS(__HANDLE__)=(((__HANDLE__)->Instance->FCR & (DMA_SxFCR_FS)))
   __HAL_DMA_GET_HT_FLAG_INDEX(__HANDLE__)=(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream0))? DMA_FLAG_HTIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream0))? DMA_FLAG_HTIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream4))? DMA_FLAG_HTIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream4))? DMA_FLAG_HTIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream1))? DMA_FLAG_HTIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream1))? DMA_FLAG_HTIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream5))? DMA_FLAG_HTIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream5))? DMA_FLAG_HTIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream2))? DMA_FLAG_HTIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream2))? DMA_FLAG_HTIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream6))? DMA_FLAG_HTIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream6))? DMA_FLAG_HTIF2_6 : DMA_FLAG_HTIF3_7)
   __HAL_DMA_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__)=(((__INTERRUPT__) != DMA_IT_FE)? ((__HANDLE__)->Instance->CR & (__INTERRUPT__)) : ((__HANDLE__)->Instance->FCR & (__INTERRUPT__)))
   __HAL_DMA_GET_TC_FLAG_INDEX(__HANDLE__)=(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream0))? DMA_FLAG_TCIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream0))? DMA_FLAG_TCIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream4))? DMA_FLAG_TCIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream4))? DMA_FLAG_TCIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream1))? DMA_FLAG_TCIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream1))? DMA_FLAG_TCIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream5))? DMA_FLAG_TCIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream5))? DMA_FLAG_TCIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream2))? DMA_FLAG_TCIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream2))? DMA_FLAG_TCIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream6))? DMA_FLAG_TCIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream6))? DMA_FLAG_TCIF2_6 : DMA_FLAG_TCIF3_7)
   __HAL_DMA_GET_TE_FLAG_INDEX(__HANDLE__)=(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream0))? DMA_FLAG_TEIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream0))? DMA_FLAG_TEIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream4))? DMA_FLAG_TEIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream4))? DMA_FLAG_TEIF0_4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream1))? DMA_FLAG_TEIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream1))? DMA_FLAG_TEIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream5))? DMA_FLAG_TEIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream5))? DMA_FLAG_TEIF1_5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream2))? DMA_FLAG_TEIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream2))? DMA_FLAG_TEIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Stream6))? DMA_FLAG_TEIF2_6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Stream6))? DMA_FLAG_TEIF2_6 : DMA_FLAG_TEIF3_7)
   __HAL_DMA_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = HAL_DMA_STATE_RESET)
   __HAL_DMA_SET_COUNTER(__HANDLE__,__COUNTER__)=((__HANDLE__)->Instance->NDTR = (uint16_t)(__COUNTER__))
   __HAL_DSI_CLEAR_FLAG(__HANDLE__,__FLAG__)=((__HANDLE__)->Instance->WIFCR = (__FLAG__))
   __HAL_DSI_DISABLE(__HANDLE__)=((__HANDLE__)->Instance->CR &= ~DSI_CR_EN)
   __HAL_DSI_DISABLE_IT(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->WIER &= ~(__INTERRUPT__))
   __HAL_DSI_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->CR |= DSI_CR_EN)
   __HAL_DSI_ENABLE_IT(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->WIER |= (__INTERRUPT__))
   __HAL_DSI_GET_FLAG(__HANDLE__,__FLAG__)=((__HANDLE__)->Instance->WISR & (__FLAG__))
   __HAL_DSI_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->WISR & (__INTERRUPT__))
   __HAL_DSI_PLL_DISABLE(__HANDLE__)=((__HANDLE__)->Instance->WRPCR &= ~DSI_WRPCR_PLLEN)
   __HAL_DSI_PLL_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->WRPCR |= DSI_WRPCR_PLLEN)
   __HAL_DSI_REG_DISABLE(__HANDLE__)=((__HANDLE__)->Instance->WRPCR &= ~DSI_WRPCR_REGEN)
   __HAL_DSI_REG_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->WRPCR |= DSI_WRPCR_REGEN)
   __HAL_DSI_WRAPPER_DISABLE(__HANDLE__)=((__HANDLE__)->Instance->WCR &= ~DSI_WCR_DSIEN)
   __HAL_DSI_WRAPPER_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->WCR |= DSI_WCR_DSIEN)
   __HAL_ETH_EXTI_CLEAR_FLAG=__HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG
   __HAL_ETH_EXTI_DISABLE_IT=__HAL_ETH_WAKEUP_EXTI_DISABLE_IT
   __HAL_ETH_EXTI_ENABLE_IT=__HAL_ETH_WAKEUP_EXTI_ENABLE_IT
   __HAL_ETH_EXTI_GET_FLAG=__HAL_ETH_WAKEUP_EXTI_GET_FLAG
   __HAL_ETH_EXTI_SET_FALLINGRISING_TRIGGER=__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLINGRISING_TRIGGER
   __HAL_ETH_EXTI_SET_FALLING_EGDE_TRIGGER=__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLING_EDGE_TRIGGER
   __HAL_ETH_EXTI_SET_RISING_EGDE_TRIGGER=__HAL_ETH_WAKEUP_EXTI_ENABLE_RISING_EDGE_TRIGGER
   __HAL_FLASH_CLEAR_FLAG(__FLAG__)=(FLASH->SR = (__FLAG__))
   __HAL_FLASH_DATA_CACHE_DISABLE()=(FLASH->ACR &= (~FLASH_ACR_DCEN))
   __HAL_FLASH_DATA_CACHE_ENABLE()=(FLASH->ACR |= FLASH_ACR_DCEN)
   __HAL_FLASH_DATA_CACHE_RESET()=do {FLASH->ACR |= FLASH_ACR_DCRST; FLASH->ACR &= ~FLASH_ACR_DCRST; }while(0)
   __HAL_FLASH_DISABLE_IT(__INTERRUPT__)=(FLASH->CR &= ~(uint32_t)(__INTERRUPT__))
   __HAL_FLASH_ENABLE_IT(__INTERRUPT__)=(FLASH->CR |= (__INTERRUPT__))
   __HAL_FLASH_GET_FLAG(__FLAG__)=((FLASH->SR & (__FLAG__)))
   __HAL_FLASH_GET_LATENCY()=(READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))
   __HAL_FLASH_INSTRUCTION_CACHE_DISABLE()=(FLASH->ACR &= (~FLASH_ACR_ICEN))
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE()=(FLASH->ACR |= FLASH_ACR_ICEN)
   __HAL_FLASH_INSTRUCTION_CACHE_RESET()=do {FLASH->ACR |= FLASH_ACR_ICRST; FLASH->ACR &= ~FLASH_ACR_ICRST; }while(0)
   __HAL_FLASH_PREFETCH_BUFFER_DISABLE()=(FLASH->ACR &= (~FLASH_ACR_PRFTEN))
   __HAL_FLASH_PREFETCH_BUFFER_ENABLE()=(FLASH->ACR |= FLASH_ACR_PRFTEN)
   __HAL_FLASH_SET_LATENCY(__LATENCY__)=(*(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)(__LATENCY__))
   __HAL_FMC_BANK=__HAL_SYSCFG_FMC_BANK
   __HAL_FREEZE_CAN1_DBGMCU=__HAL_DBGMCU_FREEZE_CAN1
   __HAL_FREEZE_CAN2_DBGMCU=__HAL_DBGMCU_FREEZE_CAN2
   __HAL_FREEZE_I2C1_TIMEOUT_DBGMCU=__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT
   __HAL_FREEZE_I2C2_TIMEOUT_DBGMCU=__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT
   __HAL_FREEZE_I2C3_TIMEOUT_DBGMCU=__HAL_DBGMCU_FREEZE_I2C3_TIMEOUT
   __HAL_FREEZE_IWDG_DBGMCU=__HAL_DBGMCU_FREEZE_IWDG
   __HAL_FREEZE_LPTIM1_DBGMCU=__HAL_DBGMCU_FREEZE_LPTIM1
   __HAL_FREEZE_LPTIM2_DBGMCU=__HAL_DBGMCU_FREEZE_LPTIM2
   __HAL_FREEZE_RTC_DBGMCU=__HAL_DBGMCU_FREEZE_RTC
   __HAL_FREEZE_TIM10_DBGMCU=__HAL_DBGMCU_FREEZE_TIM10
   __HAL_FREEZE_TIM11_DBGMCU=__HAL_DBGMCU_FREEZE_TIM11
   __HAL_FREEZE_TIM12_DBGMCU=__HAL_DBGMCU_FREEZE_TIM12
   __HAL_FREEZE_TIM13_DBGMCU=__HAL_DBGMCU_FREEZE_TIM13
   __HAL_FREEZE_TIM14_DBGMCU=__HAL_DBGMCU_FREEZE_TIM14
   __HAL_FREEZE_TIM15_DBGMCU=__HAL_DBGMCU_FREEZE_TIM15
   __HAL_FREEZE_TIM16_DBGMCU=__HAL_DBGMCU_FREEZE_TIM16
   __HAL_FREEZE_TIM17_DBGMCU=__HAL_DBGMCU_FREEZE_TIM17
   __HAL_FREEZE_TIM1_DBGMCU=__HAL_DBGMCU_FREEZE_TIM1
   __HAL_FREEZE_TIM2_DBGMCU=__HAL_DBGMCU_FREEZE_TIM2
   __HAL_FREEZE_TIM3_DBGMCU=__HAL_DBGMCU_FREEZE_TIM3
   __HAL_FREEZE_TIM4_DBGMCU=__HAL_DBGMCU_FREEZE_TIM4
   __HAL_FREEZE_TIM5_DBGMCU=__HAL_DBGMCU_FREEZE_TIM5
   __HAL_FREEZE_TIM6_DBGMCU=__HAL_DBGMCU_FREEZE_TIM6
   __HAL_FREEZE_TIM7_DBGMCU=__HAL_DBGMCU_FREEZE_TIM7
   __HAL_FREEZE_TIM8_DBGMCU=__HAL_DBGMCU_FREEZE_TIM8
   __HAL_FREEZE_TIM9_DBGMCU=__HAL_DBGMCU_FREEZE_TIM9
   __HAL_FREEZE_WWDG_DBGMCU=__HAL_DBGMCU_FREEZE_WWDG
   __HAL_GET_BOOT_MODE=__HAL_SYSCFG_GET_BOOT_MODE
   __HAL_GET_FLAG=__HAL_SYSCFG_GET_FLAG
   __HAL_GPIO_EXTI_CLEAR_FLAG(__EXTI_LINE__)=(EXTI->PR = (__EXTI_LINE__))
   __HAL_GPIO_EXTI_CLEAR_IT(__EXTI_LINE__)=(EXTI->PR = (__EXTI_LINE__))
   __HAL_GPIO_EXTI_GENERATE_SWIT(__EXTI_LINE__)=(EXTI->SWIER |= (__EXTI_LINE__))
   __HAL_GPIO_EXTI_GET_FLAG(__EXTI_LINE__)=(EXTI->PR & (__EXTI_LINE__))
   __HAL_GPIO_EXTI_GET_IT(__EXTI_LINE__)=(EXTI->PR & (__EXTI_LINE__))
   __HAL_I2C_10BIT_ADDRESS=I2C_10BIT_ADDRESS
   __HAL_I2C_10BIT_HEADER_READ=I2C_10BIT_HEADER_READ
   __HAL_I2C_10BIT_HEADER_WRITE=I2C_10BIT_HEADER_WRITE
   __HAL_I2C_7BIT_ADD_READ=I2C_7BIT_ADD_READ
   __HAL_I2C_7BIT_ADD_WRITE=I2C_7BIT_ADD_WRITE
   __HAL_I2C_CLEAR_ADDRFLAG(__HANDLE__)=do{ __IO uint32_t tmpreg; tmpreg = (__HANDLE__)->Instance->SR1; tmpreg = (__HANDLE__)->Instance->SR2; UNUSED(tmpreg); } while(0)
   __HAL_I2C_CLEAR_FLAG(__HANDLE__,__FLAG__)=((__HANDLE__)->Instance->SR1 = ~((__FLAG__) & I2C_FLAG_MASK))
   __HAL_I2C_CLEAR_STOPFLAG(__HANDLE__)=do{ __IO uint32_t tmpreg; tmpreg = (__HANDLE__)->Instance->SR1; (__HANDLE__)->Instance->CR1 |= I2C_CR1_PE; UNUSED(tmpreg); } while(0)
   __HAL_I2C_DISABLE(__HANDLE__)=((__HANDLE__)->Instance->CR1 &= ~I2C_CR1_PE)
   __HAL_I2C_DISABLE_IT(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->CR2 &= (~(__INTERRUPT__)))
   __HAL_I2C_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->CR1 |= I2C_CR1_PE)
   __HAL_I2C_ENABLE_IT(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->CR2 |= (__INTERRUPT__))
   __HAL_I2C_FREQRANGE=I2C_FREQRANGE
   __HAL_I2C_FREQ_RANGE=I2C_FREQ_RANGE
   __HAL_I2C_GENERATE_START=I2C_GENERATE_START
   __HAL_I2C_GET_FLAG(__HANDLE__,__FLAG__)=((((uint8_t)((__FLAG__) >> 16)) == 0x01)?((((__HANDLE__)->Instance->SR1) & ((__FLAG__) & I2C_FLAG_MASK)) == ((__FLAG__) & I2C_FLAG_MASK)): ((((__HANDLE__)->Instance->SR2) & ((__FLAG__) & I2C_FLAG_MASK)) == ((__FLAG__) & I2C_FLAG_MASK)))
   __HAL_I2C_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__)=((((__HANDLE__)->Instance->CR2 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
   __HAL_I2C_MEM_ADD_LSB=I2C_MEM_ADD_LSB
   __HAL_I2C_MEM_ADD_MSB=I2C_MEM_ADD_MSB
   __HAL_I2C_RESET_CR2=I2C_RESET_CR2
   __HAL_I2C_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = HAL_I2C_STATE_RESET)
   __HAL_I2C_RISE_TIME=I2C_RISE_TIME
   __HAL_I2C_SPEED=I2C_SPEED
   __HAL_I2C_SPEED_FAST=I2C_SPEED_FAST
   __HAL_I2C_SPEED_STANDARD=I2C_SPEED_STANDARD
   __HAL_IRDA_GETCLOCKSOURCE=IRDA_GETCLOCKSOURCE
   __HAL_IRDA_MASK_COMPUTATION=IRDA_MASK_COMPUTATION
   __HAL_IWDG_DISABLE_WRITE_ACCESS=IWDG_DISABLE_WRITE_ACCESS
   __HAL_IWDG_ENABLE_WRITE_ACCESS=IWDG_ENABLE_WRITE_ACCESS
   __HAL_LINKDMA(__HANDLE__,__PPP_DMA_FIELD__,__DMA_HANDLE__)=do{ (__HANDLE__)->__PPP_DMA_FIELD__ = &(__DMA_HANDLE__); (__DMA_HANDLE__).Parent = (__HANDLE__); } while(0)
   __HAL_LOCK(__HANDLE__)=do{ if((__HANDLE__)->Lock == HAL_LOCKED) { return HAL_BUSY; } else { (__HANDLE__)->Lock = HAL_LOCKED; } }while (0)
   __HAL_LPTIM_DISABLE_INTERRUPT=__HAL_LPTIM_DISABLE_IT
   __HAL_LPTIM_ENABLE_INTERRUPT=__HAL_LPTIM_ENABLE_IT
   __HAL_LPTIM_GET_ITSTATUS=__HAL_LPTIM_GET_IT_SOURCE
   __HAL_LTDC_CLEAR_FLAG(__HANDLE__,__FLAG__)=((__HANDLE__)->Instance->ICR = (__FLAG__))
   __HAL_LTDC_DISABLE(__HANDLE__)=((__HANDLE__)->Instance->GCR &= ~(LTDC_GCR_LTDCEN))
   __HAL_LTDC_DISABLE_IT(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->IER &= ~(__INTERRUPT__))
   __HAL_LTDC_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->GCR |= LTDC_GCR_LTDCEN)
   __HAL_LTDC_ENABLE_IT(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->IER |= (__INTERRUPT__))
   __HAL_LTDC_GET_FLAG(__HANDLE__,__FLAG__)=((__HANDLE__)->Instance->ISR & (__FLAG__))
   __HAL_LTDC_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__)=((__HANDLE__)->Instance->ISR & (__INTERRUPT__))
   __HAL_LTDC_LAYER=LTDC_LAYER
   __HAL_LTDC_LAYER_DISABLE(__HANDLE__,__LAYER__)=((LTDC_LAYER((__HANDLE__), (__LAYER__)))->CR &= ~(uint32_t)LTDC_LxCR_LEN)
   __HAL_LTDC_LAYER_ENABLE(__HANDLE__,__LAYER__)=((LTDC_LAYER((__HANDLE__), (__LAYER__)))->CR |= (uint32_t)LTDC_LxCR_LEN)
   __HAL_LTDC_RELOAD_CONFIG(__HANDLE__)=((__HANDLE__)->Instance->SRCR |= LTDC_SRCR_IMR)
   __HAL_LTDC_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = HAL_LTDC_STATE_RESET)
   __HAL_PVD_EVENT_DISABLE=__HAL_PWR_PVD_EXTI_DISABLE_EVENT
   __HAL_PVD_EVENT_ENABLE=__HAL_PWR_PVD_EXTI_ENABLE_EVENT
   __HAL_PVD_EXTI_CLEAR_FLAG(PWR_EXTI_LINE_PVD)=__HAL_PWR_PVD_EXTI_CLEAR_FLAG()
   __HAL_PVD_EXTI_DISABLE_IT(PWR_EXTI_LINE_PVD)=__HAL_PWR_PVD_EXTI_DISABLE_IT()
   __HAL_PVD_EXTI_ENABLE_IT(PWR_EXTI_LINE_PVD)=__HAL_PWR_PVD_EXTI_ENABLE_IT()
   __HAL_PVD_EXTI_FALLINGTRIGGER_DISABLE=__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
   __HAL_PVD_EXTI_FALLINGTRIGGER_ENABLE=__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
   __HAL_PVD_EXTI_GENERATE_SWIT(PWR_EXTI_LINE_PVD)=__HAL_PWR_PVD_EXTI_GENERATE_SWIT()
   __HAL_PVD_EXTI_GET_FLAG(PWR_EXTI_LINE_PVD)=__HAL_PWR_PVD_EXTI_GET_FLAG()
   __HAL_PVD_EXTI_RISINGTRIGGER_DISABLE=__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
   __HAL_PVD_EXTI_RISINGTRIGGER_ENABLE=__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
   __HAL_PVM_EVENT_DISABLE=__HAL_PWR_PVM_EVENT_DISABLE
   __HAL_PVM_EVENT_ENABLE=__HAL_PWR_PVM_EVENT_ENABLE
   __HAL_PVM_EXTI_FALLINGTRIGGER_DISABLE=__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_DISABLE
   __HAL_PVM_EXTI_FALLINGTRIGGER_ENABLE=__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_ENABLE
   __HAL_PVM_EXTI_RISINGTRIGGER_DISABLE=__HAL_PWR_PVM_EXTI_RISINGTRIGGER_DISABLE
   __HAL_PVM_EXTI_RISINGTRIGGER_ENABLE=__HAL_PWR_PVM_EXTI_RISINGTRIGGER_ENABLE
   __HAL_PWR_CLEAR_FLAG(__FLAG__)=(PWR->CR |= (__FLAG__) << 2)
   __HAL_PWR_CLEAR_ODRUDR_FLAG()=(PWR->CSR |= PWR_FLAG_UDRDY)
   __HAL_PWR_GET_FLAG(__FLAG__)=((PWR->CSR & (__FLAG__)) == (__FLAG__))
   __HAL_PWR_GET_ODRUDR_FLAG(__FLAG__)=((PWR->CSR & (__FLAG__)) == (__FLAG__))
   __HAL_PWR_INTERNALWAKEUP_DISABLE=HAL_PWREx_DisableInternalWakeUpLine
   __HAL_PWR_INTERNALWAKEUP_ENABLE=HAL_PWREx_EnableInternalWakeUpLine
   __HAL_PWR_OVERDRIVESWITCHING_DISABLE()=(*(__IO uint32_t *) CR_ODSWEN_BB = DISABLE)
   __HAL_PWR_OVERDRIVESWITCHING_ENABLE()=(*(__IO uint32_t *) CR_ODSWEN_BB = ENABLE)
   __HAL_PWR_OVERDRIVE_DISABLE()=(*(__IO uint32_t *) CR_ODEN_BB = DISABLE)
   __HAL_PWR_OVERDRIVE_ENABLE()=(*(__IO uint32_t *) CR_ODEN_BB = ENABLE)
   __HAL_PWR_PULL_UP_DOWN_CONFIG_DISABLE=HAL_PWREx_DisablePullUpPullDownConfig
   __HAL_PWR_PULL_UP_DOWN_CONFIG_ENABLE=HAL_PWREx_EnablePullUpPullDownConfig
   __HAL_PWR_PVD_EXTI_CLEAR_EGDE_TRIGGER()=__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE()
   __HAL_PWR_PVD_EXTI_CLEAR_FLAG()=(EXTI->PR = (PWR_EXTI_LINE_PVD))
   __HAL_PWR_PVD_EXTI_DISABLE_EVENT()=(EXTI->EMR &= ~(PWR_EXTI_LINE_PVD))
   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE()=CLEAR_BIT(EXTI->FTSR, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_DISABLE_IT()=(EXTI->IMR &= ~(PWR_EXTI_LINE_PVD))
   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE()=CLEAR_BIT(EXTI->RTSR, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE()=__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
   __HAL_PWR_PVD_EXTI_ENABLE_EVENT()=(EXTI->EMR |= (PWR_EXTI_LINE_PVD))
   __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE()=SET_BIT(EXTI->FTSR, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_ENABLE_IT()=(EXTI->IMR |= (PWR_EXTI_LINE_PVD))
   __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE()=SET_BIT(EXTI->RTSR, PWR_EXTI_LINE_PVD)
   __HAL_PWR_PVD_EXTI_ENABLE_RISING_FALLING_EDGE()=__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
   __HAL_PWR_PVD_EXTI_EVENT_DISABLE=__HAL_PWR_PVD_EXTI_DISABLE_EVENT
   __HAL_PWR_PVD_EXTI_EVENT_ENABLE=__HAL_PWR_PVD_EXTI_ENABLE_EVENT
   __HAL_PWR_PVD_EXTI_FALLINGTRIGGER_DISABLE=__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
   __HAL_PWR_PVD_EXTI_FALLINGTRIGGER_ENABLE=__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
   __HAL_PWR_PVD_EXTI_GENERATE_SWIT()=(EXTI->SWIER |= (PWR_EXTI_LINE_PVD))
   __HAL_PWR_PVD_EXTI_GET_FLAG()=(EXTI->PR & (PWR_EXTI_LINE_PVD))
   __HAL_PWR_PVD_EXTI_RISINGTRIGGER_DISABLE=__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
   __HAL_PWR_PVD_EXTI_RISINGTRIGGER_ENABLE=__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
   __HAL_PWR_PVD_EXTI_SET_FALLING_EGDE_TRIGGER=__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
   __HAL_PWR_PVD_EXTI_SET_RISING_EDGE_TRIGGER=__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
   __HAL_PWR_PVM_DISABLE()=HAL_PWREx_DisablePVM1();HAL_PWREx_DisablePVM2();HAL_PWREx_DisablePVM3();HAL_PWREx_DisablePVM4()
   __HAL_PWR_PVM_ENABLE()=HAL_PWREx_EnablePVM1();HAL_PWREx_EnablePVM2();HAL_PWREx_EnablePVM3();HAL_PWREx_EnablePVM4()
   __HAL_PWR_SRAM2CONTENT_PRESERVE_DISABLE=HAL_PWREx_DisableSRAM2ContentRetention
   __HAL_PWR_SRAM2CONTENT_PRESERVE_ENABLE=HAL_PWREx_EnableSRAM2ContentRetention
   __HAL_PWR_UNDERDRIVE_DISABLE()=(PWR->CR &= (uint32_t)(~PWR_CR_UDEN))
   __HAL_PWR_UNDERDRIVE_ENABLE()=(PWR->CR |= (uint32_t)PWR_CR_UDEN)
   __HAL_PWR_VDDIO2_DISABLE=HAL_PWREx_DisableVddIO2
   __HAL_PWR_VDDIO2_ENABLE=HAL_PWREx_EnableVddIO2
   __HAL_PWR_VDDIO2_EXTI_CLEAR_EGDE_TRIGGER=__HAL_PWR_VDDIO2_EXTI_DISABLE_FALLING_EDGE
   __HAL_PWR_VDDIO2_EXTI_SET_FALLING_EGDE_TRIGGER=__HAL_PWR_VDDIO2_EXTI_ENABLE_FALLING_EDGE
   __HAL_PWR_VDDUSB_DISABLE=HAL_PWREx_DisableVddUSB
   __HAL_PWR_VDDUSB_ENABLE=HAL_PWREx_EnableVddUSB
   __HAL_PWR_VOLTAGESCALING_CONFIG(__REGULATOR__)=do { __IO uint32_t tmpreg; MODIFY_REG(PWR->CR, PWR_CR_VOS, (__REGULATOR__)); tmpreg = READ_BIT(PWR->CR, PWR_CR_VOS); UNUSED(tmpreg); } while(0)
   __HAL_QSPI_CLEAR_FLAG(__HANDLE__,__FLAG__)=WRITE_REG((__HANDLE__)->Instance->FCR, (__FLAG__))
   __HAL_QSPI_DISABLE(__HANDLE__)=CLEAR_BIT((__HANDLE__)->Instance->CR, QUADSPI_CR_EN)
   __HAL_QSPI_DISABLE_IT(__HANDLE__,__INTERRUPT__)=CLEAR_BIT((__HANDLE__)->Instance->CR, (__INTERRUPT__))
   __HAL_QSPI_ENABLE(__HANDLE__)=SET_BIT((__HANDLE__)->Instance->CR, QUADSPI_CR_EN)
   __HAL_QSPI_ENABLE_IT(__HANDLE__,__INTERRUPT__)=SET_BIT((__HANDLE__)->Instance->CR, (__INTERRUPT__))
   __HAL_QSPI_GET_FLAG(__HANDLE__,__FLAG__)=(READ_BIT((__HANDLE__)->Instance->SR, (__FLAG__)) != 0)
   __HAL_QSPI_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__)=(READ_BIT((__HANDLE__)->Instance->CR, (__INTERRUPT__)) == (__INTERRUPT__))
   __HAL_QSPI_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = HAL_QSPI_STATE_RESET)
   __HAL_RCC_ADC1_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_ADC1EN))
   __HAL_RCC_ADC1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC1EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC1EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_ADC1_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_ADC1LPEN))
   __HAL_RCC_ADC1_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_ADC1LPEN))
   __HAL_RCC_ADC2_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_ADC2EN))
   __HAL_RCC_ADC2_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC2EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC2EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_ADC2_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_ADC2LPEN))
   __HAL_RCC_ADC2_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_ADC2LPEN))
   __HAL_RCC_ADC3_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_ADC3EN))
   __HAL_RCC_ADC3_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC3EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC3EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_ADC3_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_ADC3LPEN))
   __HAL_RCC_ADC3_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_ADC3LPEN))
   __HAL_RCC_ADC_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_ADCRST))
   __HAL_RCC_ADC_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_ADCRST))
   __HAL_RCC_AHB1_FORCE_RESET()=(RCC->AHB1RSTR = 0xFFFFFFFF)
   __HAL_RCC_AHB1_RELEASE_RESET()=(RCC->AHB1RSTR = 0x00)
   __HAL_RCC_AHB2_FORCE_RESET()=(RCC->AHB2RSTR = 0xFFFFFFFF)
   __HAL_RCC_AHB2_RELEASE_RESET()=(RCC->AHB2RSTR = 0x00)
   __HAL_RCC_AHB3_FORCE_RESET()=(RCC->AHB3RSTR = 0xFFFFFFFF)
   __HAL_RCC_AHB3_RELEASE_RESET()=(RCC->AHB3RSTR = 0x00)
   __HAL_RCC_APB1_FORCE_RESET()=(RCC->APB1RSTR = 0xFFFFFFFF)
   __HAL_RCC_APB1_RELEASE_RESET()=(RCC->APB1RSTR = 0x00)
   __HAL_RCC_APB2_FORCE_RESET()=(RCC->APB2RSTR = 0xFFFFFFFF)
   __HAL_RCC_APB2_RELEASE_RESET()=(RCC->APB2RSTR = 0x00)
   __HAL_RCC_BACKUPRESET_FORCE()=(*(__IO uint32_t *) RCC_BDCR_BDRST_BB = ENABLE)
   __HAL_RCC_BACKUPRESET_RELEASE()=(*(__IO uint32_t *) RCC_BDCR_BDRST_BB = DISABLE)
   __HAL_RCC_BKPSRAM_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_BKPSRAMEN))
   __HAL_RCC_BKPSRAM_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_BKPSRAMEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_BKPSRAMEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_BKPSRAMLPEN))
   __HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_BKPSRAMLPEN))
   __HAL_RCC_CAN1_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_CAN1EN))
   __HAL_RCC_CAN1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_CAN1EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_CAN1EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_CAN1_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_CAN1LPEN))
   __HAL_RCC_CAN1_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_CAN1LPEN))
   __HAL_RCC_CAN1_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_CAN1RST))
   __HAL_RCC_CAN1_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_CAN1RST))
   __HAL_RCC_CAN2_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_CAN2EN))
   __HAL_RCC_CAN2_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_CAN2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_CAN2EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_CAN2_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_CAN2LPEN))
   __HAL_RCC_CAN2_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_CAN2LPEN))
   __HAL_RCC_CAN2_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_CAN2RST))
   __HAL_RCC_CAN2_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_CAN2RST))
   __HAL_RCC_CCMDATARAMEN_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_CCMDATARAMEN))
   __HAL_RCC_CCMDATARAMEN_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_CCMDATARAMEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_CCMDATARAMEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_CLEAR_IT(__INTERRUPT__)=(*(__IO uint8_t *) RCC_CIR_BYTE2_ADDRESS = (__INTERRUPT__))
   __HAL_RCC_CLEAR_RESET_FLAGS()=(RCC->CSR |= RCC_CSR_RMVF)
   __HAL_RCC_CLK48_CONFIG(__SOURCE__)=(MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL, (uint32_t)(__SOURCE__)))
   __HAL_RCC_CRC_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_CRCEN))
   __HAL_RCC_CRC_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_CRCEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_CRCEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_CRC_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_CRCLPEN))
   __HAL_RCC_CRC_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_CRCLPEN))
   __HAL_RCC_CRC_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_CRCRST))
   __HAL_RCC_CRC_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_CRCRST))
   __HAL_RCC_DAC_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_DACEN))
   __HAL_RCC_DAC_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_DACEN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_DACEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_DAC_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_DACLPEN))
   __HAL_RCC_DAC_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_DACLPEN))
   __HAL_RCC_DAC_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_DACRST))
   __HAL_RCC_DAC_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_DACRST))
   __HAL_RCC_DCMI_CLK_DISABLE()=(RCC->AHB2ENR &= ~(RCC_AHB2ENR_DCMIEN))
   __HAL_RCC_DCMI_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB2ENR, RCC_AHB2ENR_DCMIEN); tmpreg = READ_BIT(RCC->AHB2ENR, RCC_AHB2ENR_DCMIEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_DCMI_CLK_SLEEP_DISABLE()=(RCC->AHB2LPENR &= ~(RCC_AHB2LPENR_DCMILPEN))
   __HAL_RCC_DCMI_CLK_SLEEP_ENABLE()=(RCC->AHB2LPENR |= (RCC_AHB2LPENR_DCMILPEN))
   __HAL_RCC_DCMI_FORCE_RESET()=(RCC->AHB2RSTR |= (RCC_AHB2RSTR_DCMIRST))
   __HAL_RCC_DCMI_RELEASE_RESET()=(RCC->AHB2RSTR &= ~(RCC_AHB2RSTR_DCMIRST))
   __HAL_RCC_DISABLE_IT(__INTERRUPT__)=(*(__IO uint8_t *) RCC_CIR_BYTE1_ADDRESS &= ~(__INTERRUPT__))
   __HAL_RCC_DMA1_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_DMA1EN))
   __HAL_RCC_DMA1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_DMA1EN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_DMA1EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_DMA1_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_DMA1LPEN))
   __HAL_RCC_DMA1_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_DMA1LPEN))
   __HAL_RCC_DMA1_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_DMA1RST))
   __HAL_RCC_DMA1_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_DMA1RST))
   __HAL_RCC_DMA2D_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_DMA2DEN))
   __HAL_RCC_DMA2D_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_DMA2DEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_DMA2DEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_DMA2D_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_DMA2DLPEN))
   __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_DMA2DLPEN))
   __HAL_RCC_DMA2D_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_DMA2DRST))
   __HAL_RCC_DMA2D_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_DMA2DRST))
   __HAL_RCC_DMA2_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_DMA2EN))
   __HAL_RCC_DMA2_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_DMA2EN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_DMA2EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_DMA2_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_DMA2LPEN))
   __HAL_RCC_DMA2_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_DMA2LPEN))
   __HAL_RCC_DMA2_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_DMA2RST))
   __HAL_RCC_DMA2_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_DMA2RST))
   __HAL_RCC_DSI_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_DSIEN))
   __HAL_RCC_DSI_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_DSIEN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_DSIEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_DSI_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_DSILPEN))
   __HAL_RCC_DSI_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_DSILPEN))
   __HAL_RCC_DSI_CONFIG(__SOURCE__)=(MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL, (uint32_t)(__SOURCE__)))
   __HAL_RCC_DSI_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_DSIRST))
   __HAL_RCC_DSI_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_DSIRST))
   __HAL_RCC_ENABLE_IT(__INTERRUPT__)=(*(__IO uint8_t *) RCC_CIR_BYTE1_ADDRESS |= (__INTERRUPT__))
   __HAL_RCC_ETHMACPTP_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_ETHMACPTPEN))
   __HAL_RCC_ETHMACPTP_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_ETHMACPTPEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_ETHMACPTPEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_ETHMACPTP_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_ETHMACPTPLPEN))
   __HAL_RCC_ETHMACPTP_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_ETHMACPTPLPEN))
   __HAL_RCC_ETHMACRX_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_ETHMACRXEN))
   __HAL_RCC_ETHMACRX_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_ETHMACRXEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_ETHMACRXEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_ETHMACRX_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_ETHMACRXLPEN))
   __HAL_RCC_ETHMACRX_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_ETHMACRXLPEN))
   __HAL_RCC_ETHMACTX_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_ETHMACTXEN))
   __HAL_RCC_ETHMACTX_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_ETHMACTXEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_ETHMACTXEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_ETHMACTX_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_ETHMACTXLPEN))
   __HAL_RCC_ETHMACTX_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_ETHMACTXLPEN))
   __HAL_RCC_ETHMAC_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_ETHMACEN))
   __HAL_RCC_ETHMAC_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_ETHMACEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_ETHMACEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_ETHMAC_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_ETHMACLPEN))
   __HAL_RCC_ETHMAC_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_ETHMACLPEN))
   __HAL_RCC_ETHMAC_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_ETHMACRST))
   __HAL_RCC_ETHMAC_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_ETHMACRST))
   __HAL_RCC_ETH_CLK_DISABLE()=do { __HAL_RCC_ETHMACTX_CLK_DISABLE(); __HAL_RCC_ETHMACRX_CLK_DISABLE(); __HAL_RCC_ETHMAC_CLK_DISABLE(); } while(0)
   __HAL_RCC_ETH_CLK_ENABLE()=do { __HAL_RCC_ETHMAC_CLK_ENABLE(); __HAL_RCC_ETHMACTX_CLK_ENABLE(); __HAL_RCC_ETHMACRX_CLK_ENABLE(); } while(0)
   __HAL_RCC_FLITF_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_FLITFLPEN))
   __HAL_RCC_FLITF_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_FLITFLPEN))
   __HAL_RCC_FMC_CLK_DISABLE()=(RCC->AHB3ENR &= ~(RCC_AHB3ENR_FMCEN))
   __HAL_RCC_FMC_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN); tmpreg = READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_FMC_CLK_SLEEP_DISABLE()=(RCC->AHB3LPENR &= ~(RCC_AHB3LPENR_FMCLPEN))
   __HAL_RCC_FMC_CLK_SLEEP_ENABLE()=(RCC->AHB3LPENR |= (RCC_AHB3LPENR_FMCLPEN))
   __HAL_RCC_FMC_FORCE_RESET()=(RCC->AHB3RSTR |= (RCC_AHB3RSTR_FMCRST))
   __HAL_RCC_FMC_RELEASE_RESET()=(RCC->AHB3RSTR &= ~(RCC_AHB3RSTR_FMCRST))
   __HAL_RCC_GET_CLK48_SOURCE()=(READ_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL))
   __HAL_RCC_GET_DSI_SOURCE()=(READ_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL))
   __HAL_RCC_GET_FLAG(__FLAG__)=(((((((__FLAG__) >> 5) == 1)? RCC->CR :((((__FLAG__) >> 5) == 2) ? RCC->BDCR :((((__FLAG__) >> 5) == 3)? RCC->CSR :RCC->CIR))) & ((uint32_t)1 << ((__FLAG__) & RCC_FLAG_MASK)))!= 0)? 1 : 0)
   __HAL_RCC_GET_IT(__INTERRUPT__)=((RCC->CIR & (__INTERRUPT__)) == (__INTERRUPT__))
   __HAL_RCC_GET_PLL_OSCSOURCE()=((uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC))
   __HAL_RCC_GET_SDIO_SOURCE()=(READ_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL))
   __HAL_RCC_GET_SDMMC1_SOURCE=__HAL_RCC_GET_SDIO_SOURCE
   __HAL_RCC_GET_SYSCLK_SOURCE()=((uint32_t)(RCC->CFGR & RCC_CFGR_SWS))
   __HAL_RCC_GPIOA_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOAEN))
   __HAL_RCC_GPIOA_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_GPIOA_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_GPIOALPEN))
   __HAL_RCC_GPIOA_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_GPIOALPEN))
   __HAL_RCC_GPIOA_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIOARST))
   __HAL_RCC_GPIOA_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOARST))
   __HAL_RCC_GPIOB_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOBEN))
   __HAL_RCC_GPIOB_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_GPIOBLPEN))
   __HAL_RCC_GPIOB_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_GPIOBLPEN))
   __HAL_RCC_GPIOB_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIOBRST))
   __HAL_RCC_GPIOB_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOBRST))
   __HAL_RCC_GPIOC_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOCEN))
   __HAL_RCC_GPIOC_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_GPIOC_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_GPIOCLPEN))
   __HAL_RCC_GPIOC_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_GPIOCLPEN))
   __HAL_RCC_GPIOC_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIOCRST))
   __HAL_RCC_GPIOC_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOCRST))
   __HAL_RCC_GPIOD_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIODEN))
   __HAL_RCC_GPIOD_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIODEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIODEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_GPIOD_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_GPIODLPEN))
   __HAL_RCC_GPIOD_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_GPIODLPEN))
   __HAL_RCC_GPIOD_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIODRST))
   __HAL_RCC_GPIOD_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIODRST))
   __HAL_RCC_GPIOE_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOEEN))
   __HAL_RCC_GPIOE_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOEEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOEEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_GPIOE_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_GPIOELPEN))
   __HAL_RCC_GPIOE_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_GPIOELPEN))
   __HAL_RCC_GPIOE_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIOERST))
   __HAL_RCC_GPIOE_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOERST))
   __HAL_RCC_GPIOF_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOFEN))
   __HAL_RCC_GPIOF_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOFEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOFEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_GPIOF_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_GPIOFLPEN))
   __HAL_RCC_GPIOF_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_GPIOFLPEN))
   __HAL_RCC_GPIOF_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIOFRST))
   __HAL_RCC_GPIOF_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOFRST))
   __HAL_RCC_GPIOG_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOGEN))
   __HAL_RCC_GPIOG_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOGEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOGEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_GPIOG_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_GPIOGLPEN))
   __HAL_RCC_GPIOG_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_GPIOGLPEN))
   __HAL_RCC_GPIOG_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIOGRST))
   __HAL_RCC_GPIOG_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOGRST))
   __HAL_RCC_GPIOH_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOHEN))
   __HAL_RCC_GPIOH_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOHEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOHEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_GPIOH_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_GPIOHLPEN))
   __HAL_RCC_GPIOH_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_GPIOHLPEN))
   __HAL_RCC_GPIOH_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIOHRST))
   __HAL_RCC_GPIOH_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOHRST))
   __HAL_RCC_GPIOI_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOIEN))
   __HAL_RCC_GPIOI_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOIEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOIEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_GPIOI_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_GPIOILPEN))
   __HAL_RCC_GPIOI_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_GPIOILPEN))
   __HAL_RCC_GPIOI_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIOIRST))
   __HAL_RCC_GPIOI_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOIRST))
   __HAL_RCC_GPIOJ_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOJEN))
   __HAL_RCC_GPIOJ_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOJEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOJEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_GPIOJ_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_GPIOJLPEN))
   __HAL_RCC_GPIOJ_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_GPIOJLPEN))
   __HAL_RCC_GPIOJ_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIOJRST))
   __HAL_RCC_GPIOJ_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOJRST))
   __HAL_RCC_GPIOK_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOKEN))
   __HAL_RCC_GPIOK_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOKEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOKEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_GPIOK_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_GPIOKLPEN))
   __HAL_RCC_GPIOK_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_GPIOKLPEN))
   __HAL_RCC_GPIOK_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_GPIOKRST))
   __HAL_RCC_GPIOK_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOKRST))
   __HAL_RCC_HSE_CONFIG(__STATE__)=(*(__IO uint8_t *) RCC_CR_BYTE2_ADDRESS = (__STATE__))
   __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(__HSICalibrationValue__)=(MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (uint32_t)(__HSICalibrationValue__) << POSITION_VAL(RCC_CR_HSITRIM)))
   __HAL_RCC_HSI_DISABLE()=(*(__IO uint32_t *) RCC_CR_HSION_BB = DISABLE)
   __HAL_RCC_HSI_ENABLE()=(*(__IO uint32_t *) RCC_CR_HSION_BB = ENABLE)
   __HAL_RCC_I2C1_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_I2C1EN))
   __HAL_RCC_I2C1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_I2C1_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_I2C1LPEN))
   __HAL_RCC_I2C1_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_I2C1LPEN))
   __HAL_RCC_I2C1_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_I2C1RST))
   __HAL_RCC_I2C1_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_I2C1RST))
   __HAL_RCC_I2C2_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_I2C2EN))
   __HAL_RCC_I2C2_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_I2C2_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_I2C2LPEN))
   __HAL_RCC_I2C2_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_I2C2LPEN))
   __HAL_RCC_I2C2_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_I2C2RST))
   __HAL_RCC_I2C2_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_I2C2RST))
   __HAL_RCC_I2C3_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_I2C3EN))
   __HAL_RCC_I2C3_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C3EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C3EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_I2C3_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_I2C3LPEN))
   __HAL_RCC_I2C3_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_I2C3LPEN))
   __HAL_RCC_I2C3_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_I2C3RST))
   __HAL_RCC_I2C3_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_I2C3RST))
   __HAL_RCC_I2SCLK=__HAL_RCC_I2S_CONFIG
   __HAL_RCC_I2SCLK_CONFIG=__HAL_RCC_I2S_CONFIG
   __HAL_RCC_I2S_CONFIG(__SOURCE__)=(*(__IO uint32_t *) RCC_CFGR_I2SSRC_BB = (__SOURCE__))
   __HAL_RCC_LSE_CONFIG(__STATE__)=(*(__IO uint8_t *) RCC_BDCR_BYTE0_ADDRESS = (__STATE__))
   __HAL_RCC_LSI_DISABLE()=(*(__IO uint32_t *) RCC_CSR_LSION_BB = DISABLE)
   __HAL_RCC_LSI_ENABLE()=(*(__IO uint32_t *) RCC_CSR_LSION_BB = ENABLE)
   __HAL_RCC_LTDC_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_LTDCEN))
   __HAL_RCC_LTDC_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_LTDCEN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_LTDCEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_LTDC_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_LTDCLPEN))
   __HAL_RCC_LTDC_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_LTDCLPEN))
   __HAL_RCC_LTDC_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_LTDCRST))
   __HAL_RCC_LTDC_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_LTDCRST))
   __HAL_RCC_MCO1_CONFIG(__MCOCLKSOURCE__,__MCODIV__)=MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), ((__MCOCLKSOURCE__) | (__MCODIV__)))
   __HAL_RCC_MCO2_CONFIG(__MCOCLKSOURCE__,__MCODIV__)=MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (__MCOCLKSOURCE__ | (__MCODIV__ << 3)));
   __HAL_RCC_MCO_CONFIG=__HAL_RCC_MCO1_CONFIG
   __HAL_RCC_OTGFS_FORCE_RESET=__HAL_RCC_USB_OTG_FS_FORCE_RESET
   __HAL_RCC_OTGFS_RELEASE_RESET=__HAL_RCC_USB_OTG_FS_RELEASE_RESET
   __HAL_RCC_OTGHSULPI_CLK_SLEEP_DISABLE=__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE
   __HAL_RCC_OTGHSULPI_CLK_SLEEP_ENABLE=__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE
   __HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_DISABLED=__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_DISABLED
   __HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_ENABLED=__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_ENABLED
   __HAL_RCC_OTGHS_CLK_SLEEP_DISABLE=__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE
   __HAL_RCC_OTGHS_CLK_SLEEP_ENABLE=__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE
   __HAL_RCC_OTGHS_FORCE_RESET=__HAL_RCC_USB_OTG_HS_FORCE_RESET
   __HAL_RCC_OTGHS_IS_CLK_SLEEP_DISABLED=__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_DISABLED
   __HAL_RCC_OTGHS_IS_CLK_SLEEP_ENABLED=__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_ENABLED
   __HAL_RCC_OTGHS_RELEASE_RESET=__HAL_RCC_USB_OTG_HS_RELEASE_RESET
   __HAL_RCC_PLLI2S_CONFIG(__PLLI2SN__,__PLLI2SR__)=(RCC->PLLI2SCFGR = (((__PLLI2SN__) << POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN)) | ((__PLLI2SR__) << POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR))))
   __HAL_RCC_PLLI2S_DISABLE()=(*(__IO uint32_t *) RCC_CR_PLLI2SON_BB = DISABLE)
   __HAL_RCC_PLLI2S_ENABLE()=(*(__IO uint32_t *) RCC_CR_PLLI2SON_BB = ENABLE)
   __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(__PLLI2SDivQ__)=(MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_PLLI2SDIVQ, (__PLLI2SDivQ__)-1))
   __HAL_RCC_PLLI2S_SAICLK_CONFIG(__PLLI2SN__,__PLLI2SQ__,__PLLI2SR__)=(RCC->PLLI2SCFGR = ((__PLLI2SN__) << 6) | ((__PLLI2SQ__) << 24) | ((__PLLI2SR__) << 28))
   __HAL_RCC_PLLSAI_CLEAR_IT()=(RCC->CIR |= (RCC_CIR_PLLSAIRDYF))
   __HAL_RCC_PLLSAI_CONFIG(__PLLSAIN__,__PLLSAIP__,__PLLSAIQ__,__PLLSAIR__)=(RCC->PLLSAICFGR = (((__PLLSAIN__) << POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN)) | ((((__PLLSAIP__) >> 1) -1) << POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP)) | ((__PLLSAIQ__) << POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)) | ((__PLLSAIR__) << POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR))))
   __HAL_RCC_PLLSAI_DISABLE()=(*(__IO uint32_t *) RCC_CR_PLLSAION_BB = DISABLE)
   __HAL_RCC_PLLSAI_DISABLE_IT()=(RCC->CIR &= ~(RCC_CIR_PLLSAIRDYIE))
   __HAL_RCC_PLLSAI_ENABLE()=(*(__IO uint32_t *) RCC_CR_PLLSAION_BB = ENABLE)
   __HAL_RCC_PLLSAI_ENABLE_IT()=(RCC->CIR |= (RCC_CIR_PLLSAIRDYIE))
   __HAL_RCC_PLLSAI_GET_FLAG()=((RCC->CR & (RCC_CR_PLLSAIRDY)) == (RCC_CR_PLLSAIRDY))
   __HAL_RCC_PLLSAI_GET_IT()=((RCC->CIR & (RCC_CIR_PLLSAIRDYIE)) == (RCC_CIR_PLLSAIRDYIE))
   __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(__PLLSAIDivQ__)=(MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_PLLSAIDIVQ, ((__PLLSAIDivQ__)-1)<<8))
   __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(__PLLSAIDivR__)=(MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_PLLSAIDIVR, (__PLLSAIDivR__)))
   __HAL_RCC_PLL_CONFIG(__RCC_PLLSource__,__PLLM__,__PLLN__,__PLLP__,__PLLQ__,__PLLR__)=(RCC->PLLCFGR = ((__RCC_PLLSource__) | (__PLLM__) | ((__PLLN__) << POSITION_VAL(RCC_PLLCFGR_PLLN)) | ((((__PLLP__) >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | ((__PLLQ__) << POSITION_VAL(RCC_PLLCFGR_PLLQ)) | ((__PLLR__) << POSITION_VAL(RCC_PLLCFGR_PLLR))))
   __HAL_RCC_PLL_DISABLE()=(*(__IO uint32_t *) RCC_CR_PLLON_BB = DISABLE)
   __HAL_RCC_PLL_ENABLE()=(*(__IO uint32_t *) RCC_CR_PLLON_BB = ENABLE)
   __HAL_RCC_PLL_PLLM_CONFIG(__PLLM__)=MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLM, (__PLLM__))
   __HAL_RCC_PLL_PLLSOURCE_CONFIG(__PLLSOURCE__)=MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, (__PLLSOURCE__))
   __HAL_RCC_PWR_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_PWREN))
   __HAL_RCC_PWR_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_PWR_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_PWRLPEN))
   __HAL_RCC_PWR_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_PWRLPEN))
   __HAL_RCC_PWR_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_PWRRST))
   __HAL_RCC_PWR_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_PWRRST))
   __HAL_RCC_QSPI_CLK_DISABLE()=(RCC->AHB3ENR &= ~(RCC_AHB3ENR_QSPIEN))
   __HAL_RCC_QSPI_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_QSPIEN); tmpreg = READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_QSPIEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_QSPI_CLK_SLEEP_DISABLE()=(RCC->AHB3LPENR &= ~(RCC_AHB3LPENR_QSPILPEN))
   __HAL_RCC_QSPI_CLK_SLEEP_ENABLE()=(RCC->AHB3LPENR |= (RCC_AHB3LPENR_QSPILPEN))
   __HAL_RCC_QSPI_FORCE_RESET()=(RCC->AHB3RSTR |= (RCC_AHB3RSTR_QSPIRST))
   __HAL_RCC_QSPI_RELEASE_RESET()=(RCC->AHB3RSTR &= ~(RCC_AHB3RSTR_QSPIRST))
   __HAL_RCC_RNG_CLK_DISABLE()=(RCC->AHB2ENR &= ~(RCC_AHB2ENR_RNGEN))
   __HAL_RCC_RNG_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB2ENR, RCC_AHB2ENR_RNGEN); tmpreg = READ_BIT(RCC->AHB2ENR, RCC_AHB2ENR_RNGEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_RNG_CLK_SLEEP_DISABLE()=(RCC->AHB2LPENR &= ~(RCC_AHB2LPENR_RNGLPEN))
   __HAL_RCC_RNG_CLK_SLEEP_ENABLE()=(RCC->AHB2LPENR |= (RCC_AHB2LPENR_RNGLPEN))
   __HAL_RCC_RNG_FORCE_RESET()=(RCC->AHB2RSTR |= (RCC_AHB2RSTR_RNGRST))
   __HAL_RCC_RNG_RELEASE_RESET()=(RCC->AHB2RSTR &= ~(RCC_AHB2RSTR_RNGRST))
   __HAL_RCC_RTC_CLKPRESCALER(__RTCCLKSource__)=(((__RTCCLKSource__) & RCC_BDCR_RTCSEL) == RCC_BDCR_RTCSEL) ? MODIFY_REG(RCC->CFGR, RCC_CFGR_RTCPRE, ((__RTCCLKSource__) & 0xFFFFCFF)) : CLEAR_BIT(RCC->CFGR, RCC_CFGR_RTCPRE)
   __HAL_RCC_RTC_CONFIG(__RTCCLKSource__)=do { __HAL_RCC_RTC_CLKPRESCALER(__RTCCLKSource__); RCC->BDCR |= ((__RTCCLKSource__) & 0x00000FFF); } while (0)
   __HAL_RCC_RTC_DISABLE()=(*(__IO uint32_t *) RCC_BDCR_RTCEN_BB = DISABLE)
   __HAL_RCC_RTC_ENABLE()=(*(__IO uint32_t *) RCC_BDCR_RTCEN_BB = ENABLE)
   __HAL_RCC_SAI1_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_SAI1EN))
   __HAL_RCC_SAI1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SAI1EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SAI1EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_SAI1_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_SAI1LPEN))
   __HAL_RCC_SAI1_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_SAI1LPEN))
   __HAL_RCC_SAI1_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_SAI1RST))
   __HAL_RCC_SAI1_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_SAI1RST))
   __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(__SOURCE__)=(MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_SAI1ASRC, (__SOURCE__)))
   __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(__SOURCE__)=(MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_SAI1BSRC, (__SOURCE__)))
   __HAL_RCC_SDIO_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_SDIOEN))
   __HAL_RCC_SDIO_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SDIOEN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SDIOEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_SDIO_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_SDIOLPEN))
   __HAL_RCC_SDIO_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_SDIOLPEN))
   __HAL_RCC_SDIO_CONFIG(__SOURCE__)=(MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL, (uint32_t)(__SOURCE__)))
   __HAL_RCC_SDIO_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_SDIORST))
   __HAL_RCC_SDIO_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_SDIORST))
   __HAL_RCC_SDMMC1_CLK_DISABLE=__HAL_RCC_SDIO_CLK_DISABLE
   __HAL_RCC_SDMMC1_CLK_ENABLE=__HAL_RCC_SDIO_CLK_ENABLE
   __HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE=__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
   __HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE=__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
   __HAL_RCC_SDMMC1_CONFIG=__HAL_RCC_SDIO_CONFIG
   __HAL_RCC_SDMMC1_FORCE_RESET=__HAL_RCC_SDIO_FORCE_RESET
   __HAL_RCC_SDMMC1_RELEASE_RESET=__HAL_RCC_SDIO_RELEASE_RESET
   __HAL_RCC_SPI1_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_SPI1EN))
   __HAL_RCC_SPI1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI1EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI1EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_SPI1_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_SPI1LPEN))
   __HAL_RCC_SPI1_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_SPI1LPEN))
   __HAL_RCC_SPI1_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_SPI1RST))
   __HAL_RCC_SPI1_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_SPI1RST))
   __HAL_RCC_SPI2_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_SPI2EN))
   __HAL_RCC_SPI2_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_SPI2_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_SPI2LPEN))
   __HAL_RCC_SPI2_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_SPI2LPEN))
   __HAL_RCC_SPI2_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_SPI2RST))
   __HAL_RCC_SPI2_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_SPI2RST))
   __HAL_RCC_SPI3_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_SPI3EN))
   __HAL_RCC_SPI3_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI3EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI3EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_SPI3_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_SPI3LPEN))
   __HAL_RCC_SPI3_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_SPI3LPEN))
   __HAL_RCC_SPI3_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_SPI3RST))
   __HAL_RCC_SPI3_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_SPI3RST))
   __HAL_RCC_SPI4_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_SPI4EN))
   __HAL_RCC_SPI4_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI4EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI4EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_SPI4_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_SPI4LPEN))
   __HAL_RCC_SPI4_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_SPI4LPEN))
   __HAL_RCC_SPI4_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_SPI4RST))
   __HAL_RCC_SPI4_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_SPI4RST))
   __HAL_RCC_SPI5_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_SPI5EN))
   __HAL_RCC_SPI5_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI5EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI5EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_SPI5_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_SPI5LPEN))
   __HAL_RCC_SPI5_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_SPI5LPEN))
   __HAL_RCC_SPI5_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_SPI5RST))
   __HAL_RCC_SPI5_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_SPI5RST))
   __HAL_RCC_SPI6_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_SPI6EN))
   __HAL_RCC_SPI6_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI6EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI6EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_SPI6_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_SPI6LPEN))
   __HAL_RCC_SPI6_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_SPI6LPEN))
   __HAL_RCC_SPI6_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_SPI6RST))
   __HAL_RCC_SPI6_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_SPI6RST))
   __HAL_RCC_SRAM1_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_SRAM1LPEN))
   __HAL_RCC_SRAM1_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_SRAM1LPEN))
   __HAL_RCC_SRAM2_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_SRAM2LPEN))
   __HAL_RCC_SRAM2_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_SRAM2LPEN))
   __HAL_RCC_SRAM3_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_SRAM3LPEN))
   __HAL_RCC_SYSCFG_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_SYSCFGEN))
   __HAL_RCC_SYSCFG_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_SYSCFGLPEN))
   __HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_SYSCFGLPEN))
   __HAL_RCC_SYSCFG_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_SYSCFGRST))
   __HAL_RCC_SYSCFG_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_SYSCFGRST))
   __HAL_RCC_SYSCLK_CONFIG(__RCC_SYSCLKSOURCE__)=MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, (__RCC_SYSCLKSOURCE__))
   __HAL_RCC_TIM10_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_TIM10EN))
   __HAL_RCC_TIM10_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM10EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM10EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM10_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_TIM10LPEN))
   __HAL_RCC_TIM10_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_TIM10LPEN))
   __HAL_RCC_TIM10_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_TIM10RST))
   __HAL_RCC_TIM10_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM10RST))
   __HAL_RCC_TIM11_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_TIM11EN))
   __HAL_RCC_TIM11_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM11EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM11EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM11_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_TIM11LPEN))
   __HAL_RCC_TIM11_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_TIM11LPEN))
   __HAL_RCC_TIM11_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_TIM11RST))
   __HAL_RCC_TIM11_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM11RST))
   __HAL_RCC_TIM12_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_TIM12EN))
   __HAL_RCC_TIM12_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM12EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM12EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM12_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_TIM12LPEN))
   __HAL_RCC_TIM12_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_TIM12LPEN))
   __HAL_RCC_TIM12_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_TIM12RST))
   __HAL_RCC_TIM12_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM12RST))
   __HAL_RCC_TIM13_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_TIM13EN))
   __HAL_RCC_TIM13_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM13EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM13EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM13_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_TIM13LPEN))
   __HAL_RCC_TIM13_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_TIM13LPEN))
   __HAL_RCC_TIM13_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_TIM13RST))
   __HAL_RCC_TIM13_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM13RST))
   __HAL_RCC_TIM14_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_TIM14EN))
   __HAL_RCC_TIM14_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM14EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM14EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM14_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_TIM14LPEN))
   __HAL_RCC_TIM14_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_TIM14LPEN))
   __HAL_RCC_TIM14_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_TIM14RST))
   __HAL_RCC_TIM14_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM14RST))
   __HAL_RCC_TIM1_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_TIM1EN))
   __HAL_RCC_TIM1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM1_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_TIM1LPEN))
   __HAL_RCC_TIM1_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_TIM1LPEN))
   __HAL_RCC_TIM1_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_TIM1RST))
   __HAL_RCC_TIM1_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM1RST))
   __HAL_RCC_TIM2_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_TIM2EN))
   __HAL_RCC_TIM2_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM2_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_TIM2LPEN))
   __HAL_RCC_TIM2_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_TIM2LPEN))
   __HAL_RCC_TIM2_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_TIM2RST))
   __HAL_RCC_TIM2_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST))
   __HAL_RCC_TIM3_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_TIM3EN))
   __HAL_RCC_TIM3_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM3_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_TIM3LPEN))
   __HAL_RCC_TIM3_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_TIM3LPEN))
   __HAL_RCC_TIM3_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_TIM3RST))
   __HAL_RCC_TIM3_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM3RST))
   __HAL_RCC_TIM4_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_TIM4EN))
   __HAL_RCC_TIM4_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM4EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM4EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM4_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_TIM4LPEN))
   __HAL_RCC_TIM4_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_TIM4LPEN))
   __HAL_RCC_TIM4_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_TIM4RST))
   __HAL_RCC_TIM4_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM4RST))
   __HAL_RCC_TIM5_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_TIM5EN))
   __HAL_RCC_TIM5_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM5_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_TIM5LPEN))
   __HAL_RCC_TIM5_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_TIM5LPEN))
   __HAL_RCC_TIM5_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_TIM5RST))
   __HAL_RCC_TIM5_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM5RST))
   __HAL_RCC_TIM6_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_TIM6EN))
   __HAL_RCC_TIM6_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM6EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM6EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM6_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_TIM6LPEN))
   __HAL_RCC_TIM6_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_TIM6LPEN))
   __HAL_RCC_TIM6_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_TIM6RST))
   __HAL_RCC_TIM6_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM6RST))
   __HAL_RCC_TIM7_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_TIM7EN))
   __HAL_RCC_TIM7_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM7EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM7EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM7_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_TIM7LPEN))
   __HAL_RCC_TIM7_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_TIM7LPEN))
   __HAL_RCC_TIM7_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_TIM7RST))
   __HAL_RCC_TIM7_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM7RST))
   __HAL_RCC_TIM8_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_TIM8EN))
   __HAL_RCC_TIM8_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM8EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM8EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM8_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_TIM8LPEN))
   __HAL_RCC_TIM8_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_TIM8LPEN))
   __HAL_RCC_TIM8_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_TIM8RST))
   __HAL_RCC_TIM8_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM8RST))
   __HAL_RCC_TIM9_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_TIM9EN))
   __HAL_RCC_TIM9_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM9EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM9EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_TIM9_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_TIM9LPEN))
   __HAL_RCC_TIM9_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_TIM9LPEN))
   __HAL_RCC_TIM9_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_TIM9RST))
   __HAL_RCC_TIM9_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM9RST))
   __HAL_RCC_TIMCLKPRESCALER(__PRESC__)=(*(__IO uint32_t *) RCC_DCKCFGR_TIMPRE_BB = (__PRESC__))
   __HAL_RCC_UART4_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_UART4EN))
   __HAL_RCC_UART4_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_UART4EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_UART4EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_UART4_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_UART4LPEN))
   __HAL_RCC_UART4_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_UART4LPEN))
   __HAL_RCC_UART4_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_UART4RST))
   __HAL_RCC_UART4_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_UART4RST))
   __HAL_RCC_UART5_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_UART5EN))
   __HAL_RCC_UART5_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_UART5EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_UART5EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_UART5_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_UART5LPEN))
   __HAL_RCC_UART5_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_UART5LPEN))
   __HAL_RCC_UART5_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_UART5RST))
   __HAL_RCC_UART5_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_UART5RST))
   __HAL_RCC_UART7_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_UART7EN))
   __HAL_RCC_UART7_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_UART7EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_UART7EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_UART7_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_UART7LPEN))
   __HAL_RCC_UART7_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_UART7LPEN))
   __HAL_RCC_UART7_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_UART7RST))
   __HAL_RCC_UART7_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_UART7RST))
   __HAL_RCC_UART8_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_UART8EN))
   __HAL_RCC_UART8_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_UART8EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_UART8EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_UART8_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_UART8LPEN))
   __HAL_RCC_UART8_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_UART8LPEN))
   __HAL_RCC_UART8_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_UART8RST))
   __HAL_RCC_UART8_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_UART8RST))
   __HAL_RCC_USART1_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_USART1EN))
   __HAL_RCC_USART1_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_USART1_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_USART1LPEN))
   __HAL_RCC_USART1_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_USART1LPEN))
   __HAL_RCC_USART1_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_USART1RST))
   __HAL_RCC_USART1_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_USART1RST))
   __HAL_RCC_USART2_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_USART2EN))
   __HAL_RCC_USART2_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_USART2_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_USART2LPEN))
   __HAL_RCC_USART2_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_USART2LPEN))
   __HAL_RCC_USART2_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_USART2RST))
   __HAL_RCC_USART2_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_USART2RST))
   __HAL_RCC_USART3_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_USART3EN))
   __HAL_RCC_USART3_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART3EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART3EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_USART3_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_USART3LPEN))
   __HAL_RCC_USART3_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_USART3LPEN))
   __HAL_RCC_USART3_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_USART3RST))
   __HAL_RCC_USART3_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_USART3RST))
   __HAL_RCC_USART6_CLK_DISABLE()=(RCC->APB2ENR &= ~(RCC_APB2ENR_USART6EN))
   __HAL_RCC_USART6_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART6EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_USART6EN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_USART6_CLK_SLEEP_DISABLE()=(RCC->APB2LPENR &= ~(RCC_APB2LPENR_USART6LPEN))
   __HAL_RCC_USART6_CLK_SLEEP_ENABLE()=(RCC->APB2LPENR |= (RCC_APB2LPENR_USART6LPEN))
   __HAL_RCC_USART6_FORCE_RESET()=(RCC->APB2RSTR |= (RCC_APB2RSTR_USART6RST))
   __HAL_RCC_USART6_RELEASE_RESET()=(RCC->APB2RSTR &= ~(RCC_APB2RSTR_USART6RST))
   __HAL_RCC_USB_OTG_FS_CLK_DISABLE()=do { (RCC->AHB2ENR &= ~(RCC_AHB2ENR_OTGFSEN)); __HAL_RCC_SYSCFG_CLK_DISABLE(); }while(0)
   __HAL_RCC_USB_OTG_FS_CLK_ENABLE()=do {(RCC->AHB2ENR |= (RCC_AHB2ENR_OTGFSEN)); __HAL_RCC_SYSCFG_CLK_ENABLE(); }while(0)
   __HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE()=(RCC->AHB2LPENR &= ~(RCC_AHB2LPENR_OTGFSLPEN))
   __HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE()=(RCC->AHB2LPENR |= (RCC_AHB2LPENR_OTGFSLPEN))
   __HAL_RCC_USB_OTG_FS_FORCE_RESET()=(RCC->AHB2RSTR |= (RCC_AHB2RSTR_OTGFSRST))
   __HAL_RCC_USB_OTG_FS_RELEASE_RESET()=(RCC->AHB2RSTR &= ~(RCC_AHB2RSTR_OTGFSRST))
   __HAL_RCC_USB_OTG_HS_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_OTGHSEN))
   __HAL_RCC_USB_OTG_HS_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_OTGHSEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_OTGHSEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_OTGHSLPEN))
   __HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_OTGHSLPEN))
   __HAL_RCC_USB_OTG_HS_FORCE_RESET()=(RCC->AHB1RSTR |= (RCC_AHB1RSTR_OTGHRST))
   __HAL_RCC_USB_OTG_HS_RELEASE_RESET()=(RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_OTGHRST))
   __HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE()=(RCC->AHB1ENR &= ~(RCC_AHB1ENR_OTGHSULPIEN))
   __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_OTGHSULPIEN); tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_OTGHSULPIEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE()=(RCC->AHB1LPENR &= ~(RCC_AHB1LPENR_OTGHSULPILPEN))
   __HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE()=(RCC->AHB1LPENR |= (RCC_AHB1LPENR_OTGHSULPILPEN))
   __HAL_RCC_WWDG_CLK_DISABLE()=(RCC->APB1ENR &= ~(RCC_APB1ENR_WWDGEN))
   __HAL_RCC_WWDG_CLK_ENABLE()=do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN); UNUSED(tmpreg); } while(0)
   __HAL_RCC_WWDG_CLK_SLEEP_DISABLE()=(RCC->APB1LPENR &= ~(RCC_APB1LPENR_WWDGLPEN))
   __HAL_RCC_WWDG_CLK_SLEEP_ENABLE()=(RCC->APB1LPENR |= (RCC_APB1LPENR_WWDGLPEN))
   __HAL_RCC_WWDG_FORCE_RESET()=(RCC->APB1RSTR |= (RCC_APB1RSTR_WWDGRST))
   __HAL_RCC_WWDG_RELEASE_RESET()=(RCC->APB1RSTR &= ~(RCC_APB1RSTR_WWDGRST))
   __HAL_REMAPDMA_CHANNEL_DISABLE=__HAL_DMA_REMAP_CHANNEL_DISABLE
   __HAL_REMAPDMA_CHANNEL_ENABLE=__HAL_DMA_REMAP_CHANNEL_ENABLE
   __HAL_REMAPMEMORY_FLASH=__HAL_SYSCFG_REMAPMEMORY_FLASH
   __HAL_REMAPMEMORY_FMC=__HAL_SYSCFG_REMAPMEMORY_FMC
   __HAL_REMAPMEMORY_FMC_SDRAM=__HAL_SYSCFG_REMAPMEMORY_FMC_SDRAM
   __HAL_REMAPMEMORY_FSMC=__HAL_SYSCFG_REMAPMEMORY_FSMC
   __HAL_REMAPMEMORY_QUADSPI=__HAL_SYSCFG_REMAPMEMORY_QUADSPI
   __HAL_REMAPMEMORY_SRAM=__HAL_SYSCFG_REMAPMEMORY_SRAM
   __HAL_REMAPMEMORY_SYSTEMFLASH=__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH
   __HAL_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = 0)
   __HAL_RTC_CLEAR_FLAG=__HAL_RTC_EXTI_CLEAR_FLAG
   __HAL_RTC_DISABLE_IT=__HAL_RTC_EXTI_DISABLE_IT
   __HAL_RTC_ENABLE_IT=__HAL_RTC_EXTI_ENABLE_IT
   __HAL_RTC_EXTI_CLEAR_FLAG(__EXTI_LINE__)=(((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_CLEAR_FLAG() : (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG() : __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG()))
   __HAL_RTC_EXTI_DISABLE_IT(__EXTI_LINE__)=(((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_DISABLE_IT() : (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT() : __HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_IT()))
   __HAL_RTC_EXTI_ENABLE_IT(__EXTI_LINE__)=(((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_ENABLE_IT() : (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT() : __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT()))
   __HAL_RTC_EXTI_GENERATE_SWIT(__EXTI_LINE__)=(((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_GENERATE_SWIT() : (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_GENERATE_SWIT() : __HAL_RTC_TAMPER_TIMESTAMP_EXTI_GENERATE_SWIT()))
   __HAL_RTC_EXTI_GET_FLAG(__EXTI_LINE__)=(((__EXTI_LINE__) == RTC_EXTI_LINE_ALARM_EVENT) ? __HAL_RTC_ALARM_EXTI_GET_FLAG() : (((__EXTI_LINE__) == RTC_EXTI_LINE_WAKEUPTIMER_EVENT) ? __HAL_RTC_WAKEUPTIMER_EXTI_GET_FLAG() : __HAL_RTC_TAMPER_TIMESTAMP_EXTI_GET_FLAG()))
   __HAL_SDRAM_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = HAL_SDRAM_STATE_RESET)
   __HAL_SD_SDMMC_CLEAR_FLAG=__HAL_SD_SDIO_CLEAR_FLAG
   __HAL_SD_SDMMC_CLEAR_IT=__HAL_SD_SDIO_CLEAR_IT
   __HAL_SD_SDMMC_DISABLE=__HAL_SD_SDIO_DISABLE
   __HAL_SD_SDMMC_DISABLE_IT=__HAL_SD_SDIO_DISABLE_IT
   __HAL_SD_SDMMC_DMA_DISABLE=__HAL_SD_SDIO_DMA_DISABL
   __HAL_SD_SDMMC_DMA_ENABLE=__HAL_SD_SDIO_DMA_ENABLE
   __HAL_SD_SDMMC_ENABLE=__HAL_SD_SDIO_ENABLE
   __HAL_SD_SDMMC_ENABLE_IT=__HAL_SD_SDIO_ENABLE_IT
   __HAL_SD_SDMMC_GET_FLAG=__HAL_SD_SDIO_GET_FLAG
   __HAL_SD_SDMMC_GET_IT=__HAL_SD_SDIO_GET_IT
   __HAL_SMARTCARD_GETCLOCKSOURCE=SMARTCARD_GETCLOCKSOURCE
   __HAL_SMBUS_GENERATE_START=SMBUS_GENERATE_START
   __HAL_SMBUS_GET_ADDR_MATCH=SMBUS_GET_ADDR_MATCH
   __HAL_SMBUS_GET_ALERT_ENABLED=SMBUS_GET_ALERT_ENABLED
   __HAL_SMBUS_GET_DIR=SMBUS_GET_DIR
   __HAL_SMBUS_GET_PEC_MODE=SMBUS_GET_PEC_MODE
   __HAL_SMBUS_GET_STOP_MODE=SMBUS_GET_STOP_MODE
   __HAL_SMBUS_RESET_CR1=SMBUS_RESET_CR1
   __HAL_SMBUS_RESET_CR2=SMBUS_RESET_CR2
   __HAL_SPI_1LINE_RX=SPI_1LINE_RX
   __HAL_SPI_1LINE_TX=SPI_1LINE_TX
   __HAL_SPI_RESET_CRC=SPI_RESET_CRC
   __HAL_SRAM_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = HAL_SRAM_STATE_RESET)
   __HAL_SYSCFG_REMAPMEMORY_FLASH()=(SYSCFG->MEMRMP &= ~(SYSCFG_MEMRMP_MEM_MODE))
   __HAL_SYSCFG_REMAPMEMORY_FMC()=do {SYSCFG->MEMRMP &= ~(SYSCFG_MEMRMP_MEM_MODE); SYSCFG->MEMRMP |= (SYSCFG_MEMRMP_MEM_MODE_1); }while(0);
   __HAL_SYSCFG_REMAPMEMORY_FMC_SDRAM()=do {SYSCFG->MEMRMP &= ~(SYSCFG_MEMRMP_MEM_MODE); SYSCFG->MEMRMP |= (SYSCFG_MEMRMP_MEM_MODE_2); }while(0);
   __HAL_SYSCFG_REMAPMEMORY_SRAM()=do {SYSCFG->MEMRMP &= ~(SYSCFG_MEMRMP_MEM_MODE); SYSCFG->MEMRMP |= (SYSCFG_MEMRMP_MEM_MODE_0 | SYSCFG_MEMRMP_MEM_MODE_1); }while(0);
   __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH()=do {SYSCFG->MEMRMP &= ~(SYSCFG_MEMRMP_MEM_MODE); SYSCFG->MEMRMP |= SYSCFG_MEMRMP_MEM_MODE_0; }while(0);
   __HAL_TIM_DIRECTION_STATUS=__HAL_TIM_IS_TIM_COUNTING_DOWN
   __HAL_TIM_GetAutoreload=__HAL_TIM_GET_AUTORELOAD
   __HAL_TIM_GetClockDivision=__HAL_TIM_GET_CLOCKDIVISION
   __HAL_TIM_GetCompare=__HAL_TIM_GET_COMPARE
   __HAL_TIM_GetCounter=__HAL_TIM_GET_COUNTER
   __HAL_TIM_GetICPrescaler=__HAL_TIM_GET_ICPRESCALER
   __HAL_TIM_GET_ITSTATUS=__HAL_TIM_GET_IT_SOURCE
   __HAL_TIM_PRESCALER=__HAL_TIM_SET_PRESCALER
   __HAL_TIM_ResetICPrescalerValue=TIM_RESET_ICPRESCALERVALUE
   __HAL_TIM_SetAutoreload=__HAL_TIM_SET_AUTORELOAD
   __HAL_TIM_SetClockDivision=__HAL_TIM_SET_CLOCKDIVISION
   __HAL_TIM_SetCompare=__HAL_TIM_SET_COMPARE
   __HAL_TIM_SetCounter=__HAL_TIM_SET_COUNTER
   __HAL_TIM_SetICPrescaler=__HAL_TIM_SET_ICPRESCALER
   __HAL_TIM_SetICPrescalerValue=TIM_SET_ICPRESCALERVALUE
   __HAL_UART_CLEAR_FEFLAG(__HANDLE__)=__HAL_UART_CLEAR_PEFLAG(__HANDLE__)
   __HAL_UART_CLEAR_FLAG(__HANDLE__,__FLAG__)=((__HANDLE__)->Instance->SR = ~(__FLAG__))
   __HAL_UART_CLEAR_IDLEFLAG(__HANDLE__)=__HAL_UART_CLEAR_PEFLAG(__HANDLE__)
   __HAL_UART_CLEAR_NEFLAG(__HANDLE__)=__HAL_UART_CLEAR_PEFLAG(__HANDLE__)
   __HAL_UART_CLEAR_OREFLAG(__HANDLE__)=__HAL_UART_CLEAR_PEFLAG(__HANDLE__)
   __HAL_UART_CLEAR_PEFLAG(__HANDLE__)=do{ __IO uint32_t tmpreg; tmpreg = (__HANDLE__)->Instance->SR; tmpreg = (__HANDLE__)->Instance->DR; UNUSED(tmpreg); } while(0)
   __HAL_UART_DISABLE(__HANDLE__)=((__HANDLE__)->Instance->CR1 &= ~USART_CR1_UE)
   __HAL_UART_DISABLE_IT(__HANDLE__,__INTERRUPT__)=((((__INTERRUPT__) >> 28) == 1)? ((__HANDLE__)->Instance->CR1 &= ~((__INTERRUPT__) & UART_IT_MASK)): (((__INTERRUPT__) >> 28) == 2)? ((__HANDLE__)->Instance->CR2 &= ~((__INTERRUPT__) & UART_IT_MASK)): ((__HANDLE__)->Instance->CR3 &= ~ ((__INTERRUPT__) & UART_IT_MASK)))
   __HAL_UART_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->CR1 |= USART_CR1_UE)
   __HAL_UART_ENABLE_IT(__HANDLE__,__INTERRUPT__)=((((__INTERRUPT__) >> 28) == 1)? ((__HANDLE__)->Instance->CR1 |= ((__INTERRUPT__) & UART_IT_MASK)): (((__INTERRUPT__) >> 28) == 2)? ((__HANDLE__)->Instance->CR2 |= ((__INTERRUPT__) & UART_IT_MASK)): ((__HANDLE__)->Instance->CR3 |= ((__INTERRUPT__) & UART_IT_MASK)))
   __HAL_UART_FLUSH_DRREGISTER(__HANDLE__)=((__HANDLE__)->Instance->DR)
   __HAL_UART_GETCLOCKSOURCE=UART_GETCLOCKSOURCE
   __HAL_UART_GET_FLAG(__HANDLE__,__FLAG__)=(((__HANDLE__)->Instance->SR & (__FLAG__)) == (__FLAG__))
   __HAL_UART_GET_IT_SOURCE(__HANDLE__,__IT__)=(((((__IT__) >> 28) == 1)? (__HANDLE__)->Instance->CR1:(((((uint32_t)(__IT__)) >> 28) == 2)? (__HANDLE__)->Instance->CR2 : (__HANDLE__)->Instance->CR3)) & (((uint32_t)(__IT__)) & UART_IT_MASK))
   __HAL_UART_HWCONTROL_CTS_DISABLE(__HANDLE__)=do{ CLEAR_BIT((__HANDLE__)->Instance->CR3, USART_CR3_CTSE); (__HANDLE__)->Init.HwFlowCtl &= ~(USART_CR3_CTSE); } while(0)
   __HAL_UART_HWCONTROL_CTS_ENABLE(__HANDLE__)=do{ SET_BIT((__HANDLE__)->Instance->CR3, USART_CR3_CTSE); (__HANDLE__)->Init.HwFlowCtl |= USART_CR3_CTSE; } while(0)
   __HAL_UART_HWCONTROL_RTS_DISABLE(__HANDLE__)=do{ CLEAR_BIT((__HANDLE__)->Instance->CR3, USART_CR3_RTSE); (__HANDLE__)->Init.HwFlowCtl &= ~(USART_CR3_RTSE); } while(0)
   __HAL_UART_HWCONTROL_RTS_ENABLE(__HANDLE__)=do{ SET_BIT((__HANDLE__)->Instance->CR3, USART_CR3_RTSE); (__HANDLE__)->Init.HwFlowCtl |= USART_CR3_RTSE; } while(0)
   __HAL_UART_MASK_COMPUTATION=UART_MASK_COMPUTATION
   __HAL_UART_ONEBIT_DISABLE=__HAL_UART_ONE_BIT_SAMPLE_DISABLE
   __HAL_UART_ONEBIT_ENABLE=__HAL_UART_ONE_BIT_SAMPLE_ENABLE
   __HAL_UART_ONE_BIT_SAMPLE_DISABLE(__HANDLE__)=((__HANDLE__)->Instance->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT))
   __HAL_UART_ONE_BIT_SAMPLE_ENABLE(__HANDLE__)=((__HANDLE__)->Instance->CR3|= USART_CR3_ONEBIT)
   __HAL_UART_RESET_HANDLE_STATE(__HANDLE__)=((__HANDLE__)->State = HAL_UART_STATE_RESET)
   __HAL_UNFREEZE_CAN1_DBGMCU=__HAL_DBGMCU_UNFREEZE_CAN1
   __HAL_UNFREEZE_CAN2_DBGMCU=__HAL_DBGMCU_UNFREEZE_CAN2
   __HAL_UNFREEZE_I2C1_TIMEOUT_DBGMCU=__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT
   __HAL_UNFREEZE_I2C2_TIMEOUT_DBGMCU=__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT
   __HAL_UNFREEZE_I2C3_TIMEOUT_DBGMCU=__HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT
   __HAL_UNFREEZE_IWDG_DBGMCU=__HAL_DBGMCU_UNFREEZE_IWDG
   __HAL_UNFREEZE_LPTIM1_DBGMCU=__HAL_DBGMCU_UNFREEZE_LPTIM1
   __HAL_UNFREEZE_LPTIM2_DBGMCU=__HAL_DBGMCU_UNFREEZE_LPTIM2
   __HAL_UNFREEZE_RTC_DBGMCU=__HAL_DBGMCU_UNFREEZE_RTC
   __HAL_UNFREEZE_TIM10_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM10
   __HAL_UNFREEZE_TIM11_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM11
   __HAL_UNFREEZE_TIM12_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM12
   __HAL_UNFREEZE_TIM13_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM13
   __HAL_UNFREEZE_TIM14_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM14
   __HAL_UNFREEZE_TIM15_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM15
   __HAL_UNFREEZE_TIM16_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM16
   __HAL_UNFREEZE_TIM17_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM17
   __HAL_UNFREEZE_TIM1_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM1
   __HAL_UNFREEZE_TIM2_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM2
   __HAL_UNFREEZE_TIM3_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM3
   __HAL_UNFREEZE_TIM4_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM4
   __HAL_UNFREEZE_TIM5_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM5
   __HAL_UNFREEZE_TIM6_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM6
   __HAL_UNFREEZE_TIM7_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM7
   __HAL_UNFREEZE_TIM8_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM8
   __HAL_UNFREEZE_TIM9_DBGMCU=__HAL_DBGMCU_UNFREEZE_TIM9
   __HAL_UNFREEZE_WWDG_DBGMCU=__HAL_DBGMCU_UNFREEZE_WWDG
   __HAL_UNLOCK(__HANDLE__)=do{ (__HANDLE__)->Lock = HAL_UNLOCKED; }while (0)
   __HAL_USART_GETCLOCKSOURCE=USART_GETCLOCKSOURCE
   __HAL_USB_EXTI_CLEAR_FLAG=__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG
   __HAL_USB_EXTI_DISABLE_IT=__HAL_USB_WAKEUP_EXTI_DISABLE_IT
   __HAL_USB_EXTI_ENABLE_IT=__HAL_USB_WAKEUP_EXTI_ENABLE_IT
   __HAL_USB_EXTI_GET_FLAG=__HAL_USB_WAKEUP_EXTI_GET_FLAG
   __HAL_USB_EXTI_SET_FALLINGRISING_TRIGGER=__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE
   __HAL_USB_EXTI_SET_FALLING_EDGE_TRIGGER=__HAL_USB_WAKEUP_EXTI_ENABLE_FALLING_EDGE
   __HAL_USB_EXTI_SET_RISING_EDGE_TRIGGER=__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE
   __HAL_USB_FS_EXTI_CLEAR_FLAG=__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG
   __HAL_USB_FS_EXTI_DISABLE_IT=__HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT
   __HAL_USB_FS_EXTI_ENABLE_IT=__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT
   __HAL_USB_FS_EXTI_GENERATE_SWIT=__HAL_USB_OTG_FS_WAKEUP_EXTI_GENERATE_SWIT
   __HAL_USB_FS_EXTI_GET_FLAG=__HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG
   __HAL_USB_FS_EXTI_SET_FALLINGRISING_TRIGGER=__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE
   __HAL_USB_FS_EXTI_SET_FALLING_EGDE_TRIGGER=__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_FALLING_EDGE
   __HAL_USB_FS_EXTI_SET_RISING_EGDE_TRIGGER=__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE
   __HAL_USB_HS_EXTI_CLEAR_FLAG=__HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG
   __HAL_USB_HS_EXTI_DISABLE_IT=__HAL_USB_OTG_HS_WAKEUP_EXTI_DISABLE_IT
   __HAL_USB_HS_EXTI_ENABLE_IT=__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_IT
   __HAL_USB_HS_EXTI_GENERATE_SWIT=__HAL_USB_OTG_HS_WAKEUP_EXTI_GENERATE_SWIT
   __HAL_USB_HS_EXTI_GET_FLAG=__HAL_USB_OTG_HS_WAKEUP_EXTI_GET_FLAG
   __HAL_USB_HS_EXTI_SET_FALLINGRISING_TRIGGER=__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE
   __HAL_USB_HS_EXTI_SET_FALLING_EGDE_TRIGGER=__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_FALLING_EDGE
   __HAL_USB_HS_EXTI_SET_RISING_EGDE_TRIGGER=__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_EDGE
   __HAL_VREFINT_OUT_DISABLE=__HAL_SYSCFG_VREFINT_OUT_DISABLE
   __HAL_VREFINT_OUT_ENABLE=__HAL_SYSCFG_VREFINT_OUT_ENABLE
   __HASH_CLK_DISABLE=__HAL_RCC_HASH_CLK_DISABLE
   __HASH_CLK_ENABLE=__HAL_RCC_HASH_CLK_ENABLE
   __HASH_CLK_SLEEP_DISABLE=__HAL_RCC_HASH_CLK_SLEEP_DISABLE
   __HASH_CLK_SLEEP_ENABLE=__HAL_RCC_HASH_CLK_SLEEP_ENABLE
   __HASH_FORCE_RESET=__HAL_RCC_HASH_FORCE_RESET
   __HASH_RELEASE_RESET=__HAL_RCC_HASH_RELEASE_RESET
   __has_attribute(x)=0
   __has_builtin(x)=0
   __has_extension=__has_feature
   __has_feature(x)=0
   __have_long32=1
   __have_longlong64=1
   __hidden=__attribute__((__visibility__("hidden")))
   __HRTIM1_CLK_DISABLE=__HAL_RCC_HRTIM1_CLK_DISABLE
   __HRTIM1_CLK_ENABLE=__HAL_RCC_HRTIM1_CLK_ENABLE
   __HRTIM1_FORCE_RESET=__HAL_RCC_HRTIM1_FORCE_RESET
   __HRTIM1_IS_CLK_DISABLED=__HAL_RCC_HRTIM1_IS_CLK_DISABLED
   __HRTIM1_IS_CLK_ENABLED=__HAL_RCC_HRTIM1_IS_CLK_ENABLED
   __HRTIM1_RELEASE_RESET=__HAL_RCC_HRTIM1_RELEASE_RESET
   __htonl(_x)=__bswap32(_x)
   __htons(_x)=__bswap16(_x)
   __I2C1_CLK_DISABLE=__HAL_RCC_I2C1_CLK_DISABLE
   __I2C1_CLK_ENABLE=__HAL_RCC_I2C1_CLK_ENABLE
   __I2C1_CLK_SLEEP_DISABLE=__HAL_RCC_I2C1_CLK_SLEEP_DISABLE
   __I2C1_CLK_SLEEP_ENABLE=__HAL_RCC_I2C1_CLK_SLEEP_ENABLE
   __I2C1_FORCE_RESET=__HAL_RCC_I2C1_FORCE_RESET
   __I2C1_IS_CLK_DISABLED=__HAL_RCC_I2C1_IS_CLK_DISABLED
   __I2C1_IS_CLK_ENABLED=__HAL_RCC_I2C1_IS_CLK_ENABLED
   __I2C1_RELEASE_RESET=__HAL_RCC_I2C1_RELEASE_RESET
   __I2C2_CLK_DISABLE=__HAL_RCC_I2C2_CLK_DISABLE
   __I2C2_CLK_ENABLE=__HAL_RCC_I2C2_CLK_ENABLE
   __I2C2_CLK_SLEEP_DISABLE=__HAL_RCC_I2C2_CLK_SLEEP_DISABLE
   __I2C2_CLK_SLEEP_ENABLE=__HAL_RCC_I2C2_CLK_SLEEP_ENABLE
   __I2C2_FORCE_RESET=__HAL_RCC_I2C2_FORCE_RESET
   __I2C2_IS_CLK_DISABLED=__HAL_RCC_I2C2_IS_CLK_DISABLED
   __I2C2_IS_CLK_ENABLED=__HAL_RCC_I2C2_IS_CLK_ENABLED
   __I2C2_RELEASE_RESET=__HAL_RCC_I2C2_RELEASE_RESET
   __I2C3_CLK_DISABLE=__HAL_RCC_I2C3_CLK_DISABLE
   __I2C3_CLK_ENABLE=__HAL_RCC_I2C3_CLK_ENABLE
   __I2C3_CLK_SLEEP_DISABLE=__HAL_RCC_I2C3_CLK_SLEEP_DISABLE
   __I2C3_CLK_SLEEP_ENABLE=__HAL_RCC_I2C3_CLK_SLEEP_ENABLE
   __I2C3_FORCE_RESET=__HAL_RCC_I2C3_FORCE_RESET
   __I2C3_IS_CLK_DISABLED=__HAL_RCC_I2C3_IS_CLK_DISABLED
   __I2C3_IS_CLK_ENABLED=__HAL_RCC_I2C3_IS_CLK_ENABLED
   __I2C3_RELEASE_RESET=__HAL_RCC_I2C3_RELEASE_RESET
   __I=volatile
   __IEEE_LITTLE_ENDIAN=
   __imag__=(int)
   __IMPORT=
   __inline=inline
   __INT16="h"
   __int16_t_defined=1
   __int20=+2
   __INT32="l"
   __int32_t_defined=1
   __INT64="ll"
   __int64_t_defined=1
   __INT8="hh"
   __int8_t_defined=1
   __int_fast16_t_defined=1
   __int_fast32_t_defined=1
   __int_fast64_t_defined=1
   __int_fast8_t_defined=1
   __int_least16_t_defined=1
   __int_least32_t_defined=1
   __int_least64_t_defined=1
   __int_least8_t_defined=1
   __INT_N(TYPE)=template<> struct __is_integer<TYPE> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned TYPE> { enum { __value = 1 }; typedef __true_type __type; };
   __INT_WCHAR_T_H=
   __IO=volatile
   __IRDA_DISABLE=__HAL_IRDA_DISABLE
   __IRDA_ENABLE=__HAL_IRDA_ENABLE
   __IRDA_GETCLOCKSOURCE=IRDA_GETCLOCKSOURCE
   __IRDA_MASK_COMPUTATION=IRDA_MASK_COMPUTATION
   __ISO_C_VISIBLE=2011
   __LARGEFILE_VISIBLE=0
   __LCD_CLK_DISABLE=__HAL_RCC_LCD_CLK_DISABLE
   __LCD_CLK_ENABLE=__HAL_RCC_LCD_CLK_ENABLE
   __LCD_CLK_SLEEP_DISABLE=__HAL_RCC_LCD_CLK_SLEEP_DISABLE
   __LCD_CLK_SLEEP_ENABLE=__HAL_RCC_LCD_CLK_SLEEP_ENABLE
   __LCD_FORCE_RESET=__HAL_RCC_LCD_FORCE_RESET
   __LCD_RELEASE_RESET=__HAL_RCC_LCD_RELEASE_RESET
   __LEAST16="h"
   __LEAST32="l"
   __LEAST64="ll"
   __LEAST8="hh"
   __LINE__=1
   __lockable=__lock_annotate(lockable)
   __locks_exclusive(...)=__lock_annotate(exclusive_lock_function(__VA_ARGS__))
   __locks_shared(...)=__lock_annotate(shared_lock_function(__VA_ARGS__))
   __lock_acquire(lock)=__retarget_lock_acquire(lock)
   __lock_acquire_recursive(lock)=__retarget_lock_acquire_recursive(lock)
   __lock_annotate(x)=
   __lock_close(lock)=__retarget_lock_close(lock)
   __lock_close_recursive(lock)=__retarget_lock_close_recursive(lock)
   __LOCK_INIT(class,lock)=extern struct __lock __lock_ ## lock; class _LOCK_T lock = &__lock_ ## lock
   __lock_init(lock)=__retarget_lock_init(&lock)
   __LOCK_INIT_RECURSIVE(class,lock)=__LOCK_INIT(class,lock)
   __lock_init_recursive(lock)=__retarget_lock_init_recursive(&lock)
   __lock_release(lock)=__retarget_lock_release(lock)
   __lock_release_recursive(lock)=__retarget_lock_release_recursive(lock)
   __lock_try_acquire(lock)=__retarget_lock_try_acquire(lock)
   __lock_try_acquire_recursive(lock)=__retarget_lock_try_acquire_recursive(lock)
   __Long=long
   __long_double_t=long double
   __LPTIM1_CLK_DISABLE=__HAL_RCC_LPTIM1_CLK_DISABLE
   __LPTIM1_CLK_ENABLE=__HAL_RCC_LPTIM1_CLK_ENABLE
   __LPTIM1_CLK_SLEEP_DISABLE=__HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE
   __LPTIM1_CLK_SLEEP_ENABLE=__HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE
   __LPTIM1_FORCE_RESET=__HAL_RCC_LPTIM1_FORCE_RESET
   __LPTIM1_RELEASE_RESET=__HAL_RCC_LPTIM1_RELEASE_RESET
   __LPTIM2_CLK_DISABLE=__HAL_RCC_LPTIM2_CLK_DISABLE
   __LPTIM2_CLK_ENABLE=__HAL_RCC_LPTIM2_CLK_ENABLE
   __LPTIM2_CLK_SLEEP_DISABLE=__HAL_RCC_LPTIM2_CLK_SLEEP_DISABLE
   __LPTIM2_CLK_SLEEP_ENABLE=__HAL_RCC_LPTIM2_CLK_SLEEP_ENABLE
   __LPTIM2_FORCE_RESET=__HAL_RCC_LPTIM2_FORCE_RESET
   __LPTIM2_RELEASE_RESET=__HAL_RCC_LPTIM2_RELEASE_RESET
   __LPUART1_CLK_DISABLE=__HAL_RCC_LPUART1_CLK_DISABLE
   __LPUART1_CLK_ENABLE=__HAL_RCC_LPUART1_CLK_ENABLE
   __LPUART1_CLK_SLEEP_DISABLE=__HAL_RCC_LPUART1_CLK_SLEEP_DISABLE
   __LPUART1_CLK_SLEEP_ENABLE=__HAL_RCC_LPUART1_CLK_SLEEP_ENABLE
   __LPUART1_FORCE_RESET=__HAL_RCC_LPUART1_FORCE_RESET
   __LPUART1_RELEASE_RESET=__HAL_RCC_LPUART1_RELEASE_RESET
   __LTDC_CLK_DISABLE=__HAL_RCC_LTDC_CLK_DISABLE
   __LTDC_CLK_ENABLE=__HAL_RCC_LTDC_CLK_ENABLE
   __LTDC_CLK_SLEEP_ENABLE=__HAL_RCC_LTDC_CLK_SLEEP_ENABLE
   __LTDC_FORCE_RESET=__HAL_RCC_LTDC_FORCE_RESET
   __LTDC_RELEASE_RESET=__HAL_RCC_LTDC_RELEASE_RESET
   __MACHINE_ENDIAN_H__=
   __malloc_like=__attribute__((__malloc__))
   __min_size(x)=(x)
   __MISC_VISIBLE=1
   __MPU_PRESENT=1
   __N(msgid)=(msgid)
   __N25Q128A_H=
   __need_NULL=
   __need_size_t=
   __need_wchar_t=
   __need_wint_t=
   __need___va_list=
   __NEWLIB_H__=1
   __NEWLIB_MINOR__=0
   __NEWLIB_PATCHLEVEL__=0
   __NEWLIB__=3
   __NOINLINE=__attribute__ ( (noinline) )
   __noinline=__attribute__ ((__noinline__))
   __nonnull(x)=__attribute__((__nonnull__ x))
   __nonnull_all=__attribute__((__nonnull__))
   __NOR_ADDR_SHIFT=NOR_ADDR_SHIFT
   __NOR_WRITE=NOR_WRITE
   __no_lock_analysis=__lock_annotate(no_thread_safety_analysis)
   __ntohl(_x)=__bswap32(_x)
   __ntohs(_x)=__bswap16(_x)
   __null=0
   __NULLABILITY_PRAGMA_POP=
   __NULLABILITY_PRAGMA_PUSH=
   __null_sentinel=__attribute__((__sentinel__))
   __NVIC_PRIO_BITS=4
   __O=volatile
   __OBSOLETE_MATH=__OBSOLETE_MATH_DEFAULT
   __OBSOLETE_MATH_DEFAULT=1
   __offsetof(type,field)=offsetof(type, field)
   __offsetof__(x)=(x)
   __OPAMP_CLK_DISABLE=__HAL_RCC_OPAMP_CLK_DISABLE
   __OPAMP_CLK_ENABLE=__HAL_RCC_OPAMP_CLK_ENABLE
   __OPAMP_CLK_SLEEP_DISABLE=__HAL_RCC_OPAMP_CLK_SLEEP_DISABLE
   __OPAMP_CLK_SLEEP_ENABLE=__HAL_RCC_OPAMP_CLK_SLEEP_ENABLE
   __OPAMP_CSR_ALL_SWITCHES=OPAMP_CSR_ALL_SWITCHES
   __OPAMP_CSR_ANAWSELX=OPAMP_CSR_ANAWSELX
   __OPAMP_CSR_OPAXCALOUT=OPAMP_CSR_OPAXCALOUT
   __OPAMP_CSR_OPAXCAL_H=OPAMP_CSR_OPAXCAL_H
   __OPAMP_CSR_OPAXCAL_L=OPAMP_CSR_OPAXCAL_L
   __OPAMP_CSR_OPAXLPM=OPAMP_CSR_OPAXLPM
   __OPAMP_CSR_OPAXPD=OPAMP_CSR_OPAXPD
   __OPAMP_CSR_S3SELX=OPAMP_CSR_S3SELX
   __OPAMP_CSR_S4SELX=OPAMP_CSR_S4SELX
   __OPAMP_CSR_S5SELX=OPAMP_CSR_S5SELX
   __OPAMP_CSR_S6SELX=OPAMP_CSR_S6SELX
   __OPAMP_FORCE_RESET=__HAL_RCC_OPAMP_FORCE_RESET
   __OPAMP_OFFSET_TRIM_BITSPOSITION=OPAMP_OFFSET_TRIM_BITSPOSITION
   __OPAMP_OFFSET_TRIM_SET=OPAMP_OFFSET_TRIM_SET
   __OPAMP_RELEASE_RESET=__HAL_RCC_OPAMP_RELEASE_RESET
   __OTGFS_CLK_DISABLE=__HAL_RCC_OTGFS_CLK_DISABLE
   __OTGFS_CLK_ENABLE=__HAL_RCC_OTGFS_CLK_ENABLE
   __OTGFS_CLK_SLEEP_DISABLE=__HAL_RCC_OTGFS_CLK_SLEEP_DISABLE
   __OTGFS_CLK_SLEEP_ENABLE=__HAL_RCC_OTGFS_CLK_SLEEP_ENABLE
   __OTGFS_FORCE_RESET=__HAL_RCC_OTGFS_FORCE_RESET
   __OTGFS_RELEASE_RESET=__HAL_RCC_OTGFS_RELEASE_RESET
   __OTGHSULPI_CLK_SLEEP_DISABLE=__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE
   __OTGHSULPI_CLK_SLEEP_ENABLE=__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE
   __OTGHS_CLK_SLEEP_DISABLE=__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE
   __OTGHS_CLK_SLEEP_ENABLE=__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE
   __OTGHS_FORCE_RESET=__HAL_RCC_USB_OTG_HS_FORCE_RESET
   __OTGHS_RELEASE_RESET=__HAL_RCC_USB_OTG_HS_RELEASE_RESET
   __OTM8009A_H=
   __P(protos)=protos
   __packed=__attribute__((__packed__))
   __PKHBT(ARG1,ARG2,ARG3)=({ uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2); __ASM ("pkhbt %0, %1, %2, lsl %3" : "=r" (__RES) : "r" (__ARG1), "r" (__ARG2), "I" (ARG3) ); __RES; })
   __PKHTB(ARG1,ARG2,ARG3)=({ uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2); if (ARG3 == 0) __ASM ("pkhtb %0, %1, %2" : "=r" (__RES) : "r" (__ARG1), "r" (__ARG2) ); else __ASM ("pkhtb %0, %1, %2, asr %3" : "=r" (__RES) : "r" (__ARG1), "r" (__ARG2), "I" (ARG3) ); __RES; })
   __PMT(args)=args
   __POSIX_VISIBLE=200809
   __predict_false(exp)=__builtin_expect((exp), 0)
   __predict_true(exp)=__builtin_expect((exp), 1)
   __printf0like(fmtarg,firstvararg)=
   __printflike(fmtarg,firstvararg)=__attribute__((__format__ (__printf__, fmtarg, firstvararg)))
   __PTRDIFF_T=
   __ptrvalue=
   __ptr_t=void *
   __pt_guarded_by(x)=__lock_annotate(pt_guarded_by(x))
   __pure2=__attribute__((__const__))
   __pure=__attribute__((__pure__))
   __PWR_CLK_DISABLE=__HAL_RCC_PWR_CLK_DISABLE
   __PWR_CLK_ENABLE=__HAL_RCC_PWR_CLK_ENABLE
   __PWR_CLK_SLEEP_DISABLE=__HAL_RCC_PWR_CLK_SLEEP_DISABLE
   __PWR_CLK_SLEEP_ENABLE=__HAL_RCC_PWR_CLK_SLEEP_ENABLE
   __PWR_FORCE_RESET=__HAL_RCC_PWR_FORCE_RESET
   __PWR_IS_CLK_DISABLED=__HAL_RCC_PWR_IS_CLK_DISABLED
   __PWR_IS_CLK_ENABLED=__HAL_RCC_PWR_IS_CLK_ENABLED
   __PWR_RELEASE_RESET=__HAL_RCC_PWR_RELEASE_RESET
   __QSPI_CLK_DISABLE=__HAL_RCC_QSPI_CLK_DISABLE
   __QSPI_CLK_ENABLE=__HAL_RCC_QSPI_CLK_ENABLE
   __QSPI_CLK_SLEEP_DISABLE=__HAL_RCC_QSPI_CLK_SLEEP_DISABLE
   __QSPI_CLK_SLEEP_ENABLE=__HAL_RCC_QSPI_CLK_SLEEP_ENABLE
   __QSPI_FORCE_RESET=__HAL_RCC_QSPI_FORCE_RESET
   __QSPI_RELEASE_RESET=__HAL_RCC_QSPI_RELEASE_RESET
   __RAM_FUNC=HAL_StatusTypeDef __attribute__((section(".RamFunc")))
   __RAND_MAX=0x7fffffff
   __rangeof(type,start,end)=(__offsetof(type, end) - __offsetof(type, start))
   __RCC_BACKUPRESET_FORCE=__HAL_RCC_BACKUPRESET_FORCE
   __RCC_BACKUPRESET_RELEASE=__HAL_RCC_BACKUPRESET_RELEASE
   __RCC_PLLSRC=RCC_GET_PLL_OSCSOURCE
   __RCSID(s)=struct __hack
   __RCSID_SOURCE(s)=struct __hack
   __real__=(int)
   __requires_exclusive(...)=__lock_annotate(exclusive_locks_required(__VA_ARGS__))
   __requires_shared(...)=__lock_annotate(shared_locks_required(__VA_ARGS__))
   __requires_unlocked(...)=__lock_annotate(locks_excluded(__VA_ARGS__))
   __restrict=
   __result_use_check=__attribute__((__warn_unused_result__))
   __returns_twice=__attribute__((__returns_twice__))
   __RNG_CLK_DISABLE=__HAL_RCC_RNG_CLK_DISABLE
   __RNG_CLK_ENABLE=__HAL_RCC_RNG_CLK_ENABLE
   __RNG_CLK_SLEEP_DISABLE=__HAL_RCC_RNG_CLK_SLEEP_DISABLE
   __RNG_CLK_SLEEP_ENABLE=__HAL_RCC_RNG_CLK_SLEEP_ENABLE
   __RNG_FORCE_RESET=__HAL_RCC_RNG_FORCE_RESET
   __RNG_RELEASE_RESET=__HAL_RCC_RNG_RELEASE_RESET
   __RTC_WRITEPROTECTION_DISABLE=__HAL_RTC_WRITEPROTECTION_DISABLE
   __RTC_WRITEPROTECTION_ENABLE=__HAL_RTC_WRITEPROTECTION_ENABLE
   __SAI1_CLK_DISABLE=__HAL_RCC_SAI1_CLK_DISABLE
   __SAI1_CLK_ENABLE=__HAL_RCC_SAI1_CLK_ENABLE
   __SAI1_CLK_SLEEP_DISABLE=__HAL_RCC_SAI1_CLK_SLEEP_DISABLE
   __SAI1_CLK_SLEEP_ENABLE=__HAL_RCC_SAI1_CLK_SLEEP_ENABLE
   __SAI1_FORCE_RESET=__HAL_RCC_SAI1_FORCE_RESET
   __SAI1_RELEASE_RESET=__HAL_RCC_SAI1_RELEASE_RESET
   __SAI2_CLK_DISABLE=__HAL_RCC_SAI2_CLK_DISABLE
   __SAI2_CLK_ENABLE=__HAL_RCC_SAI2_CLK_ENABLE
   __SAI2_CLK_SLEEP_DISABLE=__HAL_RCC_SAI2_CLK_SLEEP_DISABLE
   __SAI2_CLK_SLEEP_ENABLE=__HAL_RCC_SAI2_CLK_SLEEP_ENABLE
   __SAI2_FORCE_RESET=__HAL_RCC_SAI2_FORCE_RESET
   __SAI2_RELEASE_RESET=__HAL_RCC_SAI2_RELEASE_RESET
   __SAPP=0x0100
   __scanflike(fmtarg,firstvararg)=__attribute__((__format__ (__scanf__, fmtarg, firstvararg)))
   __SCCSID(s)=struct __hack
   __sclearerr(p)=((void)((p)->_flags &= ~(__SERR|__SEOF)))
   __SDADC1_CLK_DISABLE=__HAL_RCC_SDADC1_CLK_DISABLE
   __SDADC1_CLK_ENABLE=__HAL_RCC_SDADC1_CLK_ENABLE
   __SDADC1_FORCE_RESET=__HAL_RCC_SDADC1_FORCE_RESET
   __SDADC1_IS_CLK_DISABLED=__HAL_RCC_SDADC1_IS_CLK_DISABLED
   __SDADC1_IS_CLK_ENABLED=__HAL_RCC_SDADC1_IS_CLK_ENABLED
   __SDADC1_RELEASE_RESET=__HAL_RCC_SDADC1_RELEASE_RESET
   __SDADC2_CLK_DISABLE=__HAL_RCC_SDADC2_CLK_DISABLE
   __SDADC2_CLK_ENABLE=__HAL_RCC_SDADC2_CLK_ENABLE
   __SDADC2_FORCE_RESET=__HAL_RCC_SDADC2_FORCE_RESET
   __SDADC2_IS_CLK_DISABLED=__HAL_RCC_SDADC2_IS_CLK_DISABLED
   __SDADC2_IS_CLK_ENABLED=__HAL_RCC_SDADC2_IS_CLK_ENABLED
   __SDADC2_RELEASE_RESET=__HAL_RCC_SDADC2_RELEASE_RESET
   __SDADC3_CLK_DISABLE=__HAL_RCC_SDADC3_CLK_DISABLE
   __SDADC3_CLK_ENABLE=__HAL_RCC_SDADC3_CLK_ENABLE
   __SDADC3_FORCE_RESET=__HAL_RCC_SDADC3_FORCE_RESET
   __SDADC3_IS_CLK_DISABLED=__HAL_RCC_SDADC3_IS_CLK_DISABLED
   __SDADC3_IS_CLK_ENABLED=__HAL_RCC_SDADC3_IS_CLK_ENABLED
   __SDADC3_RELEASE_RESET=__HAL_RCC_SDADC3_RELEASE_RESET
   __SDIO_CLK_DISABLE=__HAL_RCC_SDIO_CLK_DISABLE
   __SDIO_CLK_ENABLE=__HAL_RCC_SDIO_CLK_ENABLE
   __SDIO_CLK_SLEEP_DISABLE=__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
   __SDIO_CLK_SLEEP_ENABLE=__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
   __SDIO_FORCE_RESET=__HAL_RCC_SDIO_FORCE_RESET
   __SDIO_RELEASE_RESET=__HAL_RCC_SDIO_RELEASE_RESET
   __SDMMC_CLK_DISABLE=__HAL_RCC_SDMMC_CLK_DISABLE
   __SDMMC_CLK_ENABLE=__HAL_RCC_SDMMC_CLK_ENABLE
   __SDMMC_CLK_SLEEP_DISABLE=__HAL_RCC_SDMMC_CLK_SLEEP_DISABLE
   __SDMMC_CLK_SLEEP_ENABLE=__HAL_RCC_SDMMC_CLK_SLEEP_ENABLE
   __SDMMC_FORCE_RESET=__HAL_RCC_SDMMC_FORCE_RESET
   __SDMMC_RELEASE_RESET=__HAL_RCC_SDMMC_RELEASE_RESET
   __section(x)=__attribute__((__section__(x)))
   __SEOF=0x0020
   __SERR=0x0040
   __sfeof(p)=((int)(((p)->_flags & __SEOF) != 0))
   __sferror(p)=((int)(((p)->_flags & __SERR) != 0))
   __sfileno(p)=((p)->_file)
   __sgetc_r(__ptr,__p)=__sgetc_raw_r(__ptr, __p)
   __sgetc_raw_r(__ptr,__f)=(--(__f)->_r < 0 ? __srget_r(__ptr, __f) : (int)(*(__f)->_p++))
   __signed=signed
   __signgam_r(ptr)=_REENT_SIGNGAM(ptr)
   __SIZE_T=
   __size_t__=
   __SL64=0x8000
   __SLBF=0x0001
   __SMARTCARD_DISABLE=__HAL_SMARTCARD_DISABLE
   __SMARTCARD_DISABLE_IT=__HAL_SMARTCARD_DISABLE_IT
   __SMARTCARD_DMA_REQUEST_DISABLE=__HAL_SMARTCARD_DMA_REQUEST_DISABLE
   __SMARTCARD_DMA_REQUEST_ENABLE=__HAL_SMARTCARD_DMA_REQUEST_ENABLE
   __SMARTCARD_ENABLE=__HAL_SMARTCARD_ENABLE
   __SMARTCARD_ENABLE_IT=__HAL_SMARTCARD_ENABLE_IT
   __SMARTCARD_GETCLOCKSOURCE=SMARTCARD_GETCLOCKSOURCE
   __SMBF=0x0080
   __SNBF=0x0002
   __SNLK=0x0001
   __SNPT=0x0800
   __SOFF=0x1000
   __SOPT=0x0400
   __SORD=0x2000
   __SPI1_CLK_DISABLE=__HAL_RCC_SPI1_CLK_DISABLE
   __SPI1_CLK_ENABLE=__HAL_RCC_SPI1_CLK_ENABLE
   __SPI1_CLK_SLEEP_DISABLE=__HAL_RCC_SPI1_CLK_SLEEP_DISABLE
   __SPI1_CLK_SLEEP_ENABLE=__HAL_RCC_SPI1_CLK_SLEEP_ENABLE
   __SPI1_FORCE_RESET=__HAL_RCC_SPI1_FORCE_RESET
   __SPI1_IS_CLK_DISABLED=__HAL_RCC_SPI1_IS_CLK_DISABLED
   __SPI1_IS_CLK_ENABLED=__HAL_RCC_SPI1_IS_CLK_ENABLED
   __SPI1_RELEASE_RESET=__HAL_RCC_SPI1_RELEASE_RESET
   __SPI2_CLK_DISABLE=__HAL_RCC_SPI2_CLK_DISABLE
   __SPI2_CLK_ENABLE=__HAL_RCC_SPI2_CLK_ENABLE
   __SPI2_CLK_SLEEP_DISABLE=__HAL_RCC_SPI2_CLK_SLEEP_DISABLE
   __SPI2_CLK_SLEEP_ENABLE=__HAL_RCC_SPI2_CLK_SLEEP_ENABLE
   __SPI2_FORCE_RESET=__HAL_RCC_SPI2_FORCE_RESET
   __SPI2_IS_CLK_DISABLED=__HAL_RCC_SPI2_IS_CLK_DISABLED
   __SPI2_IS_CLK_ENABLED=__HAL_RCC_SPI2_IS_CLK_ENABLED
   __SPI2_RELEASE_RESET=__HAL_RCC_SPI2_RELEASE_RESET
   __SPI3_CLK_DISABLE=__HAL_RCC_SPI3_CLK_DISABLE
   __SPI3_CLK_ENABLE=__HAL_RCC_SPI3_CLK_ENABLE
   __SPI3_CLK_SLEEP_DISABLE=__HAL_RCC_SPI3_CLK_SLEEP_DISABLE
   __SPI3_CLK_SLEEP_ENABLE=__HAL_RCC_SPI3_CLK_SLEEP_ENABLE
   __SPI3_FORCE_RESET=__HAL_RCC_SPI3_FORCE_RESET
   __SPI3_IS_CLK_DISABLED=__HAL_RCC_SPI3_IS_CLK_DISABLED
   __SPI3_IS_CLK_ENABLED=__HAL_RCC_SPI3_IS_CLK_ENABLED
   __SPI3_RELEASE_RESET=__HAL_RCC_SPI3_RELEASE_RESET
   __SPI4_CLK_DISABLE=__HAL_RCC_SPI4_CLK_DISABLE
   __SPI4_CLK_ENABLE=__HAL_RCC_SPI4_CLK_ENABLE
   __SPI4_CLK_SLEEP_DISABLE=__HAL_RCC_SPI4_CLK_SLEEP_DISABLE
   __SPI4_CLK_SLEEP_ENABLE=__HAL_RCC_SPI4_CLK_SLEEP_ENABLE
   __SPI4_FORCE_RESET=__HAL_RCC_SPI4_FORCE_RESET
   __SPI4_IS_CLK_DISABLED=__HAL_RCC_SPI4_IS_CLK_DISABLED
   __SPI4_IS_CLK_ENABLED=__HAL_RCC_SPI4_IS_CLK_ENABLED
   __SPI4_RELEASE_RESET=__HAL_RCC_SPI4_RELEASE_RESET
   __SPI5_CLK_DISABLE=__HAL_RCC_SPI5_CLK_DISABLE
   __SPI5_CLK_ENABLE=__HAL_RCC_SPI5_CLK_ENABLE
   __SPI5_CLK_SLEEP_DISABLE=__HAL_RCC_SPI5_CLK_SLEEP_DISABLE
   __SPI5_CLK_SLEEP_ENABLE=__HAL_RCC_SPI5_CLK_SLEEP_ENABLE
   __SPI5_FORCE_RESET=__HAL_RCC_SPI5_FORCE_RESET
   __SPI5_RELEASE_RESET=__HAL_RCC_SPI5_RELEASE_RESET
   __SPI6_CLK_DISABLE=__HAL_RCC_SPI6_CLK_DISABLE
   __SPI6_CLK_ENABLE=__HAL_RCC_SPI6_CLK_ENABLE
   __SPI6_CLK_SLEEP_DISABLE=__HAL_RCC_SPI6_CLK_SLEEP_DISABLE
   __SPI6_CLK_SLEEP_ENABLE=__HAL_RCC_SPI6_CLK_SLEEP_ENABLE
   __SPI6_FORCE_RESET=__HAL_RCC_SPI6_FORCE_RESET
   __SPI6_RELEASE_RESET=__HAL_RCC_SPI6_RELEASE_RESET
   __SRAM1_CLK_SLEEP_DISABLE=__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE
   __SRAM1_CLK_SLEEP_ENABLE=__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE
   __SRAM2_CLK_SLEEP_DISABLE=__HAL_RCC_SRAM2_CLK_SLEEP_DISABLE
   __SRAM2_CLK_SLEEP_ENABLE=__HAL_RCC_SRAM2_CLK_SLEEP_ENABLE
   __SRAM3_CLK_SLEEP_ENABLE=__HAL_RCC_SRAM3_CLK_SLEEP_ENABLE
   __SRAM_CLK_DISABLE=__HAL_RCC_SRAM_CLK_DISABLE
   __SRAM_CLK_ENABLE=__HAL_RCC_SRAM_CLK_ENABLE
   __SRAM_IS_CLK_DISABLED=__HAL_RCC_SRAM_IS_CLK_DISABLED
   __SRAM_IS_CLK_ENABLED=__HAL_RCC_SRAM_IS_CLK_ENABLED
   __SRD=0x0004
   __SRW=0x0010
   __SSAT(ARG1,ARG2)=({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("ssat %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
   __SSAT16(ARG1,ARG2)=({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("ssat16 %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
   __SSP_FORTIFY_LEVEL=0
   __SSTR=0x0200
   __STATIC_INLINE=static inline
   __stdcall=
   __STDC_CONSTANT_MACROS=
   __STDC_LIMIT_MACROS=
   __STDINT_EXP(x)=__##x##__
   __STM32469I_DISCOVERY_H=
   __STM32469I_DISCOVERY_LCD_H=
   __STM32469I_DISCOVERY_QSPI_H=
   __STM32469I_DISCOVERY_SDRAM_H=
   __STM32F469xx_H=
   __STM32F4xx_CMSIS_DEVICE_VERSION=((__STM32F4xx_CMSIS_DEVICE_VERSION_MAIN << 24) |(__STM32F4xx_CMSIS_DEVICE_VERSION_SUB1 << 16) |(__STM32F4xx_CMSIS_DEVICE_VERSION_SUB2 << 8 ) |(__STM32F4xx_CMSIS_DEVICE_VERSION))
   __STM32F4xx_CMSIS_DEVICE_VERSION_MAIN=(0x02)
   __STM32F4xx_CMSIS_DEVICE_VERSION_RC=(0x00)
   __STM32F4xx_CMSIS_DEVICE_VERSION_SUB1=(0x04)
   __STM32F4xx_CMSIS_DEVICE_VERSION_SUB2=(0x00)
   __STM32F4xx_FLASH_RAMFUNC_H=
   __STM32F4xx_H=
   __STM32F4xx_HAL_CONF_H=
   __STM32F4xx_HAL_CORTEX_H=
   __STM32F4xx_HAL_DEF=
   __STM32F4xx_HAL_DMA2D_H=
   __STM32F4xx_HAL_DMA_EX_H=
   __STM32F4xx_HAL_DMA_H=
   __STM32F4xx_HAL_DSI_H=
   __STM32F4xx_HAL_FLASH_EX_H=
   __STM32F4xx_HAL_FLASH_H=
   __STM32F4xx_HAL_GPIO_EX_H=
   __STM32F4xx_HAL_GPIO_H=
   __STM32F4xx_HAL_H=
   __STM32F4xx_HAL_I2C_EX_H=
   __STM32F4xx_HAL_I2C_H=
   __STM32F4xx_HAL_LTDC_EX_H=
   __STM32F4xx_HAL_LTDC_H=
   __STM32F4xx_HAL_PWR_EX_H=
   __STM32F4xx_HAL_PWR_H=
   __STM32F4xx_HAL_QSPI_H=
   __STM32F4xx_HAL_RCC_EX_H=
   __STM32F4xx_HAL_RCC_H=
   __STM32F4xx_HAL_SDRAM_H=
   __STM32F4xx_HAL_SRAM_H=
   __STM32F4xx_HAL_UART_H=
   __STM32F4xx_LL_FMC_H=
   __STM32_HAL_LEGACY=
   __strfmonlike(fmtarg,firstvararg)=__attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))
   __strftimelike(fmtarg,firstvararg)=__attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
   __STRING(x)=#x
   __strong_reference(sym,aliassym)=extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))
   __SVID_VISIBLE=1
   __SWID=0x2000
   __SWPMI1_CLK_DISABLE=__HAL_RCC_SWPMI1_CLK_DISABLE
   __SWPMI1_CLK_ENABLE=__HAL_RCC_SWPMI1_CLK_ENABLE
   __SWPMI1_CLK_SLEEP_DISABLE=__HAL_RCC_SWPMI1_CLK_SLEEP_DISABLE
   __SWPMI1_CLK_SLEEP_ENABLE=__HAL_RCC_SWPMI1_CLK_SLEEP_ENABLE
   __SWPMI1_FORCE_RESET=__HAL_RCC_SWPMI1_FORCE_RESET
   __SWPMI1_RELEASE_RESET=__HAL_RCC_SWPMI1_RELEASE_RESET
   __SWR=0x0008
   __sym_compat(sym,impl,verid)=__asm__(".symver " #impl ", " #sym "@" #verid)
   __sym_default(sym,impl,verid)=__asm__(".symver " #impl ", " #sym "@@" #verid)
   __SYSCFG_CLK_DISABLE=__HAL_RCC_SYSCFG_CLK_DISABLE
   __SYSCFG_CLK_ENABLE=__HAL_RCC_SYSCFG_CLK_ENABLE
   __SYSCFG_CLK_SLEEP_DISABLE=__HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE
   __SYSCFG_CLK_SLEEP_ENABLE=__HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE
   __SYSCFG_FORCE_RESET=__HAL_RCC_SYSCFG_FORCE_RESET
   __SYSCFG_IS_CLK_DISABLED=__HAL_RCC_SYSCFG_IS_CLK_DISABLED
   __SYSCFG_IS_CLK_ENABLED=__HAL_RCC_SYSCFG_IS_CLK_ENABLED
   __SYSCFG_RELEASE_RESET=__HAL_RCC_SYSCFG_RELEASE_RESET
   __SYSTEM_STM32F4XX_H=
   __SYS_CONFIG_H__=
   __SYS_LOCK_H__=
   __thread=
   __THROW=
   __throw_exception_again=
   __TIM10_CLK_DISABLE=__HAL_RCC_TIM10_CLK_DISABLE
   __TIM10_CLK_ENABLE=__HAL_RCC_TIM10_CLK_ENABLE
   __TIM10_CLK_SLEEP_DISABLE=__HAL_RCC_TIM10_CLK_SLEEP_DISABLE
   __TIM10_CLK_SLEEP_ENABLE=__HAL_RCC_TIM10_CLK_SLEEP_ENABLE
   __TIM10_FORCE_RESET=__HAL_RCC_TIM10_FORCE_RESET
   __TIM10_RELEASE_RESET=__HAL_RCC_TIM10_RELEASE_RESET
   __TIM11_CLK_DISABLE=__HAL_RCC_TIM11_CLK_DISABLE
   __TIM11_CLK_ENABLE=__HAL_RCC_TIM11_CLK_ENABLE
   __TIM11_CLK_SLEEP_DISABLE=__HAL_RCC_TIM11_CLK_SLEEP_DISABLE
   __TIM11_CLK_SLEEP_ENABLE=__HAL_RCC_TIM11_CLK_SLEEP_ENABLE
   __TIM11_FORCE_RESET=__HAL_RCC_TIM11_FORCE_RESET
   __TIM11_RELEASE_RESET=__HAL_RCC_TIM11_RELEASE_RESET
   __TIM12_CLK_DISABLE=__HAL_RCC_TIM12_CLK_DISABLE
   __TIM12_CLK_ENABLE=__HAL_RCC_TIM12_CLK_ENABLE
   __TIM12_CLK_SLEEP_DISABLE=__HAL_RCC_TIM12_CLK_SLEEP_DISABLE
   __TIM12_CLK_SLEEP_ENABLE=__HAL_RCC_TIM12_CLK_SLEEP_ENABLE
   __TIM12_FORCE_RESET=__HAL_RCC_TIM12_FORCE_RESET
   __TIM12_IS_CLK_DISABLED=__HAL_RCC_TIM12_IS_CLK_DISABLED
   __TIM12_IS_CLK_ENABLED=__HAL_RCC_TIM12_IS_CLK_ENABLED
   __TIM12_RELEASE_RESET=__HAL_RCC_TIM12_RELEASE_RESET
   __TIM13_CLK_DISABLE=__HAL_RCC_TIM13_CLK_DISABLE
   __TIM13_CLK_ENABLE=__HAL_RCC_TIM13_CLK_ENABLE
   __TIM13_CLK_SLEEP_DISABLE=__HAL_RCC_TIM13_CLK_SLEEP_DISABLE
   __TIM13_CLK_SLEEP_ENABLE=__HAL_RCC_TIM13_CLK_SLEEP_ENABLE
   __TIM13_FORCE_RESET=__HAL_RCC_TIM13_FORCE_RESET
   __TIM13_IS_CLK_DISABLED=__HAL_RCC_TIM13_IS_CLK_DISABLED
   __TIM13_IS_CLK_ENABLED=__HAL_RCC_TIM13_IS_CLK_ENABLED
   __TIM13_RELEASE_RESET=__HAL_RCC_TIM13_RELEASE_RESET
   __TIM14_CLK_DISABLE=__HAL_RCC_TIM14_CLK_DISABLE
   __TIM14_CLK_ENABLE=__HAL_RCC_TIM14_CLK_ENABLE
   __TIM14_CLK_SLEEP_DISABLE=__HAL_RCC_TIM14_CLK_SLEEP_DISABLE
   __TIM14_CLK_SLEEP_ENABLE=__HAL_RCC_TIM14_CLK_SLEEP_ENABLE
   __TIM14_FORCE_RESET=__HAL_RCC_TIM14_FORCE_RESET
   __TIM14_IS_CLK_DISABLED=__HAL_RCC_TIM14_IS_CLK_DISABLED
   __TIM14_IS_CLK_ENABLED=__HAL_RCC_TIM14_IS_CLK_ENABLED
   __TIM14_RELEASE_RESET=__HAL_RCC_TIM14_RELEASE_RESET
   __TIM15_CLK_DISABLE=__HAL_RCC_TIM15_CLK_DISABLE
   __TIM15_CLK_ENABLE=__HAL_RCC_TIM15_CLK_ENABLE
   __TIM15_CLK_SLEEP_DISABLE=__HAL_RCC_TIM15_CLK_SLEEP_DISABLE
   __TIM15_CLK_SLEEP_ENABLE=__HAL_RCC_TIM15_CLK_SLEEP_ENABLE
   __TIM15_FORCE_RESET=__HAL_RCC_TIM15_FORCE_RESET
   __TIM15_IS_CLK_DISABLED=__HAL_RCC_TIM15_IS_CLK_DISABLED
   __TIM15_IS_CLK_ENABLED=__HAL_RCC_TIM15_IS_CLK_ENABLED
   __TIM15_RELEASE_RESET=__HAL_RCC_TIM15_RELEASE_RESET
   __TIM16_CLK_DISABLE=__HAL_RCC_TIM16_CLK_DISABLE
   __TIM16_CLK_ENABLE=__HAL_RCC_TIM16_CLK_ENABLE
   __TIM16_CLK_SLEEP_DISABLE=__HAL_RCC_TIM16_CLK_SLEEP_DISABLE
   __TIM16_CLK_SLEEP_ENABLE=__HAL_RCC_TIM16_CLK_SLEEP_ENABLE
   __TIM16_FORCE_RESET=__HAL_RCC_TIM16_FORCE_RESET
   __TIM16_IS_CLK_DISABLED=__HAL_RCC_TIM16_IS_CLK_DISABLED
   __TIM16_IS_CLK_ENABLED=__HAL_RCC_TIM16_IS_CLK_ENABLED
   __TIM16_RELEASE_RESET=__HAL_RCC_TIM16_RELEASE_RESET
   __TIM17_CLK_DISABLE=__HAL_RCC_TIM17_CLK_DISABLE
   __TIM17_CLK_ENABLE=__HAL_RCC_TIM17_CLK_ENABLE
   __TIM17_CLK_SLEEP_DISABLE=__HAL_RCC_TIM17_CLK_SLEEP_DISABLE
   __TIM17_CLK_SLEEP_ENABLE=__HAL_RCC_TIM17_CLK_SLEEP_ENABLE
   __TIM17_FORCE_RESET=__HAL_RCC_TIM17_FORCE_RESET
   __TIM17_IS_CLK_DISABLED=__HAL_RCC_TIM17_IS_CLK_DISABLED
   __TIM17_IS_CLK_ENABLED=__HAL_RCC_TIM17_IS_CLK_ENABLED
   __TIM17_RELEASE_RESET=__HAL_RCC_TIM17_RELEASE_RESET
   __TIM18_CLK_DISABLE=__HAL_RCC_TIM18_CLK_DISABLE
   __TIM18_CLK_ENABLE=__HAL_RCC_TIM18_CLK_ENABLE
   __TIM18_FORCE_RESET=__HAL_RCC_TIM18_FORCE_RESET
   __TIM18_IS_CLK_DISABLED=__HAL_RCC_TIM18_IS_CLK_DISABLED
   __TIM18_IS_CLK_ENABLED=__HAL_RCC_TIM18_IS_CLK_ENABLED
   __TIM18_RELEASE_RESET=__HAL_RCC_TIM18_RELEASE_RESET
   __TIM19_CLK_DISABLE=__HAL_RCC_TIM19_CLK_DISABLE
   __TIM19_CLK_ENABLE=__HAL_RCC_TIM19_CLK_ENABLE
   __TIM19_FORCE_RESET=__HAL_RCC_TIM19_FORCE_RESET
   __TIM19_IS_CLK_DISABLED=__HAL_RCC_TIM19_IS_CLK_DISABLED
   __TIM19_IS_CLK_ENABLED=__HAL_RCC_TIM19_IS_CLK_ENABLED
   __TIM19_RELEASE_RESET=__HAL_RCC_TIM19_RELEASE_RESET
   __TIM1_CLK_DISABLE=__HAL_RCC_TIM1_CLK_DISABLE
   __TIM1_CLK_ENABLE=__HAL_RCC_TIM1_CLK_ENABLE
   __TIM1_CLK_SLEEP_DISABLE=__HAL_RCC_TIM1_CLK_SLEEP_DISABLE
   __TIM1_CLK_SLEEP_ENABLE=__HAL_RCC_TIM1_CLK_SLEEP_ENABLE
   __TIM1_FORCE_RESET=__HAL_RCC_TIM1_FORCE_RESET
   __TIM1_IS_CLK_DISABLED=__HAL_RCC_TIM1_IS_CLK_DISABLED
   __TIM1_IS_CLK_ENABLED=__HAL_RCC_TIM1_IS_CLK_ENABLED
   __TIM1_RELEASE_RESET=__HAL_RCC_TIM1_RELEASE_RESET
   __TIM20_CLK_DISABLE=__HAL_RCC_TIM20_CLK_DISABLE
   __TIM20_CLK_ENABLE=__HAL_RCC_TIM20_CLK_ENABLE
   __TIM20_FORCE_RESET=__HAL_RCC_TIM20_FORCE_RESET
   __TIM20_IS_CLK_DISABLED=__HAL_RCC_TIM20_IS_CLK_DISABLED
   __TIM20_IS_CLK_ENABLED=__HAL_RCC_TIM20_IS_CLK_ENABLED
   __TIM20_RELEASE_RESET=__HAL_RCC_TIM20_RELEASE_RESET
   __TIM21_CLK_DISABLE=__HAL_RCC_TIM21_CLK_DISABLE
   __TIM21_CLK_ENABLE=__HAL_RCC_TIM21_CLK_ENABLE
   __TIM21_CLK_SLEEP_DISABLE=__HAL_RCC_TIM21_CLK_SLEEP_DISABLE
   __TIM21_CLK_SLEEP_ENABLE=__HAL_RCC_TIM21_CLK_SLEEP_ENABLE
   __TIM21_FORCE_RESET=__HAL_RCC_TIM21_FORCE_RESET
   __TIM21_RELEASE_RESET=__HAL_RCC_TIM21_RELEASE_RESET
   __TIM22_CLK_DISABLE=__HAL_RCC_TIM22_CLK_DISABLE
   __TIM22_CLK_ENABLE=__HAL_RCC_TIM22_CLK_ENABLE
   __TIM22_CLK_SLEEP_DISABLE=__HAL_RCC_TIM22_CLK_SLEEP_DISABLE
   __TIM22_CLK_SLEEP_ENABLE=__HAL_RCC_TIM22_CLK_SLEEP_ENABLE
   __TIM22_FORCE_RESET=__HAL_RCC_TIM22_FORCE_RESET
   __TIM22_RELEASE_RESET=__HAL_RCC_TIM22_RELEASE_RESET
   __TIM2_CLK_DISABLE=__HAL_RCC_TIM2_CLK_DISABLE
   __TIM2_CLK_ENABLE=__HAL_RCC_TIM2_CLK_ENABLE
   __TIM2_CLK_SLEEP_DISABLE=__HAL_RCC_TIM2_CLK_SLEEP_DISABLE
   __TIM2_CLK_SLEEP_ENABLE=__HAL_RCC_TIM2_CLK_SLEEP_ENABLE
   __TIM2_FORCE_RESET=__HAL_RCC_TIM2_FORCE_RESET
   __TIM2_IS_CLK_DISABLED=__HAL_RCC_TIM2_IS_CLK_DISABLED
   __TIM2_IS_CLK_ENABLED=__HAL_RCC_TIM2_IS_CLK_ENABLED
   __TIM2_RELEASE_RESET=__HAL_RCC_TIM2_RELEASE_RESET
   __TIM3_CLK_DISABLE=__HAL_RCC_TIM3_CLK_DISABLE
   __TIM3_CLK_ENABLE=__HAL_RCC_TIM3_CLK_ENABLE
   __TIM3_CLK_SLEEP_DISABLE=__HAL_RCC_TIM3_CLK_SLEEP_DISABLE
   __TIM3_CLK_SLEEP_ENABLE=__HAL_RCC_TIM3_CLK_SLEEP_ENABLE
   __TIM3_FORCE_RESET=__HAL_RCC_TIM3_FORCE_RESET
   __TIM3_IS_CLK_DISABLED=__HAL_RCC_TIM3_IS_CLK_DISABLED
   __TIM3_IS_CLK_ENABLED=__HAL_RCC_TIM3_IS_CLK_ENABLED
   __TIM3_RELEASE_RESET=__HAL_RCC_TIM3_RELEASE_RESET
   __TIM4_CLK_DISABLE=__HAL_RCC_TIM4_CLK_DISABLE
   __TIM4_CLK_ENABLE=__HAL_RCC_TIM4_CLK_ENABLE
   __TIM4_CLK_SLEEP_DISABLE=__HAL_RCC_TIM4_CLK_SLEEP_DISABLE
   __TIM4_CLK_SLEEP_ENABLE=__HAL_RCC_TIM4_CLK_SLEEP_ENABLE
   __TIM4_FORCE_RESET=__HAL_RCC_TIM4_FORCE_RESET
   __TIM4_IS_CLK_DISABLED=__HAL_RCC_TIM4_IS_CLK_DISABLED
   __TIM4_IS_CLK_ENABLED=__HAL_RCC_TIM4_IS_CLK_ENABLED
   __TIM4_RELEASE_RESET=__HAL_RCC_TIM4_RELEASE_RESET
   __TIM5_CLK_DISABLE=__HAL_RCC_TIM5_CLK_DISABLE
   __TIM5_CLK_ENABLE=__HAL_RCC_TIM5_CLK_ENABLE
   __TIM5_CLK_SLEEP_DISABLE=__HAL_RCC_TIM5_CLK_SLEEP_DISABLE
   __TIM5_CLK_SLEEP_ENABLE=__HAL_RCC_TIM5_CLK_SLEEP_ENABLE
   __TIM5_FORCE_RESET=__HAL_RCC_TIM5_FORCE_RESET
   __TIM5_IS_CLK_DISABLED=__HAL_RCC_TIM5_IS_CLK_DISABLED
   __TIM5_IS_CLK_ENABLED=__HAL_RCC_TIM5_IS_CLK_ENABLED
   __TIM5_RELEASE_RESET=__HAL_RCC_TIM5_RELEASE_RESET
   __TIM6_CLK_DISABLE=__HAL_RCC_TIM6_CLK_DISABLE
   __TIM6_CLK_ENABLE=__HAL_RCC_TIM6_CLK_ENABLE
   __TIM6_CLK_SLEEP_DISABLE=__HAL_RCC_TIM6_CLK_SLEEP_DISABLE
   __TIM6_CLK_SLEEP_ENABLE=__HAL_RCC_TIM6_CLK_SLEEP_ENABLE
   __TIM6_FORCE_RESET=__HAL_RCC_TIM6_FORCE_RESET
   __TIM6_IS_CLK_DISABLED=__HAL_RCC_TIM6_IS_CLK_DISABLED
   __TIM6_IS_CLK_ENABLED=__HAL_RCC_TIM6_IS_CLK_ENABLED
   __TIM6_RELEASE_RESET=__HAL_RCC_TIM6_RELEASE_RESET
   __TIM7_CLK_DISABLE=__HAL_RCC_TIM7_CLK_DISABLE
   __TIM7_CLK_ENABLE=__HAL_RCC_TIM7_CLK_ENABLE
   __TIM7_CLK_SLEEP_DISABLE=__HAL_RCC_TIM7_CLK_SLEEP_DISABLE
   __TIM7_CLK_SLEEP_ENABLE=__HAL_RCC_TIM7_CLK_SLEEP_ENABLE
   __TIM7_FORCE_RESET=__HAL_RCC_TIM7_FORCE_RESET
   __TIM7_IS_CLK_DISABLED=__HAL_RCC_TIM7_IS_CLK_DISABLED
   __TIM7_IS_CLK_ENABLED=__HAL_RCC_TIM7_IS_CLK_ENABLED
   __TIM7_RELEASE_RESET=__HAL_RCC_TIM7_RELEASE_RESET
   __TIM8_CLK_DISABLE=__HAL_RCC_TIM8_CLK_DISABLE
   __TIM8_CLK_ENABLE=__HAL_RCC_TIM8_CLK_ENABLE
   __TIM8_CLK_SLEEP_DISABLE=__HAL_RCC_TIM8_CLK_SLEEP_DISABLE
   __TIM8_CLK_SLEEP_ENABLE=__HAL_RCC_TIM8_CLK_SLEEP_ENABLE
   __TIM8_FORCE_RESET=__HAL_RCC_TIM8_FORCE_RESET
   __TIM8_IS_CLK_DISABLED=__HAL_RCC_TIM8_IS_CLK_DISABLED
   __TIM8_IS_CLK_ENABLED=__HAL_RCC_TIM8_IS_CLK_ENABLED
   __TIM8_RELEASE_RESET=__HAL_RCC_TIM8_RELEASE_RESET
   __TIM9_CLK_DISABLE=__HAL_RCC_TIM9_CLK_DISABLE
   __TIM9_CLK_ENABLE=__HAL_RCC_TIM9_CLK_ENABLE
   __TIM9_CLK_SLEEP_DISABLE=__HAL_RCC_TIM9_CLK_SLEEP_DISABLE
   __TIM9_CLK_SLEEP_ENABLE=__HAL_RCC_TIM9_CLK_SLEEP_ENABLE
   __TIM9_FORCE_RESET=__HAL_RCC_TIM9_FORCE_RESET
   __TIM9_RELEASE_RESET=__HAL_RCC_TIM9_RELEASE_RESET
   __timer_t_defined=
   __time_t_defined=
   __TIME__="04:02:06"
   __TMP_FLT_EVAL_METHOD=
   __try=if (true)
   __trylocks_exclusive(...)=__lock_annotate(exclusive_trylock_function(__VA_ARGS__))
   __trylocks_shared(...)=__lock_annotate(shared_trylock_function(__VA_ARGS__))
   __TSC_CLK_DISABLE=__HAL_RCC_TSC_CLK_DISABLE
   __TSC_CLK_ENABLE=__HAL_RCC_TSC_CLK_ENABLE
   __TSC_CLK_SLEEP_DISABLE=__HAL_RCC_TSC_CLK_SLEEP_DISABLE
   __TSC_CLK_SLEEP_ENABLE=__HAL_RCC_TSC_CLK_SLEEP_ENABLE
   __TSC_FORCE_RESET=__HAL_RCC_TSC_FORCE_RESET
   __TSC_IS_CLK_DISABLED=__HAL_RCC_TSC_IS_CLK_DISABLED
   __TSC_IS_CLK_ENABLED=__HAL_RCC_TSC_IS_CLK_ENABLED
   __TSC_RELEASE_RESET=__HAL_RCC_TSC_RELEASE_RESET
   __UART4_CLK_DISABLE=__HAL_RCC_UART4_CLK_DISABLE
   __UART4_CLK_ENABLE=__HAL_RCC_UART4_CLK_ENABLE
   __UART4_CLK_SLEEP_DISABLE=__HAL_RCC_UART4_CLK_SLEEP_DISABLE
   __UART4_CLK_SLEEP_ENABLE=__HAL_RCC_UART4_CLK_SLEEP_ENABLE
   __UART4_FORCE_RESET=__HAL_RCC_UART4_FORCE_RESET
   __UART4_IS_CLK_DISABLED=__HAL_RCC_UART4_IS_CLK_DISABLED
   __UART4_IS_CLK_ENABLED=__HAL_RCC_UART4_IS_CLK_ENABLED
   __UART4_RELEASE_RESET=__HAL_RCC_UART4_RELEASE_RESET
   __UART5_CLK_DISABLE=__HAL_RCC_UART5_CLK_DISABLE
   __UART5_CLK_ENABLE=__HAL_RCC_UART5_CLK_ENABLE
   __UART5_CLK_SLEEP_DISABLE=__HAL_RCC_UART5_CLK_SLEEP_DISABLE
   __UART5_CLK_SLEEP_ENABLE=__HAL_RCC_UART5_CLK_SLEEP_ENABLE
   __UART5_FORCE_RESET=__HAL_RCC_UART5_FORCE_RESET
   __UART5_IS_CLK_DISABLED=__HAL_RCC_UART5_IS_CLK_DISABLED
   __UART5_IS_CLK_ENABLED=__HAL_RCC_UART5_IS_CLK_ENABLED
   __UART5_RELEASE_RESET=__HAL_RCC_UART5_RELEASE_RESET
   __UART7_CLK_DISABLE=__HAL_RCC_UART7_CLK_DISABLE
   __UART7_CLK_ENABLE=__HAL_RCC_UART7_CLK_ENABLE
   __UART7_CLK_SLEEP_DISABLE=__HAL_RCC_UART7_CLK_SLEEP_DISABLE
   __UART7_CLK_SLEEP_ENABLE=__HAL_RCC_UART7_CLK_SLEEP_ENABLE
   __UART7_FORCE_RESET=__HAL_RCC_UART7_FORCE_RESET
   __UART7_RELEASE_RESET=__HAL_RCC_UART7_RELEASE_RESET
   __UART8_CLK_DISABLE=__HAL_RCC_UART8_CLK_DISABLE
   __UART8_CLK_ENABLE=__HAL_RCC_UART8_CLK_ENABLE
   __UART8_CLK_SLEEP_DISABLE=__HAL_RCC_UART8_CLK_SLEEP_DISABLE
   __UART8_CLK_SLEEP_ENABLE=__HAL_RCC_UART8_CLK_SLEEP_ENABLE
   __UART8_FORCE_RESET=__HAL_RCC_UART8_FORCE_RESET
   __UART8_RELEASE_RESET=__HAL_RCC_UART8_RELEASE_RESET
   __UART_BRR_SAMPLING16=UART_BRR_SAMPLING16
   __UART_BRR_SAMPLING8=UART_BRR_SAMPLING8
   __UART_GETCLOCKSOURCE=UART_GETCLOCKSOURCE
   __UART_MASK_COMPUTATION=UART_MASK_COMPUTATION
   __unbounded=
   __unlocks(...)=__lock_annotate(unlock_function(__VA_ARGS__))
   __unreachable()=__builtin_unreachable()
   __unused=__attribute__((__unused__))
   __USART1_CLK_DISABLE=__HAL_RCC_USART1_CLK_DISABLE
   __USART1_CLK_ENABLE=__HAL_RCC_USART1_CLK_ENABLE
   __USART1_CLK_SLEEP_DISABLE=__HAL_RCC_USART1_CLK_SLEEP_DISABLE
   __USART1_CLK_SLEEP_ENABLE=__HAL_RCC_USART1_CLK_SLEEP_ENABLE
   __USART1_FORCE_RESET=__HAL_RCC_USART1_FORCE_RESET
   __USART1_IS_CLK_DISABLED=__HAL_RCC_USART1_IS_CLK_DISABLED
   __USART1_IS_CLK_ENABLED=__HAL_RCC_USART1_IS_CLK_ENABLED
   __USART1_RELEASE_RESET=__HAL_RCC_USART1_RELEASE_RESET
   __USART2_CLK_DISABLE=__HAL_RCC_USART2_CLK_DISABLE
   __USART2_CLK_ENABLE=__HAL_RCC_USART2_CLK_ENABLE
   __USART2_CLK_SLEEP_DISABLE=__HAL_RCC_USART2_CLK_SLEEP_DISABLE
   __USART2_CLK_SLEEP_ENABLE=__HAL_RCC_USART2_CLK_SLEEP_ENABLE
   __USART2_FORCE_RESET=__HAL_RCC_USART2_FORCE_RESET
   __USART2_IS_CLK_DISABLED=__HAL_RCC_USART2_IS_CLK_DISABLED
   __USART2_IS_CLK_ENABLED=__HAL_RCC_USART2_IS_CLK_ENABLED
   __USART2_RELEASE_RESET=__HAL_RCC_USART2_RELEASE_RESET
   __USART3_CLK_DISABLE=__HAL_RCC_USART3_CLK_DISABLE
   __USART3_CLK_ENABLE=__HAL_RCC_USART3_CLK_ENABLE
   __USART3_CLK_SLEEP_DISABLE=__HAL_RCC_USART3_CLK_SLEEP_DISABLE
   __USART3_CLK_SLEEP_ENABLE=__HAL_RCC_USART3_CLK_SLEEP_ENABLE
   __USART3_FORCE_RESET=__HAL_RCC_USART3_FORCE_RESET
   __USART3_IS_CLK_DISABLED=__HAL_RCC_USART3_IS_CLK_DISABLED
   __USART3_IS_CLK_ENABLED=__HAL_RCC_USART3_IS_CLK_ENABLED
   __USART3_RELEASE_RESET=__HAL_RCC_USART3_RELEASE_RESET
   __USART4_CLK_DISABLE=__HAL_RCC_USART4_CLK_DISABLE
   __USART4_CLK_ENABLE=__HAL_RCC_USART4_CLK_ENABLE
   __USART4_CLK_SLEEP_DISABLE=__HAL_RCC_USART4_CLK_SLEEP_DISABLE
   __USART4_CLK_SLEEP_ENABLE=__HAL_RCC_USART4_CLK_SLEEP_ENABLE
   __USART4_FORCE_RESET=__HAL_RCC_USART4_FORCE_RESET
   __USART4_RELEASE_RESET=__HAL_RCC_USART4_RELEASE_RESET
   __USART5_CLK_DISABLE=__HAL_RCC_USART5_CLK_DISABLE
   __USART5_CLK_ENABLE=__HAL_RCC_USART5_CLK_ENABLE
   __USART5_CLK_SLEEP_DISABLE=__HAL_RCC_USART5_CLK_SLEEP_DISABLE
   __USART5_CLK_SLEEP_ENABLE=__HAL_RCC_USART5_CLK_SLEEP_ENABLE
   __USART5_FORCE_RESET=__HAL_RCC_USART5_FORCE_RESET
   __USART5_RELEASE_RESET=__HAL_RCC_USART5_RELEASE_RESET
   __USART6_CLK_DISABLE=__HAL_RCC_USART6_CLK_DISABLE
   __USART6_CLK_ENABLE=__HAL_RCC_USART6_CLK_ENABLE
   __USART6_CLK_SLEEP_DISABLE=__HAL_RCC_USART6_CLK_SLEEP_DISABLE
   __USART6_CLK_SLEEP_ENABLE=__HAL_RCC_USART6_CLK_SLEEP_ENABLE
   __USART6_FORCE_RESET=__HAL_RCC_USART6_FORCE_RESET
   __USART6_RELEASE_RESET=__HAL_RCC_USART6_RELEASE_RESET
   __USART7_CLK_DISABLE=__HAL_RCC_USART7_CLK_DISABLE
   __USART7_CLK_ENABLE=__HAL_RCC_USART7_CLK_ENABLE
   __USART7_FORCE_RESET=__HAL_RCC_USART7_FORCE_RESET
   __USART7_RELEASE_RESET=__HAL_RCC_USART7_RELEASE_RESET
   __USART8_CLK_DISABLE=__HAL_RCC_USART8_CLK_DISABLE
   __USART8_CLK_ENABLE=__HAL_RCC_USART8_CLK_ENABLE
   __USART8_FORCE_RESET=__HAL_RCC_USART8_FORCE_RESET
   __USART8_RELEASE_RESET=__HAL_RCC_USART8_RELEASE_RESET
   __USART_DISABLE=__HAL_USART_DISABLE
   __USART_DISABLE_IT=__HAL_USART_DISABLE_IT
   __USART_ENABLE=__HAL_USART_ENABLE
   __USART_ENABLE_IT=__HAL_USART_ENABLE_IT
   __USART_GETCLOCKSOURCE=USART_GETCLOCKSOURCE
   __USAT(ARG1,ARG2)=({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("usat %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
   __USAT16(ARG1,ARG2)=({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("usat16 %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
   __USB_CLK_DISABLE=__HAL_RCC_USB_CLK_DISABLE
   __USB_CLK_ENABLE=__HAL_RCC_USB_CLK_ENABLE
   __USB_CLK_SLEEP_DISABLE=__HAL_RCC_USB_CLK_SLEEP_DISABLE
   __USB_CLK_SLEEP_ENABLE=__HAL_RCC_USB_CLK_SLEEP_ENABLE
   __USB_FORCE_RESET=__HAL_RCC_USB_FORCE_RESET
   __USB_IS_CLK_DISABLED=__HAL_RCC_USB_IS_CLK_DISABLED
   __USB_IS_CLK_ENABLED=__HAL_RCC_USB_IS_CLK_ENABLED
   __USB_OTG_FS_CLK_DISABLE=__HAL_RCC_USB_OTG_FS_CLK_DISABLE
   __USB_OTG_FS_CLK_ENABLE=__HAL_RCC_USB_OTG_FS_CLK_ENABLE
   __USB_OTG_FS_CLK_SLEEP_DISABLE=__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE
   __USB_OTG_FS_CLK_SLEEP_ENABLE=__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE
   __USB_OTG_FS_FORCE_RESET=__HAL_RCC_USB_OTG_FS_FORCE_RESET
   __USB_OTG_FS_RELEASE_RESET=__HAL_RCC_USB_OTG_FS_RELEASE_RESET
   __USB_OTG_HS_CLK_DISABLE=__HAL_RCC_USB_OTG_HS_CLK_DISABLE
   __USB_OTG_HS_CLK_ENABLE=__HAL_RCC_USB_OTG_HS_CLK_ENABLE
   __USB_OTG_HS_ULPI_CLK_DISABLE=__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE
   __USB_OTG_HS_ULPI_CLK_ENABLE=__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE
   __USB_RELEASE_RESET=__HAL_RCC_USB_RELEASE_RESET
   __used=__attribute__((__used__))
   __u_char_defined=
   __u_int_defined=
   __u_long_defined=
   __u_short_defined=
   __VALIST=__gnuc_va_list
   __va_copy(d,s)=__builtin_va_copy(d,s)
   __va_list__=
   __Vendor_SysTickConfig=0
   __volatile=volatile
   __warn_references(sym,msg)=__asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")
   __WCHAR_T=
   __wchar_t__=
   __weak=__attribute__((weak))
   __weak_reference(sym,alias)=__asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)
   __weak_symbol=__attribute__((__weak__))
   __WWDG_CLK_DISABLE=__HAL_RCC_WWDG_CLK_DISABLE
   __WWDG_CLK_ENABLE=__HAL_RCC_WWDG_CLK_ENABLE
   __WWDG_CLK_SLEEP_DISABLE=__HAL_RCC_WWDG_CLK_SLEEP_DISABLE
   __WWDG_CLK_SLEEP_ENABLE=__HAL_RCC_WWDG_CLK_SLEEP_ENABLE
   __WWDG_FORCE_RESET=__HAL_RCC_WWDG_FORCE_RESET
   __WWDG_IS_CLK_DISABLED=__HAL_RCC_WWDG_IS_CLK_DISABLED
   __WWDG_IS_CLK_ENABLED=__HAL_RCC_WWDG_IS_CLK_ENABLED
   __WWDG_RELEASE_RESET=__HAL_RCC_WWDG_RELEASE_RESET
   __XSI_VISIBLE=0
   __XSTRING(x)=__STRING(x)
   ___int16_t_defined=1
   ___int32_t_defined=1
   ___int64_t_defined=1
   ___int8_t_defined=1
   ___int_least16_t_defined=1
   ___int_least32_t_defined=1
   ___int_least64_t_defined=1
   ___int_least8_t_defined=1
   ___int_ptrdiff_t_h=
   ___int_size_t_h=
   ___int_wchar_t_h=

Macro definitions (from files actually parsed):
   HACT=480
   HBP=1
   HFP=1
   HSYNC=1
   LAYER0_ADDRESS=(LCD_FB_START_ADDRESS)
   VACT=200
   VACT=400
   VBP=1
   VFP=1
   VSYNC=1

Unresolved names:
   Attempt to use symbol failed: AHB1ENR in file D:\GitHub\PushToGo_HC\target\bsp\source\BoardConfiguration.cpp:155
   Attempt to use symbol failed: AHB1ENR in file D:\GitHub\PushToGo_HC\target\bsp\source\BoardConfiguration.cpp:155
   Attempt to use symbol failed: HAL_NVIC_DisableIRQ in file D:\GitHub\PushToGo_HC\target\bsp\source\BoardConfiguration.cpp:160
   Attempt to use symbol failed: APB1ENR in file D:\GitHub\PushToGo_HC\target\bsp\source\BoardConfiguration.cpp:298
   Attempt to use symbol failed: APB1ENR in file D:\GitHub\PushToGo_HC\target\bsp\source\BoardConfiguration.cpp:298
   Attempt to use symbol failed: CR in file D:\GitHub\PushToGo_HC\target\bsp\source\BoardConfiguration.cpp:303
   Attempt to use symbol failed: CR in file D:\GitHub\PushToGo_HC\target\bsp\source\BoardConfiguration.cpp:303
   Attempt to use symbol failed: CR in file D:\GitHub\PushToGo_HC\target\bsp\source\BoardConfiguration.cpp:303
   Attempt to use symbol failed: AHB1ENR in file D:\GitHub\PushToGo_HC\target\bsp\source\BoardConfiguration.cpp:484
   Attempt to use symbol failed: AHB1ENR in file D:\GitHub\PushToGo_HC\target\bsp\source\BoardConfiguration.cpp:484

Written on Tue Jul 23 04:02:06 EDT 2019
